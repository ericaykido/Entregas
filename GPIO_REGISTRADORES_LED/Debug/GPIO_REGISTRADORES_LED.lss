
GPIO_REGISTRADORES_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001784  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00401784  00401784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000448  20000000  0040178c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000094  20000448  00401bd4  00010448  2**2
                  ALLOC
  4 .stack        00003004  200004dc  00401c68  00010448  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010472  2**0
                  CONTENTS, READONLY
  7 .debug_info   000057ed  00000000  00000000  000104cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000dc3  00000000  00000000  00015cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000338a  00000000  00000000  00016a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005e0  00000000  00000000  00019e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000540  00000000  00000000  0001a3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001197d  00000000  00000000  0001a927  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007409  00000000  00000000  0002c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00050a83  00000000  00000000  000336ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000019b4  00000000  00000000  00084130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034e0 	.word	0x200034e0
  400004:	00400815 	.word	0x00400815
  400008:	004008dd 	.word	0x004008dd
  40000c:	004008dd 	.word	0x004008dd
  400010:	004008dd 	.word	0x004008dd
  400014:	004008dd 	.word	0x004008dd
  400018:	004008dd 	.word	0x004008dd
	...
  40002c:	004008dd 	.word	0x004008dd
  400030:	004008dd 	.word	0x004008dd
  400034:	00000000 	.word	0x00000000
  400038:	004008dd 	.word	0x004008dd
  40003c:	004008dd 	.word	0x004008dd
  400040:	004008dd 	.word	0x004008dd
  400044:	004008dd 	.word	0x004008dd
  400048:	004008dd 	.word	0x004008dd
  40004c:	004008dd 	.word	0x004008dd
  400050:	004008dd 	.word	0x004008dd
  400054:	004008dd 	.word	0x004008dd
  400058:	004008dd 	.word	0x004008dd
  40005c:	004008dd 	.word	0x004008dd
  400060:	004008dd 	.word	0x004008dd
  400064:	004008dd 	.word	0x004008dd
  400068:	00000000 	.word	0x00000000
  40006c:	00400571 	.word	0x00400571
  400070:	00400589 	.word	0x00400589
  400074:	004005a1 	.word	0x004005a1
  400078:	004008dd 	.word	0x004008dd
  40007c:	004008dd 	.word	0x004008dd
	...
  400088:	004008dd 	.word	0x004008dd
  40008c:	004008dd 	.word	0x004008dd
  400090:	004008dd 	.word	0x004008dd
  400094:	004008dd 	.word	0x004008dd
  400098:	004008dd 	.word	0x004008dd
  40009c:	004008dd 	.word	0x004008dd
  4000a0:	004008dd 	.word	0x004008dd
  4000a4:	004008dd 	.word	0x004008dd
  4000a8:	004008dd 	.word	0x004008dd
  4000ac:	004008dd 	.word	0x004008dd
  4000b0:	004008dd 	.word	0x004008dd
  4000b4:	004008dd 	.word	0x004008dd
  4000b8:	004008dd 	.word	0x004008dd
  4000bc:	004008dd 	.word	0x004008dd
  4000c0:	004008dd 	.word	0x004008dd
  4000c4:	004008dd 	.word	0x004008dd
  4000c8:	004008dd 	.word	0x004008dd

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000448 	.word	0x20000448
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040178c 	.word	0x0040178c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	0040178c 	.word	0x0040178c
  40011c:	2000044c 	.word	0x2000044c
  400120:	0040178c 	.word	0x0040178c
  400124:	00000000 	.word	0x00000000

00400128 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400128:	b580      	push	{r7, lr}
  40012a:	b082      	sub	sp, #8
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2b07      	cmp	r3, #7
  400134:	d830      	bhi.n	400198 <osc_enable+0x70>
  400136:	a201      	add	r2, pc, #4	; (adr r2, 40013c <osc_enable+0x14>)
  400138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40013c:	00400199 	.word	0x00400199
  400140:	0040015d 	.word	0x0040015d
  400144:	00400165 	.word	0x00400165
  400148:	0040016d 	.word	0x0040016d
  40014c:	00400175 	.word	0x00400175
  400150:	0040017d 	.word	0x0040017d
  400154:	00400185 	.word	0x00400185
  400158:	0040018f 	.word	0x0040018f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40015c:	2000      	movs	r0, #0
  40015e:	4b10      	ldr	r3, [pc, #64]	; (4001a0 <osc_enable+0x78>)
  400160:	4798      	blx	r3
		break;
  400162:	e019      	b.n	400198 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400164:	2001      	movs	r0, #1
  400166:	4b0e      	ldr	r3, [pc, #56]	; (4001a0 <osc_enable+0x78>)
  400168:	4798      	blx	r3
		break;
  40016a:	e015      	b.n	400198 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40016c:	2000      	movs	r0, #0
  40016e:	4b0d      	ldr	r3, [pc, #52]	; (4001a4 <osc_enable+0x7c>)
  400170:	4798      	blx	r3
		break;
  400172:	e011      	b.n	400198 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400174:	2010      	movs	r0, #16
  400176:	4b0b      	ldr	r3, [pc, #44]	; (4001a4 <osc_enable+0x7c>)
  400178:	4798      	blx	r3
		break;
  40017a:	e00d      	b.n	400198 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40017c:	2020      	movs	r0, #32
  40017e:	4b09      	ldr	r3, [pc, #36]	; (4001a4 <osc_enable+0x7c>)
  400180:	4798      	blx	r3
		break;
  400182:	e009      	b.n	400198 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400184:	2000      	movs	r0, #0
  400186:	213e      	movs	r1, #62	; 0x3e
  400188:	4b07      	ldr	r3, [pc, #28]	; (4001a8 <osc_enable+0x80>)
  40018a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40018c:	e004      	b.n	400198 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40018e:	2001      	movs	r0, #1
  400190:	213e      	movs	r1, #62	; 0x3e
  400192:	4b05      	ldr	r3, [pc, #20]	; (4001a8 <osc_enable+0x80>)
  400194:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400196:	bf00      	nop
	}
}
  400198:	3708      	adds	r7, #8
  40019a:	46bd      	mov	sp, r7
  40019c:	bd80      	pop	{r7, pc}
  40019e:	bf00      	nop
  4001a0:	0040063d 	.word	0x0040063d
  4001a4:	004006a9 	.word	0x004006a9
  4001a8:	00400719 	.word	0x00400719

004001ac <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d826      	bhi.n	400208 <osc_is_ready+0x5c>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_is_ready+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	004001e1 	.word	0x004001e1
  4001c4:	004001e5 	.word	0x004001e5
  4001c8:	004001e5 	.word	0x004001e5
  4001cc:	004001f7 	.word	0x004001f7
  4001d0:	004001f7 	.word	0x004001f7
  4001d4:	004001f7 	.word	0x004001f7
  4001d8:	004001f7 	.word	0x004001f7
  4001dc:	004001f7 	.word	0x004001f7
	case OSC_SLCK_32K_RC:
		return 1;
  4001e0:	2301      	movs	r3, #1
  4001e2:	e012      	b.n	40020a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001e4:	4b0b      	ldr	r3, [pc, #44]	; (400214 <osc_is_ready+0x68>)
  4001e6:	4798      	blx	r3
  4001e8:	4603      	mov	r3, r0
  4001ea:	2b00      	cmp	r3, #0
  4001ec:	bf14      	ite	ne
  4001ee:	2301      	movne	r3, #1
  4001f0:	2300      	moveq	r3, #0
  4001f2:	b2db      	uxtb	r3, r3
  4001f4:	e009      	b.n	40020a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001f6:	4b08      	ldr	r3, [pc, #32]	; (400218 <osc_is_ready+0x6c>)
  4001f8:	4798      	blx	r3
  4001fa:	4603      	mov	r3, r0
  4001fc:	2b00      	cmp	r3, #0
  4001fe:	bf14      	ite	ne
  400200:	2301      	movne	r3, #1
  400202:	2300      	moveq	r3, #0
  400204:	b2db      	uxtb	r3, r3
  400206:	e000      	b.n	40020a <osc_is_ready+0x5e>
	}

	return 0;
  400208:	2300      	movs	r3, #0
}
  40020a:	4618      	mov	r0, r3
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00400675 	.word	0x00400675
  400218:	00400791 	.word	0x00400791

0040021c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40021c:	b480      	push	{r7}
  40021e:	b083      	sub	sp, #12
  400220:	af00      	add	r7, sp, #0
  400222:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400224:	687b      	ldr	r3, [r7, #4]
  400226:	2b07      	cmp	r3, #7
  400228:	d825      	bhi.n	400276 <osc_get_rate+0x5a>
  40022a:	a201      	add	r2, pc, #4	; (adr r2, 400230 <osc_get_rate+0x14>)
  40022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400230:	00400251 	.word	0x00400251
  400234:	00400257 	.word	0x00400257
  400238:	0040025d 	.word	0x0040025d
  40023c:	00400263 	.word	0x00400263
  400240:	00400267 	.word	0x00400267
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026f 	.word	0x0040026f
  40024c:	00400273 	.word	0x00400273
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400250:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400254:	e010      	b.n	400278 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40025a:	e00d      	b.n	400278 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40025c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400260:	e00a      	b.n	400278 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400262:	4b08      	ldr	r3, [pc, #32]	; (400284 <osc_get_rate+0x68>)
  400264:	e008      	b.n	400278 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400266:	4b08      	ldr	r3, [pc, #32]	; (400288 <osc_get_rate+0x6c>)
  400268:	e006      	b.n	400278 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_get_rate+0x70>)
  40026c:	e004      	b.n	400278 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40026e:	4b07      	ldr	r3, [pc, #28]	; (40028c <osc_get_rate+0x70>)
  400270:	e002      	b.n	400278 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400272:	4b06      	ldr	r3, [pc, #24]	; (40028c <osc_get_rate+0x70>)
  400274:	e000      	b.n	400278 <osc_get_rate+0x5c>
	}

	return 0;
  400276:	2300      	movs	r3, #0
}
  400278:	4618      	mov	r0, r3
  40027a:	370c      	adds	r7, #12
  40027c:	46bd      	mov	sp, r7
  40027e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400282:	4770      	bx	lr
  400284:	003d0900 	.word	0x003d0900
  400288:	007a1200 	.word	0x007a1200
  40028c:	00b71b00 	.word	0x00b71b00

00400290 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400290:	b580      	push	{r7, lr}
  400292:	b082      	sub	sp, #8
  400294:	af00      	add	r7, sp, #0
  400296:	4603      	mov	r3, r0
  400298:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40029a:	bf00      	nop
  40029c:	79fb      	ldrb	r3, [r7, #7]
  40029e:	4618      	mov	r0, r3
  4002a0:	4b05      	ldr	r3, [pc, #20]	; (4002b8 <osc_wait_ready+0x28>)
  4002a2:	4798      	blx	r3
  4002a4:	4603      	mov	r3, r0
  4002a6:	f083 0301 	eor.w	r3, r3, #1
  4002aa:	b2db      	uxtb	r3, r3
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	d1f5      	bne.n	40029c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4002b0:	3708      	adds	r7, #8
  4002b2:	46bd      	mov	sp, r7
  4002b4:	bd80      	pop	{r7, pc}
  4002b6:	bf00      	nop
  4002b8:	004001ad 	.word	0x004001ad

004002bc <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4002bc:	b580      	push	{r7, lr}
  4002be:	b086      	sub	sp, #24
  4002c0:	af00      	add	r7, sp, #0
  4002c2:	60f8      	str	r0, [r7, #12]
  4002c4:	607a      	str	r2, [r7, #4]
  4002c6:	603b      	str	r3, [r7, #0]
  4002c8:	460b      	mov	r3, r1
  4002ca:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4002cc:	7afb      	ldrb	r3, [r7, #11]
  4002ce:	4618      	mov	r0, r3
  4002d0:	4b0d      	ldr	r3, [pc, #52]	; (400308 <pll_config_init+0x4c>)
  4002d2:	4798      	blx	r3
  4002d4:	4602      	mov	r2, r0
  4002d6:	687b      	ldr	r3, [r7, #4]
  4002d8:	fbb2 f3f3 	udiv	r3, r2, r3
  4002dc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4002de:	697b      	ldr	r3, [r7, #20]
  4002e0:	683a      	ldr	r2, [r7, #0]
  4002e2:	fb02 f303 	mul.w	r3, r2, r3
  4002e6:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4002e8:	683b      	ldr	r3, [r7, #0]
  4002ea:	3b01      	subs	r3, #1
  4002ec:	041a      	lsls	r2, r3, #16
  4002ee:	4b07      	ldr	r3, [pc, #28]	; (40030c <pll_config_init+0x50>)
  4002f0:	4013      	ands	r3, r2
  4002f2:	687a      	ldr	r2, [r7, #4]
  4002f4:	b2d2      	uxtb	r2, r2
  4002f6:	4313      	orrs	r3, r2
  4002f8:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4002fc:	68fb      	ldr	r3, [r7, #12]
  4002fe:	601a      	str	r2, [r3, #0]
}
  400300:	3718      	adds	r7, #24
  400302:	46bd      	mov	sp, r7
  400304:	bd80      	pop	{r7, pc}
  400306:	bf00      	nop
  400308:	0040021d 	.word	0x0040021d
  40030c:	07ff0000 	.word	0x07ff0000

00400310 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400310:	b580      	push	{r7, lr}
  400312:	b082      	sub	sp, #8
  400314:	af00      	add	r7, sp, #0
  400316:	6078      	str	r0, [r7, #4]
  400318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40031a:	683b      	ldr	r3, [r7, #0]
  40031c:	2b00      	cmp	r3, #0
  40031e:	d108      	bne.n	400332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400320:	4b08      	ldr	r3, [pc, #32]	; (400344 <pll_enable+0x34>)
  400322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400324:	4a08      	ldr	r2, [pc, #32]	; (400348 <pll_enable+0x38>)
  400326:	687b      	ldr	r3, [r7, #4]
  400328:	681b      	ldr	r3, [r3, #0]
  40032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40032e:	6293      	str	r3, [r2, #40]	; 0x28
  400330:	e005      	b.n	40033e <pll_enable+0x2e>
	} else {
		pmc_disable_pllbck();
  400332:	4b06      	ldr	r3, [pc, #24]	; (40034c <pll_enable+0x3c>)
  400334:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400336:	4a04      	ldr	r2, [pc, #16]	; (400348 <pll_enable+0x38>)
  400338:	687b      	ldr	r3, [r7, #4]
  40033a:	681b      	ldr	r3, [r3, #0]
  40033c:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  40033e:	3708      	adds	r7, #8
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	004007ad 	.word	0x004007ad
  400348:	400e0400 	.word	0x400e0400
  40034c:	004007e1 	.word	0x004007e1

00400350 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400350:	b580      	push	{r7, lr}
  400352:	b082      	sub	sp, #8
  400354:	af00      	add	r7, sp, #0
  400356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	2b00      	cmp	r3, #0
  40035c:	d103      	bne.n	400366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40035e:	4b05      	ldr	r3, [pc, #20]	; (400374 <pll_is_locked+0x24>)
  400360:	4798      	blx	r3
  400362:	4603      	mov	r3, r0
  400364:	e002      	b.n	40036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400366:	4b04      	ldr	r3, [pc, #16]	; (400378 <pll_is_locked+0x28>)
  400368:	4798      	blx	r3
  40036a:	4603      	mov	r3, r0
	}
}
  40036c:	4618      	mov	r0, r3
  40036e:	3708      	adds	r7, #8
  400370:	46bd      	mov	sp, r7
  400372:	bd80      	pop	{r7, pc}
  400374:	004007c5 	.word	0x004007c5
  400378:	004007f9 	.word	0x004007f9

0040037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40037c:	b580      	push	{r7, lr}
  40037e:	b082      	sub	sp, #8
  400380:	af00      	add	r7, sp, #0
  400382:	4603      	mov	r3, r0
  400384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400386:	79fb      	ldrb	r3, [r7, #7]
  400388:	3b03      	subs	r3, #3
  40038a:	2b04      	cmp	r3, #4
  40038c:	d808      	bhi.n	4003a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40038e:	79fb      	ldrb	r3, [r7, #7]
  400390:	4618      	mov	r0, r3
  400392:	4b05      	ldr	r3, [pc, #20]	; (4003a8 <pll_enable_source+0x2c>)
  400394:	4798      	blx	r3
		osc_wait_ready(e_src);
  400396:	79fb      	ldrb	r3, [r7, #7]
  400398:	4618      	mov	r0, r3
  40039a:	4b04      	ldr	r3, [pc, #16]	; (4003ac <pll_enable_source+0x30>)
  40039c:	4798      	blx	r3
		break;
  40039e:	e000      	b.n	4003a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4003a0:	bf00      	nop
	}
}
  4003a2:	3708      	adds	r7, #8
  4003a4:	46bd      	mov	sp, r7
  4003a6:	bd80      	pop	{r7, pc}
  4003a8:	00400129 	.word	0x00400129
  4003ac:	00400291 	.word	0x00400291

004003b0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4003b8:	bf00      	nop
  4003ba:	6878      	ldr	r0, [r7, #4]
  4003bc:	4b04      	ldr	r3, [pc, #16]	; (4003d0 <pll_wait_for_lock+0x20>)
  4003be:	4798      	blx	r3
  4003c0:	4603      	mov	r3, r0
  4003c2:	2b00      	cmp	r3, #0
  4003c4:	d0f9      	beq.n	4003ba <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4003c6:	2300      	movs	r3, #0
}
  4003c8:	4618      	mov	r0, r3
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00400351 	.word	0x00400351

004003d4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4003d4:	b580      	push	{r7, lr}
  4003d6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4003d8:	2006      	movs	r0, #6
  4003da:	4b04      	ldr	r3, [pc, #16]	; (4003ec <sysclk_get_main_hz+0x18>)
  4003dc:	4798      	blx	r3
  4003de:	4602      	mov	r2, r0
  4003e0:	4613      	mov	r3, r2
  4003e2:	009b      	lsls	r3, r3, #2
  4003e4:	4413      	add	r3, r2
  4003e6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4003e8:	4618      	mov	r0, r3
  4003ea:	bd80      	pop	{r7, pc}
  4003ec:	0040021d 	.word	0x0040021d

004003f0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4003f4:	4b02      	ldr	r3, [pc, #8]	; (400400 <sysclk_get_cpu_hz+0x10>)
  4003f6:	4798      	blx	r3
  4003f8:	4603      	mov	r3, r0
  4003fa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	bd80      	pop	{r7, pc}
  400400:	004003d5 	.word	0x004003d5

00400404 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400404:	b590      	push	{r4, r7, lr}
  400406:	b083      	sub	sp, #12
  400408:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40040a:	4811      	ldr	r0, [pc, #68]	; (400450 <sysclk_init+0x4c>)
  40040c:	4b11      	ldr	r3, [pc, #68]	; (400454 <sysclk_init+0x50>)
  40040e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400410:	2006      	movs	r0, #6
  400412:	4b11      	ldr	r3, [pc, #68]	; (400458 <sysclk_init+0x54>)
  400414:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400416:	1d3b      	adds	r3, r7, #4
  400418:	4618      	mov	r0, r3
  40041a:	2106      	movs	r1, #6
  40041c:	2201      	movs	r2, #1
  40041e:	2314      	movs	r3, #20
  400420:	4c0e      	ldr	r4, [pc, #56]	; (40045c <sysclk_init+0x58>)
  400422:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400424:	1d3b      	adds	r3, r7, #4
  400426:	4618      	mov	r0, r3
  400428:	2100      	movs	r1, #0
  40042a:	4b0d      	ldr	r3, [pc, #52]	; (400460 <sysclk_init+0x5c>)
  40042c:	4798      	blx	r3
		pll_wait_for_lock(0);
  40042e:	2000      	movs	r0, #0
  400430:	4b0c      	ldr	r3, [pc, #48]	; (400464 <sysclk_init+0x60>)
  400432:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400434:	2010      	movs	r0, #16
  400436:	4b0c      	ldr	r3, [pc, #48]	; (400468 <sysclk_init+0x64>)
  400438:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40043a:	4b0c      	ldr	r3, [pc, #48]	; (40046c <sysclk_init+0x68>)
  40043c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40043e:	4b0c      	ldr	r3, [pc, #48]	; (400470 <sysclk_init+0x6c>)
  400440:	4798      	blx	r3
  400442:	4603      	mov	r3, r0
  400444:	4618      	mov	r0, r3
  400446:	4b03      	ldr	r3, [pc, #12]	; (400454 <sysclk_init+0x50>)
  400448:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40044a:	370c      	adds	r7, #12
  40044c:	46bd      	mov	sp, r7
  40044e:	bd90      	pop	{r4, r7, pc}
  400450:	07270e00 	.word	0x07270e00
  400454:	00400a81 	.word	0x00400a81
  400458:	0040037d 	.word	0x0040037d
  40045c:	004002bd 	.word	0x004002bd
  400460:	00400311 	.word	0x00400311
  400464:	004003b1 	.word	0x004003b1
  400468:	004005b9 	.word	0x004005b9
  40046c:	004008e5 	.word	0x004008e5
  400470:	004003f1 	.word	0x004003f1

00400474 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400474:	b480      	push	{r7}
  400476:	b083      	sub	sp, #12
  400478:	af00      	add	r7, sp, #0
  40047a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40047c:	687b      	ldr	r3, [r7, #4]
  40047e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400480:	4618      	mov	r0, r3
  400482:	370c      	adds	r7, #12
  400484:	46bd      	mov	sp, r7
  400486:	f85d 7b04 	ldr.w	r7, [sp], #4
  40048a:	4770      	bx	lr

0040048c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40048c:	b480      	push	{r7}
  40048e:	b083      	sub	sp, #12
  400490:	af00      	add	r7, sp, #0
  400492:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400494:	687b      	ldr	r3, [r7, #4]
  400496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400498:	4618      	mov	r0, r3
  40049a:	370c      	adds	r7, #12
  40049c:	46bd      	mov	sp, r7
  40049e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004a2:	4770      	bx	lr

004004a4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4004a4:	b580      	push	{r7, lr}
  4004a6:	b084      	sub	sp, #16
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
  4004ac:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004ae:	6878      	ldr	r0, [r7, #4]
  4004b0:	4b2a      	ldr	r3, [pc, #168]	; (40055c <pio_handler_process+0xb8>)
  4004b2:	4798      	blx	r3
  4004b4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4004b6:	6878      	ldr	r0, [r7, #4]
  4004b8:	4b29      	ldr	r3, [pc, #164]	; (400560 <pio_handler_process+0xbc>)
  4004ba:	4798      	blx	r3
  4004bc:	4602      	mov	r2, r0
  4004be:	68fb      	ldr	r3, [r7, #12]
  4004c0:	4013      	ands	r3, r2
  4004c2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4004c4:	68fb      	ldr	r3, [r7, #12]
  4004c6:	2b00      	cmp	r3, #0
  4004c8:	d038      	beq.n	40053c <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  4004ca:	2300      	movs	r3, #0
  4004cc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4004ce:	e032      	b.n	400536 <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4004d0:	4a24      	ldr	r2, [pc, #144]	; (400564 <pio_handler_process+0xc0>)
  4004d2:	68bb      	ldr	r3, [r7, #8]
  4004d4:	011b      	lsls	r3, r3, #4
  4004d6:	4413      	add	r3, r2
  4004d8:	681a      	ldr	r2, [r3, #0]
  4004da:	683b      	ldr	r3, [r7, #0]
  4004dc:	429a      	cmp	r2, r3
  4004de:	d123      	bne.n	400528 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004e0:	4a20      	ldr	r2, [pc, #128]	; (400564 <pio_handler_process+0xc0>)
  4004e2:	68bb      	ldr	r3, [r7, #8]
  4004e4:	011b      	lsls	r3, r3, #4
  4004e6:	4413      	add	r3, r2
  4004e8:	685a      	ldr	r2, [r3, #4]
  4004ea:	68fb      	ldr	r3, [r7, #12]
  4004ec:	4013      	ands	r3, r2
  4004ee:	2b00      	cmp	r3, #0
  4004f0:	d01a      	beq.n	400528 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4004f2:	4a1c      	ldr	r2, [pc, #112]	; (400564 <pio_handler_process+0xc0>)
  4004f4:	68bb      	ldr	r3, [r7, #8]
  4004f6:	011b      	lsls	r3, r3, #4
  4004f8:	4413      	add	r3, r2
  4004fa:	3308      	adds	r3, #8
  4004fc:	685b      	ldr	r3, [r3, #4]
  4004fe:	4919      	ldr	r1, [pc, #100]	; (400564 <pio_handler_process+0xc0>)
  400500:	68ba      	ldr	r2, [r7, #8]
  400502:	0112      	lsls	r2, r2, #4
  400504:	440a      	add	r2, r1
  400506:	6810      	ldr	r0, [r2, #0]
  400508:	4916      	ldr	r1, [pc, #88]	; (400564 <pio_handler_process+0xc0>)
  40050a:	68ba      	ldr	r2, [r7, #8]
  40050c:	0112      	lsls	r2, r2, #4
  40050e:	440a      	add	r2, r1
  400510:	6852      	ldr	r2, [r2, #4]
  400512:	4611      	mov	r1, r2
  400514:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400516:	4a13      	ldr	r2, [pc, #76]	; (400564 <pio_handler_process+0xc0>)
  400518:	68bb      	ldr	r3, [r7, #8]
  40051a:	011b      	lsls	r3, r3, #4
  40051c:	4413      	add	r3, r2
  40051e:	685b      	ldr	r3, [r3, #4]
  400520:	43db      	mvns	r3, r3
  400522:	68fa      	ldr	r2, [r7, #12]
  400524:	4013      	ands	r3, r2
  400526:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400528:	68bb      	ldr	r3, [r7, #8]
  40052a:	3301      	adds	r3, #1
  40052c:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40052e:	68bb      	ldr	r3, [r7, #8]
  400530:	2b06      	cmp	r3, #6
  400532:	d900      	bls.n	400536 <pio_handler_process+0x92>
				break;
  400534:	e002      	b.n	40053c <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	2b00      	cmp	r3, #0
  40053a:	d1c9      	bne.n	4004d0 <pio_handler_process+0x2c>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40053c:	4b0a      	ldr	r3, [pc, #40]	; (400568 <pio_handler_process+0xc4>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	2b00      	cmp	r3, #0
  400542:	d007      	beq.n	400554 <pio_handler_process+0xb0>
		if (pio_capture_handler) {
  400544:	4b09      	ldr	r3, [pc, #36]	; (40056c <pio_handler_process+0xc8>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	2b00      	cmp	r3, #0
  40054a:	d003      	beq.n	400554 <pio_handler_process+0xb0>
			pio_capture_handler(p_pio);
  40054c:	4b07      	ldr	r3, [pc, #28]	; (40056c <pio_handler_process+0xc8>)
  40054e:	681b      	ldr	r3, [r3, #0]
  400550:	6878      	ldr	r0, [r7, #4]
  400552:	4798      	blx	r3
		}
	}
#endif
}
  400554:	3710      	adds	r7, #16
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	00400475 	.word	0x00400475
  400560:	0040048d 	.word	0x0040048d
  400564:	20000464 	.word	0x20000464
  400568:	200004d8 	.word	0x200004d8
  40056c:	200004d4 	.word	0x200004d4

00400570 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400570:	b580      	push	{r7, lr}
  400572:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400574:	4802      	ldr	r0, [pc, #8]	; (400580 <PIOA_Handler+0x10>)
  400576:	210b      	movs	r1, #11
  400578:	4b02      	ldr	r3, [pc, #8]	; (400584 <PIOA_Handler+0x14>)
  40057a:	4798      	blx	r3
}
  40057c:	bd80      	pop	{r7, pc}
  40057e:	bf00      	nop
  400580:	400e0e00 	.word	0x400e0e00
  400584:	004004a5 	.word	0x004004a5

00400588 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400588:	b580      	push	{r7, lr}
  40058a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40058c:	4802      	ldr	r0, [pc, #8]	; (400598 <PIOB_Handler+0x10>)
  40058e:	210c      	movs	r1, #12
  400590:	4b02      	ldr	r3, [pc, #8]	; (40059c <PIOB_Handler+0x14>)
  400592:	4798      	blx	r3
}
  400594:	bd80      	pop	{r7, pc}
  400596:	bf00      	nop
  400598:	400e1000 	.word	0x400e1000
  40059c:	004004a5 	.word	0x004004a5

004005a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005a0:	b580      	push	{r7, lr}
  4005a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4005a4:	4802      	ldr	r0, [pc, #8]	; (4005b0 <PIOC_Handler+0x10>)
  4005a6:	210d      	movs	r1, #13
  4005a8:	4b02      	ldr	r3, [pc, #8]	; (4005b4 <PIOC_Handler+0x14>)
  4005aa:	4798      	blx	r3
}
  4005ac:	bd80      	pop	{r7, pc}
  4005ae:	bf00      	nop
  4005b0:	400e1200 	.word	0x400e1200
  4005b4:	004004a5 	.word	0x004004a5

004005b8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4005b8:	b480      	push	{r7}
  4005ba:	b085      	sub	sp, #20
  4005bc:	af00      	add	r7, sp, #0
  4005be:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4005c0:	491d      	ldr	r1, [pc, #116]	; (400638 <pmc_switch_mck_to_pllack+0x80>)
  4005c2:	4b1d      	ldr	r3, [pc, #116]	; (400638 <pmc_switch_mck_to_pllack+0x80>)
  4005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4005ca:	687b      	ldr	r3, [r7, #4]
  4005cc:	4313      	orrs	r3, r2
  4005ce:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005d4:	60fb      	str	r3, [r7, #12]
  4005d6:	e007      	b.n	4005e8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005d8:	68fb      	ldr	r3, [r7, #12]
  4005da:	2b00      	cmp	r3, #0
  4005dc:	d101      	bne.n	4005e2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4005de:	2301      	movs	r3, #1
  4005e0:	e023      	b.n	40062a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4005e2:	68fb      	ldr	r3, [r7, #12]
  4005e4:	3b01      	subs	r3, #1
  4005e6:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005e8:	4b13      	ldr	r3, [pc, #76]	; (400638 <pmc_switch_mck_to_pllack+0x80>)
  4005ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4005ec:	f003 0308 	and.w	r3, r3, #8
  4005f0:	2b00      	cmp	r3, #0
  4005f2:	d0f1      	beq.n	4005d8 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005f4:	4a10      	ldr	r2, [pc, #64]	; (400638 <pmc_switch_mck_to_pllack+0x80>)
  4005f6:	4b10      	ldr	r3, [pc, #64]	; (400638 <pmc_switch_mck_to_pllack+0x80>)
  4005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005fa:	f023 0303 	bic.w	r3, r3, #3
  4005fe:	f043 0302 	orr.w	r3, r3, #2
  400602:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400604:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400608:	60fb      	str	r3, [r7, #12]
  40060a:	e007      	b.n	40061c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40060c:	68fb      	ldr	r3, [r7, #12]
  40060e:	2b00      	cmp	r3, #0
  400610:	d101      	bne.n	400616 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400612:	2301      	movs	r3, #1
  400614:	e009      	b.n	40062a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400616:	68fb      	ldr	r3, [r7, #12]
  400618:	3b01      	subs	r3, #1
  40061a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40061c:	4b06      	ldr	r3, [pc, #24]	; (400638 <pmc_switch_mck_to_pllack+0x80>)
  40061e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400620:	f003 0308 	and.w	r3, r3, #8
  400624:	2b00      	cmp	r3, #0
  400626:	d0f1      	beq.n	40060c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400628:	2300      	movs	r3, #0
}
  40062a:	4618      	mov	r0, r3
  40062c:	3714      	adds	r7, #20
  40062e:	46bd      	mov	sp, r7
  400630:	f85d 7b04 	ldr.w	r7, [sp], #4
  400634:	4770      	bx	lr
  400636:	bf00      	nop
  400638:	400e0400 	.word	0x400e0400

0040063c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40063c:	b480      	push	{r7}
  40063e:	b083      	sub	sp, #12
  400640:	af00      	add	r7, sp, #0
  400642:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400644:	687b      	ldr	r3, [r7, #4]
  400646:	2b01      	cmp	r3, #1
  400648:	d107      	bne.n	40065a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40064a:	4a08      	ldr	r2, [pc, #32]	; (40066c <pmc_switch_sclk_to_32kxtal+0x30>)
  40064c:	4b07      	ldr	r3, [pc, #28]	; (40066c <pmc_switch_sclk_to_32kxtal+0x30>)
  40064e:	689b      	ldr	r3, [r3, #8]
  400650:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400658:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40065a:	4b04      	ldr	r3, [pc, #16]	; (40066c <pmc_switch_sclk_to_32kxtal+0x30>)
  40065c:	4a04      	ldr	r2, [pc, #16]	; (400670 <pmc_switch_sclk_to_32kxtal+0x34>)
  40065e:	601a      	str	r2, [r3, #0]
}
  400660:	370c      	adds	r7, #12
  400662:	46bd      	mov	sp, r7
  400664:	f85d 7b04 	ldr.w	r7, [sp], #4
  400668:	4770      	bx	lr
  40066a:	bf00      	nop
  40066c:	400e1410 	.word	0x400e1410
  400670:	a5000008 	.word	0xa5000008

00400674 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400674:	b480      	push	{r7}
  400676:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400678:	4b09      	ldr	r3, [pc, #36]	; (4006a0 <pmc_osc_is_ready_32kxtal+0x2c>)
  40067a:	695b      	ldr	r3, [r3, #20]
  40067c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400680:	2b00      	cmp	r3, #0
  400682:	d007      	beq.n	400694 <pmc_osc_is_ready_32kxtal+0x20>
  400684:	4b07      	ldr	r3, [pc, #28]	; (4006a4 <pmc_osc_is_ready_32kxtal+0x30>)
  400686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400688:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40068c:	2b00      	cmp	r3, #0
  40068e:	d001      	beq.n	400694 <pmc_osc_is_ready_32kxtal+0x20>
  400690:	2301      	movs	r3, #1
  400692:	e000      	b.n	400696 <pmc_osc_is_ready_32kxtal+0x22>
  400694:	2300      	movs	r3, #0
}
  400696:	4618      	mov	r0, r3
  400698:	46bd      	mov	sp, r7
  40069a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40069e:	4770      	bx	lr
  4006a0:	400e1410 	.word	0x400e1410
  4006a4:	400e0400 	.word	0x400e0400

004006a8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4006a8:	b480      	push	{r7}
  4006aa:	b083      	sub	sp, #12
  4006ac:	af00      	add	r7, sp, #0
  4006ae:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4006b0:	4a18      	ldr	r2, [pc, #96]	; (400714 <pmc_switch_mainck_to_fastrc+0x6c>)
  4006b2:	4b18      	ldr	r3, [pc, #96]	; (400714 <pmc_switch_mainck_to_fastrc+0x6c>)
  4006b4:	6a1b      	ldr	r3, [r3, #32]
  4006b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4006ba:	f043 0308 	orr.w	r3, r3, #8
  4006be:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4006c0:	bf00      	nop
  4006c2:	4b14      	ldr	r3, [pc, #80]	; (400714 <pmc_switch_mainck_to_fastrc+0x6c>)
  4006c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4006c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d0f9      	beq.n	4006c2 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4006ce:	4911      	ldr	r1, [pc, #68]	; (400714 <pmc_switch_mainck_to_fastrc+0x6c>)
  4006d0:	4b10      	ldr	r3, [pc, #64]	; (400714 <pmc_switch_mainck_to_fastrc+0x6c>)
  4006d2:	6a1b      	ldr	r3, [r3, #32]
  4006d4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4006d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4006dc:	687a      	ldr	r2, [r7, #4]
  4006de:	4313      	orrs	r3, r2
  4006e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4006e4:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4006e6:	bf00      	nop
  4006e8:	4b0a      	ldr	r3, [pc, #40]	; (400714 <pmc_switch_mainck_to_fastrc+0x6c>)
  4006ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4006ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d0f9      	beq.n	4006e8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4006f4:	4a07      	ldr	r2, [pc, #28]	; (400714 <pmc_switch_mainck_to_fastrc+0x6c>)
  4006f6:	4b07      	ldr	r3, [pc, #28]	; (400714 <pmc_switch_mainck_to_fastrc+0x6c>)
  4006f8:	6a1b      	ldr	r3, [r3, #32]
  4006fa:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4006fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400702:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400706:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400708:	370c      	adds	r7, #12
  40070a:	46bd      	mov	sp, r7
  40070c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400710:	4770      	bx	lr
  400712:	bf00      	nop
  400714:	400e0400 	.word	0x400e0400

00400718 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400718:	b480      	push	{r7}
  40071a:	b083      	sub	sp, #12
  40071c:	af00      	add	r7, sp, #0
  40071e:	6078      	str	r0, [r7, #4]
  400720:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400722:	687b      	ldr	r3, [r7, #4]
  400724:	2b00      	cmp	r3, #0
  400726:	d008      	beq.n	40073a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400728:	4916      	ldr	r1, [pc, #88]	; (400784 <pmc_switch_mainck_to_xtal+0x6c>)
  40072a:	4b16      	ldr	r3, [pc, #88]	; (400784 <pmc_switch_mainck_to_xtal+0x6c>)
  40072c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40072e:	4a16      	ldr	r2, [pc, #88]	; (400788 <pmc_switch_mainck_to_xtal+0x70>)
  400730:	401a      	ands	r2, r3
  400732:	4b16      	ldr	r3, [pc, #88]	; (40078c <pmc_switch_mainck_to_xtal+0x74>)
  400734:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400736:	620b      	str	r3, [r1, #32]
  400738:	e01e      	b.n	400778 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40073a:	4912      	ldr	r1, [pc, #72]	; (400784 <pmc_switch_mainck_to_xtal+0x6c>)
  40073c:	4b11      	ldr	r3, [pc, #68]	; (400784 <pmc_switch_mainck_to_xtal+0x6c>)
  40073e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400740:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400744:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400748:	683a      	ldr	r2, [r7, #0]
  40074a:	0212      	lsls	r2, r2, #8
  40074c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40074e:	4313      	orrs	r3, r2
  400750:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400754:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400758:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40075a:	bf00      	nop
  40075c:	4b09      	ldr	r3, [pc, #36]	; (400784 <pmc_switch_mainck_to_xtal+0x6c>)
  40075e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400760:	f003 0301 	and.w	r3, r3, #1
  400764:	2b00      	cmp	r3, #0
  400766:	d0f9      	beq.n	40075c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400768:	4a06      	ldr	r2, [pc, #24]	; (400784 <pmc_switch_mainck_to_xtal+0x6c>)
  40076a:	4b06      	ldr	r3, [pc, #24]	; (400784 <pmc_switch_mainck_to_xtal+0x6c>)
  40076c:	6a1b      	ldr	r3, [r3, #32]
  40076e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400776:	6213      	str	r3, [r2, #32]
	}
}
  400778:	370c      	adds	r7, #12
  40077a:	46bd      	mov	sp, r7
  40077c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400780:	4770      	bx	lr
  400782:	bf00      	nop
  400784:	400e0400 	.word	0x400e0400
  400788:	fec8fffc 	.word	0xfec8fffc
  40078c:	01370002 	.word	0x01370002

00400790 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400790:	b480      	push	{r7}
  400792:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400794:	4b04      	ldr	r3, [pc, #16]	; (4007a8 <pmc_osc_is_ready_mainck+0x18>)
  400796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40079c:	4618      	mov	r0, r3
  40079e:	46bd      	mov	sp, r7
  4007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007a4:	4770      	bx	lr
  4007a6:	bf00      	nop
  4007a8:	400e0400 	.word	0x400e0400

004007ac <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4007ac:	b480      	push	{r7}
  4007ae:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4007b0:	4b03      	ldr	r3, [pc, #12]	; (4007c0 <pmc_disable_pllack+0x14>)
  4007b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4007b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4007b8:	46bd      	mov	sp, r7
  4007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007be:	4770      	bx	lr
  4007c0:	400e0400 	.word	0x400e0400

004007c4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4007c4:	b480      	push	{r7}
  4007c6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4007c8:	4b04      	ldr	r3, [pc, #16]	; (4007dc <pmc_is_locked_pllack+0x18>)
  4007ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4007cc:	f003 0302 	and.w	r3, r3, #2
}
  4007d0:	4618      	mov	r0, r3
  4007d2:	46bd      	mov	sp, r7
  4007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007d8:	4770      	bx	lr
  4007da:	bf00      	nop
  4007dc:	400e0400 	.word	0x400e0400

004007e0 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4007e0:	b480      	push	{r7}
  4007e2:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4007e4:	4b03      	ldr	r3, [pc, #12]	; (4007f4 <pmc_disable_pllbck+0x14>)
  4007e6:	2200      	movs	r2, #0
  4007e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4007ea:	46bd      	mov	sp, r7
  4007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007f0:	4770      	bx	lr
  4007f2:	bf00      	nop
  4007f4:	400e0400 	.word	0x400e0400

004007f8 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4007f8:	b480      	push	{r7}
  4007fa:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4007fc:	4b04      	ldr	r3, [pc, #16]	; (400810 <pmc_is_locked_pllbck+0x18>)
  4007fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400800:	f003 0304 	and.w	r3, r3, #4
}
  400804:	4618      	mov	r0, r3
  400806:	46bd      	mov	sp, r7
  400808:	f85d 7b04 	ldr.w	r7, [sp], #4
  40080c:	4770      	bx	lr
  40080e:	bf00      	nop
  400810:	400e0400 	.word	0x400e0400

00400814 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400814:	b580      	push	{r7, lr}
  400816:	b084      	sub	sp, #16
  400818:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40081a:	4b27      	ldr	r3, [pc, #156]	; (4008b8 <Reset_Handler+0xa4>)
  40081c:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40081e:	4b27      	ldr	r3, [pc, #156]	; (4008bc <Reset_Handler+0xa8>)
  400820:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  400822:	68fa      	ldr	r2, [r7, #12]
  400824:	68bb      	ldr	r3, [r7, #8]
  400826:	429a      	cmp	r2, r3
  400828:	d90d      	bls.n	400846 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40082a:	e007      	b.n	40083c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  40082c:	68bb      	ldr	r3, [r7, #8]
  40082e:	1d1a      	adds	r2, r3, #4
  400830:	60ba      	str	r2, [r7, #8]
  400832:	68fa      	ldr	r2, [r7, #12]
  400834:	1d11      	adds	r1, r2, #4
  400836:	60f9      	str	r1, [r7, #12]
  400838:	6812      	ldr	r2, [r2, #0]
  40083a:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40083c:	68bb      	ldr	r3, [r7, #8]
  40083e:	4a20      	ldr	r2, [pc, #128]	; (4008c0 <Reset_Handler+0xac>)
  400840:	4293      	cmp	r3, r2
  400842:	d3f3      	bcc.n	40082c <Reset_Handler+0x18>
  400844:	e020      	b.n	400888 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400846:	68fa      	ldr	r2, [r7, #12]
  400848:	68bb      	ldr	r3, [r7, #8]
  40084a:	429a      	cmp	r2, r3
  40084c:	d21c      	bcs.n	400888 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40084e:	4a1c      	ldr	r2, [pc, #112]	; (4008c0 <Reset_Handler+0xac>)
  400850:	4b1a      	ldr	r3, [pc, #104]	; (4008bc <Reset_Handler+0xa8>)
  400852:	1ad3      	subs	r3, r2, r3
  400854:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400856:	68fa      	ldr	r2, [r7, #12]
  400858:	687b      	ldr	r3, [r7, #4]
  40085a:	4413      	add	r3, r2
  40085c:	3b04      	subs	r3, #4
  40085e:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  400860:	68ba      	ldr	r2, [r7, #8]
  400862:	687b      	ldr	r3, [r7, #4]
  400864:	4413      	add	r3, r2
  400866:	3b04      	subs	r3, #4
  400868:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40086a:	e00a      	b.n	400882 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40086c:	68bb      	ldr	r3, [r7, #8]
  40086e:	1f1a      	subs	r2, r3, #4
  400870:	60ba      	str	r2, [r7, #8]
  400872:	68fa      	ldr	r2, [r7, #12]
  400874:	1f11      	subs	r1, r2, #4
  400876:	60f9      	str	r1, [r7, #12]
  400878:	6812      	ldr	r2, [r2, #0]
  40087a:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40087c:	687b      	ldr	r3, [r7, #4]
  40087e:	3b04      	subs	r3, #4
  400880:	607b      	str	r3, [r7, #4]
  400882:	687b      	ldr	r3, [r7, #4]
  400884:	2b00      	cmp	r3, #0
  400886:	d1f1      	bne.n	40086c <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400888:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40088a:	4b0e      	ldr	r3, [pc, #56]	; (4008c4 <Reset_Handler+0xb0>)
  40088c:	60bb      	str	r3, [r7, #8]
  40088e:	e004      	b.n	40089a <Reset_Handler+0x86>
		*pDest++ = 0;
  400890:	68bb      	ldr	r3, [r7, #8]
  400892:	1d1a      	adds	r2, r3, #4
  400894:	60ba      	str	r2, [r7, #8]
  400896:	2200      	movs	r2, #0
  400898:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40089a:	68bb      	ldr	r3, [r7, #8]
  40089c:	4a0a      	ldr	r2, [pc, #40]	; (4008c8 <Reset_Handler+0xb4>)
  40089e:	4293      	cmp	r3, r2
  4008a0:	d3f6      	bcc.n	400890 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4008a2:	4b0a      	ldr	r3, [pc, #40]	; (4008cc <Reset_Handler+0xb8>)
  4008a4:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4008a6:	4a0a      	ldr	r2, [pc, #40]	; (4008d0 <Reset_Handler+0xbc>)
  4008a8:	68fb      	ldr	r3, [r7, #12]
  4008aa:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4008ac:	4b09      	ldr	r3, [pc, #36]	; (4008d4 <Reset_Handler+0xc0>)
  4008ae:	4798      	blx	r3

	/* Branch to main function */
	main();
  4008b0:	4b09      	ldr	r3, [pc, #36]	; (4008d8 <Reset_Handler+0xc4>)
  4008b2:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4008b4:	e7fe      	b.n	4008b4 <Reset_Handler+0xa0>
  4008b6:	bf00      	nop
  4008b8:	0040178c 	.word	0x0040178c
  4008bc:	20000000 	.word	0x20000000
  4008c0:	20000448 	.word	0x20000448
  4008c4:	20000448 	.word	0x20000448
  4008c8:	200004dc 	.word	0x200004dc
  4008cc:	00400000 	.word	0x00400000
  4008d0:	e000ed00 	.word	0xe000ed00
  4008d4:	00401619 	.word	0x00401619
  4008d8:	00400d09 	.word	0x00400d09

004008dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4008dc:	b480      	push	{r7}
  4008de:	af00      	add	r7, sp, #0
	while (1) {
	}
  4008e0:	e7fe      	b.n	4008e0 <Dummy_Handler+0x4>
  4008e2:	bf00      	nop

004008e4 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4008e4:	b480      	push	{r7}
  4008e6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4008e8:	4b5d      	ldr	r3, [pc, #372]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  4008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008ec:	f003 0303 	and.w	r3, r3, #3
  4008f0:	2b03      	cmp	r3, #3
  4008f2:	f200 8096 	bhi.w	400a22 <SystemCoreClockUpdate+0x13e>
  4008f6:	a201      	add	r2, pc, #4	; (adr r2, 4008fc <SystemCoreClockUpdate+0x18>)
  4008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008fc:	0040090d 	.word	0x0040090d
  400900:	0040092d 	.word	0x0040092d
  400904:	00400977 	.word	0x00400977
  400908:	00400977 	.word	0x00400977
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40090c:	4b55      	ldr	r3, [pc, #340]	; (400a64 <SystemCoreClockUpdate+0x180>)
  40090e:	695b      	ldr	r3, [r3, #20]
  400910:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400914:	2b00      	cmp	r3, #0
  400916:	d004      	beq.n	400922 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400918:	4b53      	ldr	r3, [pc, #332]	; (400a68 <SystemCoreClockUpdate+0x184>)
  40091a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40091e:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  400920:	e080      	b.n	400a24 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400922:	4b51      	ldr	r3, [pc, #324]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400924:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400928:	601a      	str	r2, [r3, #0]
			}
		break;
  40092a:	e07b      	b.n	400a24 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40092c:	4b4c      	ldr	r3, [pc, #304]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  40092e:	6a1b      	ldr	r3, [r3, #32]
  400930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400934:	2b00      	cmp	r3, #0
  400936:	d003      	beq.n	400940 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400938:	4b4b      	ldr	r3, [pc, #300]	; (400a68 <SystemCoreClockUpdate+0x184>)
  40093a:	4a4c      	ldr	r2, [pc, #304]	; (400a6c <SystemCoreClockUpdate+0x188>)
  40093c:	601a      	str	r2, [r3, #0]
  40093e:	e019      	b.n	400974 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400940:	4b49      	ldr	r3, [pc, #292]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400942:	4a4b      	ldr	r2, [pc, #300]	; (400a70 <SystemCoreClockUpdate+0x18c>)
  400944:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400946:	4b46      	ldr	r3, [pc, #280]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  400948:	6a1b      	ldr	r3, [r3, #32]
  40094a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40094e:	2b10      	cmp	r3, #16
  400950:	d008      	beq.n	400964 <SystemCoreClockUpdate+0x80>
  400952:	2b20      	cmp	r3, #32
  400954:	d00a      	beq.n	40096c <SystemCoreClockUpdate+0x88>
  400956:	2b00      	cmp	r3, #0
  400958:	d000      	beq.n	40095c <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40095a:	e00b      	b.n	400974 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40095c:	4b42      	ldr	r3, [pc, #264]	; (400a68 <SystemCoreClockUpdate+0x184>)
  40095e:	4a44      	ldr	r2, [pc, #272]	; (400a70 <SystemCoreClockUpdate+0x18c>)
  400960:	601a      	str	r2, [r3, #0]
			break;
  400962:	e007      	b.n	400974 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400964:	4b40      	ldr	r3, [pc, #256]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400966:	4a43      	ldr	r2, [pc, #268]	; (400a74 <SystemCoreClockUpdate+0x190>)
  400968:	601a      	str	r2, [r3, #0]
			break;
  40096a:	e003      	b.n	400974 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40096c:	4b3e      	ldr	r3, [pc, #248]	; (400a68 <SystemCoreClockUpdate+0x184>)
  40096e:	4a3f      	ldr	r2, [pc, #252]	; (400a6c <SystemCoreClockUpdate+0x188>)
  400970:	601a      	str	r2, [r3, #0]
			break;
  400972:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  400974:	e056      	b.n	400a24 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400976:	4b3a      	ldr	r3, [pc, #232]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  400978:	6a1b      	ldr	r3, [r3, #32]
  40097a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40097e:	2b00      	cmp	r3, #0
  400980:	d003      	beq.n	40098a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400982:	4b39      	ldr	r3, [pc, #228]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400984:	4a39      	ldr	r2, [pc, #228]	; (400a6c <SystemCoreClockUpdate+0x188>)
  400986:	601a      	str	r2, [r3, #0]
  400988:	e019      	b.n	4009be <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40098a:	4b37      	ldr	r3, [pc, #220]	; (400a68 <SystemCoreClockUpdate+0x184>)
  40098c:	4a38      	ldr	r2, [pc, #224]	; (400a70 <SystemCoreClockUpdate+0x18c>)
  40098e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400990:	4b33      	ldr	r3, [pc, #204]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  400992:	6a1b      	ldr	r3, [r3, #32]
  400994:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400998:	2b10      	cmp	r3, #16
  40099a:	d008      	beq.n	4009ae <SystemCoreClockUpdate+0xca>
  40099c:	2b20      	cmp	r3, #32
  40099e:	d00a      	beq.n	4009b6 <SystemCoreClockUpdate+0xd2>
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d000      	beq.n	4009a6 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4009a4:	e00b      	b.n	4009be <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009a6:	4b30      	ldr	r3, [pc, #192]	; (400a68 <SystemCoreClockUpdate+0x184>)
  4009a8:	4a31      	ldr	r2, [pc, #196]	; (400a70 <SystemCoreClockUpdate+0x18c>)
  4009aa:	601a      	str	r2, [r3, #0]
					break;
  4009ac:	e007      	b.n	4009be <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009ae:	4b2e      	ldr	r3, [pc, #184]	; (400a68 <SystemCoreClockUpdate+0x184>)
  4009b0:	4a30      	ldr	r2, [pc, #192]	; (400a74 <SystemCoreClockUpdate+0x190>)
  4009b2:	601a      	str	r2, [r3, #0]
					break;
  4009b4:	e003      	b.n	4009be <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4009b6:	4b2c      	ldr	r3, [pc, #176]	; (400a68 <SystemCoreClockUpdate+0x184>)
  4009b8:	4a2c      	ldr	r2, [pc, #176]	; (400a6c <SystemCoreClockUpdate+0x188>)
  4009ba:	601a      	str	r2, [r3, #0]
					break;
  4009bc:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4009be:	4b28      	ldr	r3, [pc, #160]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  4009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009c2:	f003 0303 	and.w	r3, r3, #3
  4009c6:	2b02      	cmp	r3, #2
  4009c8:	d115      	bne.n	4009f6 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4009ca:	4b25      	ldr	r3, [pc, #148]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  4009cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4009ce:	4b2a      	ldr	r3, [pc, #168]	; (400a78 <SystemCoreClockUpdate+0x194>)
  4009d0:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4009d2:	0c1b      	lsrs	r3, r3, #16
  4009d4:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4009d6:	4a24      	ldr	r2, [pc, #144]	; (400a68 <SystemCoreClockUpdate+0x184>)
  4009d8:	6812      	ldr	r2, [r2, #0]
  4009da:	fb02 f303 	mul.w	r3, r2, r3
  4009de:	4a22      	ldr	r2, [pc, #136]	; (400a68 <SystemCoreClockUpdate+0x184>)
  4009e0:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4009e2:	4b1f      	ldr	r3, [pc, #124]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  4009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4009e6:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4009e8:	4a1f      	ldr	r2, [pc, #124]	; (400a68 <SystemCoreClockUpdate+0x184>)
  4009ea:	6812      	ldr	r2, [r2, #0]
  4009ec:	fbb2 f3f3 	udiv	r3, r2, r3
  4009f0:	4a1d      	ldr	r2, [pc, #116]	; (400a68 <SystemCoreClockUpdate+0x184>)
  4009f2:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4009f4:	e016      	b.n	400a24 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009f6:	4b1a      	ldr	r3, [pc, #104]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  4009f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4009fa:	4b1f      	ldr	r3, [pc, #124]	; (400a78 <SystemCoreClockUpdate+0x194>)
  4009fc:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4009fe:	0c1b      	lsrs	r3, r3, #16
  400a00:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400a02:	4a19      	ldr	r2, [pc, #100]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400a04:	6812      	ldr	r2, [r2, #0]
  400a06:	fb02 f303 	mul.w	r3, r2, r3
  400a0a:	4a17      	ldr	r2, [pc, #92]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400a0c:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400a0e:	4b14      	ldr	r3, [pc, #80]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  400a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  400a12:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400a14:	4a14      	ldr	r2, [pc, #80]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400a16:	6812      	ldr	r2, [r2, #0]
  400a18:	fbb2 f3f3 	udiv	r3, r2, r3
  400a1c:	4a12      	ldr	r2, [pc, #72]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400a1e:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  400a20:	e000      	b.n	400a24 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  400a22:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400a24:	4b0e      	ldr	r3, [pc, #56]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  400a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a2c:	2b70      	cmp	r3, #112	; 0x70
  400a2e:	d108      	bne.n	400a42 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  400a30:	4b0d      	ldr	r3, [pc, #52]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400a32:	681b      	ldr	r3, [r3, #0]
  400a34:	4a11      	ldr	r2, [pc, #68]	; (400a7c <SystemCoreClockUpdate+0x198>)
  400a36:	fba2 2303 	umull	r2, r3, r2, r3
  400a3a:	085b      	lsrs	r3, r3, #1
  400a3c:	4a0a      	ldr	r2, [pc, #40]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400a3e:	6013      	str	r3, [r2, #0]
  400a40:	e009      	b.n	400a56 <SystemCoreClockUpdate+0x172>
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a42:	4b07      	ldr	r3, [pc, #28]	; (400a60 <SystemCoreClockUpdate+0x17c>)
  400a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a4a:	091a      	lsrs	r2, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a4c:	4b06      	ldr	r3, [pc, #24]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400a4e:	681b      	ldr	r3, [r3, #0]
  400a50:	40d3      	lsrs	r3, r2
  400a52:	4a05      	ldr	r2, [pc, #20]	; (400a68 <SystemCoreClockUpdate+0x184>)
  400a54:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  400a56:	46bd      	mov	sp, r7
  400a58:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a5c:	4770      	bx	lr
  400a5e:	bf00      	nop
  400a60:	400e0400 	.word	0x400e0400
  400a64:	400e1410 	.word	0x400e1410
  400a68:	2000001c 	.word	0x2000001c
  400a6c:	00b71b00 	.word	0x00b71b00
  400a70:	003d0900 	.word	0x003d0900
  400a74:	007a1200 	.word	0x007a1200
  400a78:	07ff0000 	.word	0x07ff0000
  400a7c:	aaaaaaab 	.word	0xaaaaaaab

00400a80 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  400a80:	b480      	push	{r7}
  400a82:	b083      	sub	sp, #12
  400a84:	af00      	add	r7, sp, #0
  400a86:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400a88:	687b      	ldr	r3, [r7, #4]
  400a8a:	4a22      	ldr	r2, [pc, #136]	; (400b14 <system_init_flash+0x94>)
  400a8c:	4293      	cmp	r3, r2
  400a8e:	d808      	bhi.n	400aa2 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a90:	4b21      	ldr	r3, [pc, #132]	; (400b18 <system_init_flash+0x98>)
  400a92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a96:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a98:	4b20      	ldr	r3, [pc, #128]	; (400b1c <system_init_flash+0x9c>)
  400a9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a9e:	601a      	str	r2, [r3, #0]
  400aa0:	e033      	b.n	400b0a <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400aa2:	687b      	ldr	r3, [r7, #4]
  400aa4:	4a1e      	ldr	r2, [pc, #120]	; (400b20 <system_init_flash+0xa0>)
  400aa6:	4293      	cmp	r3, r2
  400aa8:	d806      	bhi.n	400ab8 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400aaa:	4b1b      	ldr	r3, [pc, #108]	; (400b18 <system_init_flash+0x98>)
  400aac:	4a1d      	ldr	r2, [pc, #116]	; (400b24 <system_init_flash+0xa4>)
  400aae:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ab0:	4b1a      	ldr	r3, [pc, #104]	; (400b1c <system_init_flash+0x9c>)
  400ab2:	4a1c      	ldr	r2, [pc, #112]	; (400b24 <system_init_flash+0xa4>)
  400ab4:	601a      	str	r2, [r3, #0]
  400ab6:	e028      	b.n	400b0a <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400ab8:	687b      	ldr	r3, [r7, #4]
  400aba:	4a1b      	ldr	r2, [pc, #108]	; (400b28 <system_init_flash+0xa8>)
  400abc:	4293      	cmp	r3, r2
  400abe:	d806      	bhi.n	400ace <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ac0:	4b15      	ldr	r3, [pc, #84]	; (400b18 <system_init_flash+0x98>)
  400ac2:	4a1a      	ldr	r2, [pc, #104]	; (400b2c <system_init_flash+0xac>)
  400ac4:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ac6:	4b15      	ldr	r3, [pc, #84]	; (400b1c <system_init_flash+0x9c>)
  400ac8:	4a18      	ldr	r2, [pc, #96]	; (400b2c <system_init_flash+0xac>)
  400aca:	601a      	str	r2, [r3, #0]
  400acc:	e01d      	b.n	400b0a <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400ace:	687b      	ldr	r3, [r7, #4]
  400ad0:	4a17      	ldr	r2, [pc, #92]	; (400b30 <system_init_flash+0xb0>)
  400ad2:	4293      	cmp	r3, r2
  400ad4:	d806      	bhi.n	400ae4 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ad6:	4b10      	ldr	r3, [pc, #64]	; (400b18 <system_init_flash+0x98>)
  400ad8:	4a16      	ldr	r2, [pc, #88]	; (400b34 <system_init_flash+0xb4>)
  400ada:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400adc:	4b0f      	ldr	r3, [pc, #60]	; (400b1c <system_init_flash+0x9c>)
  400ade:	4a15      	ldr	r2, [pc, #84]	; (400b34 <system_init_flash+0xb4>)
  400ae0:	601a      	str	r2, [r3, #0]
  400ae2:	e012      	b.n	400b0a <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400ae4:	687b      	ldr	r3, [r7, #4]
  400ae6:	4a14      	ldr	r2, [pc, #80]	; (400b38 <system_init_flash+0xb8>)
  400ae8:	4293      	cmp	r3, r2
  400aea:	d808      	bhi.n	400afe <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400aec:	4b0a      	ldr	r3, [pc, #40]	; (400b18 <system_init_flash+0x98>)
  400aee:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400af2:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400af4:	4b09      	ldr	r3, [pc, #36]	; (400b1c <system_init_flash+0x9c>)
  400af6:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400afa:	601a      	str	r2, [r3, #0]
  400afc:	e005      	b.n	400b0a <system_init_flash+0x8a>
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400afe:	4b06      	ldr	r3, [pc, #24]	; (400b18 <system_init_flash+0x98>)
  400b00:	4a0e      	ldr	r2, [pc, #56]	; (400b3c <system_init_flash+0xbc>)
  400b02:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b04:	4b05      	ldr	r3, [pc, #20]	; (400b1c <system_init_flash+0x9c>)
  400b06:	4a0d      	ldr	r2, [pc, #52]	; (400b3c <system_init_flash+0xbc>)
  400b08:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  400b0a:	370c      	adds	r7, #12
  400b0c:	46bd      	mov	sp, r7
  400b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b12:	4770      	bx	lr
  400b14:	01312cff 	.word	0x01312cff
  400b18:	400e0a00 	.word	0x400e0a00
  400b1c:	400e0c00 	.word	0x400e0c00
  400b20:	026259ff 	.word	0x026259ff
  400b24:	04000100 	.word	0x04000100
  400b28:	039386ff 	.word	0x039386ff
  400b2c:	04000200 	.word	0x04000200
  400b30:	04c4b3ff 	.word	0x04c4b3ff
  400b34:	04000300 	.word	0x04000300
  400b38:	05f5e0ff 	.word	0x05f5e0ff
  400b3c:	04000500 	.word	0x04000500

00400b40 <_pio_set_output>:

#include "Driver/pio_maua.h"

void _pio_set_output( Pio *p_pio, const uint32_t ul_mask, const uint32_t ul_default_level, const uint32_t ul_pull_up_enable){
  400b40:	b580      	push	{r7, lr}
  400b42:	b084      	sub	sp, #16
  400b44:	af00      	add	r7, sp, #0
  400b46:	60f8      	str	r0, [r7, #12]
  400b48:	60b9      	str	r1, [r7, #8]
  400b4a:	607a      	str	r2, [r7, #4]
  400b4c:	603b      	str	r3, [r7, #0]
	//31.6.1 PIO Enable Register
	// 1: Enables the PIO to control the corresponding pin (disables peripheral control of the pin).
	p_pio->PIO_PER |= ul_mask;
  400b4e:	68fb      	ldr	r3, [r7, #12]
  400b50:	681a      	ldr	r2, [r3, #0]
  400b52:	68bb      	ldr	r3, [r7, #8]
  400b54:	431a      	orrs	r2, r3
  400b56:	68fb      	ldr	r3, [r7, #12]
  400b58:	601a      	str	r2, [r3, #0]
	
	// 31.6.46 PIO Write Protection Mode Register
	// 0: Disables the write protection if WPKEY corresponds to 0x50494F (PIO in ASCII).
	p_pio->PIO_WPMR = 0;
  400b5a:	68fb      	ldr	r3, [r7, #12]
  400b5c:	2200      	movs	r2, #0
  400b5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	
	
	if (ul_pull_up_enable == 1)
  400b62:	683b      	ldr	r3, [r7, #0]
  400b64:	2b01      	cmp	r3, #1
  400b66:	d104      	bne.n	400b72 <_pio_set_output+0x32>
	{
		_pio_pull_up(p_pio,ul_mask, ul_pull_up_enable);
  400b68:	68f8      	ldr	r0, [r7, #12]
  400b6a:	68b9      	ldr	r1, [r7, #8]
  400b6c:	683a      	ldr	r2, [r7, #0]
  400b6e:	4b0b      	ldr	r3, [pc, #44]	; (400b9c <_pio_set_output+0x5c>)
  400b70:	4798      	blx	r3
	}
	
	if (ul_default_level == 1)
  400b72:	687b      	ldr	r3, [r7, #4]
  400b74:	2b01      	cmp	r3, #1
  400b76:	d104      	bne.n	400b82 <_pio_set_output+0x42>
	{
	_pio_set(p_pio, ul_mask);
  400b78:	68f8      	ldr	r0, [r7, #12]
  400b7a:	68b9      	ldr	r1, [r7, #8]
  400b7c:	4b08      	ldr	r3, [pc, #32]	; (400ba0 <_pio_set_output+0x60>)
  400b7e:	4798      	blx	r3
  400b80:	e003      	b.n	400b8a <_pio_set_output+0x4a>
	}
		else
		{
			_pio_clear(p_pio, ul_mask);
  400b82:	68f8      	ldr	r0, [r7, #12]
  400b84:	68b9      	ldr	r1, [r7, #8]
  400b86:	4b07      	ldr	r3, [pc, #28]	; (400ba4 <_pio_set_output+0x64>)
  400b88:	4798      	blx	r3
		}
		
		// 31.6.4 PIO Output Enable Register
		// 1: Enables the output on the I/O line.
		p_pio->PIO_OER |= ul_mask;
  400b8a:	68fb      	ldr	r3, [r7, #12]
  400b8c:	691a      	ldr	r2, [r3, #16]
  400b8e:	68bb      	ldr	r3, [r7, #8]
  400b90:	431a      	orrs	r2, r3
  400b92:	68fb      	ldr	r3, [r7, #12]
  400b94:	611a      	str	r2, [r3, #16]

}
  400b96:	3710      	adds	r7, #16
  400b98:	46bd      	mov	sp, r7
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	00400ba9 	.word	0x00400ba9
  400ba0:	00400bcd 	.word	0x00400bcd
  400ba4:	00400be9 	.word	0x00400be9

00400ba8 <_pio_pull_up>:
	// 31.6.4 PIO Output Enable Register
	// 1: Enables the output on the I/O line.
	p_pio->PIO_OER |= ul_mask;	
}

void _pio_pull_up(	Pio *p_pio, const uint32_t ul_mask, const uint32_t ul_pull_up_enable) {
  400ba8:	b480      	push	{r7}
  400baa:	b085      	sub	sp, #20
  400bac:	af00      	add	r7, sp, #0
  400bae:	60f8      	str	r0, [r7, #12]
  400bb0:	60b9      	str	r1, [r7, #8]
  400bb2:	607a      	str	r2, [r7, #4]
	
	if (ul_pull_up_enable == 1)
  400bb4:	687b      	ldr	r3, [r7, #4]
  400bb6:	2b01      	cmp	r3, #1
  400bb8:	d102      	bne.n	400bc0 <_pio_pull_up+0x18>
	{
		p_pio->PIO_PUER = ul_mask;
  400bba:	68fb      	ldr	r3, [r7, #12]
  400bbc:	68ba      	ldr	r2, [r7, #8]
  400bbe:	665a      	str	r2, [r3, #100]	; 0x64
	}
}
  400bc0:	3714      	adds	r7, #20
  400bc2:	46bd      	mov	sp, r7
  400bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bc8:	4770      	bx	lr
  400bca:	bf00      	nop

00400bcc <_pio_set>:
	if (ul_pull_down_enable == 1)
	{
		p_pio->PIO_PPDER = ul_mask;
	}
}
void _pio_set( Pio *p_pio, const uint32_t ul_mask) {
  400bcc:	b480      	push	{r7}
  400bce:	b083      	sub	sp, #12
  400bd0:	af00      	add	r7, sp, #0
  400bd2:	6078      	str	r0, [r7, #4]
  400bd4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  400bd6:	687b      	ldr	r3, [r7, #4]
  400bd8:	683a      	ldr	r2, [r7, #0]
  400bda:	631a      	str	r2, [r3, #48]	; 0x30
}
  400bdc:	370c      	adds	r7, #12
  400bde:	46bd      	mov	sp, r7
  400be0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop

00400be8 <_pio_clear>:
void _pio_clear( Pio *p_pio, const uint32_t ul_mask) {
  400be8:	b480      	push	{r7}
  400bea:	b083      	sub	sp, #12
  400bec:	af00      	add	r7, sp, #0
  400bee:	6078      	str	r0, [r7, #4]
  400bf0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  400bf2:	687b      	ldr	r3, [r7, #4]
  400bf4:	683a      	ldr	r2, [r7, #0]
  400bf6:	635a      	str	r2, [r3, #52]	; 0x34
}
  400bf8:	370c      	adds	r7, #12
  400bfa:	46bd      	mov	sp, r7
  400bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c00:	4770      	bx	lr
  400c02:	bf00      	nop

00400c04 <_pio_get_output_data_status>:

uint32_t _pio_get_output_data_status(const Pio *p_pio, const uint32_t ul_mask) {
  400c04:	b480      	push	{r7}
  400c06:	b083      	sub	sp, #12
  400c08:	af00      	add	r7, sp, #0
  400c0a:	6078      	str	r0, [r7, #4]
  400c0c:	6039      	str	r1, [r7, #0]
	return (p_pio->PIO_PDSR >> ul_mask) & 1;
  400c0e:	687b      	ldr	r3, [r7, #4]
  400c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  400c12:	683b      	ldr	r3, [r7, #0]
  400c14:	fa22 f303 	lsr.w	r3, r2, r3
  400c18:	f003 0301 	and.w	r3, r3, #1
}
  400c1c:	4618      	mov	r0, r3
  400c1e:	370c      	adds	r7, #12
  400c20:	46bd      	mov	sp, r7
  400c22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c26:	4770      	bx	lr

00400c28 <_pmc_enable_clock_periferico>:
/**
 * inclui o head do pmc
 */
#include "pmc_maua.h"

uint32_t _pmc_enable_clock_periferico(uint32_t ID){
  400c28:	b480      	push	{r7}
  400c2a:	b083      	sub	sp, #12
  400c2c:	af00      	add	r7, sp, #0
  400c2e:	6078      	str	r0, [r7, #4]
     * os clocks dos perifericos, é necessário testarmos
     * antes para saber em qual deve ser salvo.
     *
     * O ID máximo para o PMC_PCER0 é 32
     */
    if(ID< 32){
  400c30:	687b      	ldr	r3, [r7, #4]
  400c32:	2b1f      	cmp	r3, #31
  400c34:	d806      	bhi.n	400c44 <_pmc_enable_clock_periferico+0x1c>
        PMC->PMC_PCER0 = (1 << ID);
  400c36:	4a0a      	ldr	r2, [pc, #40]	; (400c60 <_pmc_enable_clock_periferico+0x38>)
  400c38:	687b      	ldr	r3, [r7, #4]
  400c3a:	2101      	movs	r1, #1
  400c3c:	fa01 f303 	lsl.w	r3, r1, r3
  400c40:	6113      	str	r3, [r2, #16]
  400c42:	e006      	b.n	400c52 <_pmc_enable_clock_periferico+0x2a>
    }
    else{
        PMC->PMC_PCER1 = (1 << ID);
  400c44:	4a06      	ldr	r2, [pc, #24]	; (400c60 <_pmc_enable_clock_periferico+0x38>)
  400c46:	687b      	ldr	r3, [r7, #4]
  400c48:	2101      	movs	r1, #1
  400c4a:	fa01 f303 	lsl.w	r3, r1, r3
  400c4e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }

    /**
     * @brief qual seria a situação que retornariamos 1 ?
     */
    return(0);
  400c52:	2300      	movs	r3, #0
}
  400c54:	4618      	mov	r0, r3
  400c56:	370c      	adds	r7, #12
  400c58:	46bd      	mov	sp, r7
  400c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c5e:	4770      	bx	lr
  400c60:	400e0400 	.word	0x400e0400

00400c64 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400c64:	b480      	push	{r7}
  400c66:	b083      	sub	sp, #12
  400c68:	af00      	add	r7, sp, #0
  400c6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c6c:	687b      	ldr	r3, [r7, #4]
  400c6e:	2b07      	cmp	r3, #7
  400c70:	d825      	bhi.n	400cbe <osc_get_rate+0x5a>
  400c72:	a201      	add	r2, pc, #4	; (adr r2, 400c78 <osc_get_rate+0x14>)
  400c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c78:	00400c99 	.word	0x00400c99
  400c7c:	00400c9f 	.word	0x00400c9f
  400c80:	00400ca5 	.word	0x00400ca5
  400c84:	00400cab 	.word	0x00400cab
  400c88:	00400caf 	.word	0x00400caf
  400c8c:	00400cb3 	.word	0x00400cb3
  400c90:	00400cb7 	.word	0x00400cb7
  400c94:	00400cbb 	.word	0x00400cbb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400c98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400c9c:	e010      	b.n	400cc0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ca2:	e00d      	b.n	400cc0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ca8:	e00a      	b.n	400cc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400caa:	4b08      	ldr	r3, [pc, #32]	; (400ccc <osc_get_rate+0x68>)
  400cac:	e008      	b.n	400cc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400cae:	4b08      	ldr	r3, [pc, #32]	; (400cd0 <osc_get_rate+0x6c>)
  400cb0:	e006      	b.n	400cc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400cb2:	4b08      	ldr	r3, [pc, #32]	; (400cd4 <osc_get_rate+0x70>)
  400cb4:	e004      	b.n	400cc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400cb6:	4b07      	ldr	r3, [pc, #28]	; (400cd4 <osc_get_rate+0x70>)
  400cb8:	e002      	b.n	400cc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400cba:	4b06      	ldr	r3, [pc, #24]	; (400cd4 <osc_get_rate+0x70>)
  400cbc:	e000      	b.n	400cc0 <osc_get_rate+0x5c>
	}

	return 0;
  400cbe:	2300      	movs	r3, #0
}
  400cc0:	4618      	mov	r0, r3
  400cc2:	370c      	adds	r7, #12
  400cc4:	46bd      	mov	sp, r7
  400cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cca:	4770      	bx	lr
  400ccc:	003d0900 	.word	0x003d0900
  400cd0:	007a1200 	.word	0x007a1200
  400cd4:	00b71b00 	.word	0x00b71b00

00400cd8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400cd8:	b580      	push	{r7, lr}
  400cda:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400cdc:	2006      	movs	r0, #6
  400cde:	4b04      	ldr	r3, [pc, #16]	; (400cf0 <sysclk_get_main_hz+0x18>)
  400ce0:	4798      	blx	r3
  400ce2:	4602      	mov	r2, r0
  400ce4:	4613      	mov	r3, r2
  400ce6:	009b      	lsls	r3, r3, #2
  400ce8:	4413      	add	r3, r2
  400cea:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400cec:	4618      	mov	r0, r3
  400cee:	bd80      	pop	{r7, pc}
  400cf0:	00400c65 	.word	0x00400c65

00400cf4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400cf4:	b580      	push	{r7, lr}
  400cf6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400cf8:	4b02      	ldr	r3, [pc, #8]	; (400d04 <sysclk_get_cpu_hz+0x10>)
  400cfa:	4798      	blx	r3
  400cfc:	4603      	mov	r3, r0
  400cfe:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400d00:	4618      	mov	r0, r3
  400d02:	bd80      	pop	{r7, pc}
  400d04:	00400cd9 	.word	0x00400cd9

00400d08 <main>:
 * 6. ativa a o pino como modo output
 * 7. coloca o HIGH no pino
 */

int main (void)
{
  400d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  400d0c:	b088      	sub	sp, #32
  400d0e:	af00      	add	r7, sp, #0

	/**
	* Inicializando o clock do uP
	*/
	sysclk_init();
  400d10:	4bbe      	ldr	r3, [pc, #760]	; (40100c <main+0x304>)
  400d12:	4798      	blx	r3
	
	/** 
	*  Desabilitando o WathDog do uP
	*/
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d14:	4bbe      	ldr	r3, [pc, #760]	; (401010 <main+0x308>)
  400d16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d1a:	605a      	str	r2, [r3, #4]
		

	_pmc_enable_clock_periferico(ID_PIOA);
  400d1c:	200b      	movs	r0, #11
  400d1e:	4bbd      	ldr	r3, [pc, #756]	; (401014 <main+0x30c>)
  400d20:	4798      	blx	r3
	_pmc_enable_clock_periferico(ID_PIOC);
  400d22:	200d      	movs	r0, #13
  400d24:	4bbb      	ldr	r3, [pc, #748]	; (401014 <main+0x30c>)
  400d26:	4798      	blx	r3
	_pmc_enable_clock_periferico(ID_PIOB);
  400d28:	200c      	movs	r0, #12
  400d2a:	4bba      	ldr	r3, [pc, #744]	; (401014 <main+0x30c>)
  400d2c:	4798      	blx	r3
	
	_pio_set_output(PIOA, (1 << PIN_LED_BLUE),1,0);
  400d2e:	48ba      	ldr	r0, [pc, #744]	; (401018 <main+0x310>)
  400d30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400d34:	2201      	movs	r2, #1
  400d36:	2300      	movs	r3, #0
  400d38:	4cb8      	ldr	r4, [pc, #736]	; (40101c <main+0x314>)
  400d3a:	47a0      	blx	r4
	_pio_set_output(PIOA, (1 << PIN_LED_GREEN),1,0);
  400d3c:	48b6      	ldr	r0, [pc, #728]	; (401018 <main+0x310>)
  400d3e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400d42:	2201      	movs	r2, #1
  400d44:	2300      	movs	r3, #0
  400d46:	4cb5      	ldr	r4, [pc, #724]	; (40101c <main+0x314>)
  400d48:	47a0      	blx	r4
	_pio_set_output(PIOC, (1 << PIN_LED_RED),1,0);
  400d4a:	48b5      	ldr	r0, [pc, #724]	; (401020 <main+0x318>)
  400d4c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400d50:	2201      	movs	r2, #1
  400d52:	2300      	movs	r3, #0
  400d54:	4cb1      	ldr	r4, [pc, #708]	; (40101c <main+0x314>)
  400d56:	47a0      	blx	r4
			_pio_set(PIOA, (1 << PIN_LED_BLUE ));
			_pio_set(PIOA, (1 << PIN_LED_GREEN ));
		}
		*/
			
			if (_pio_get_output_data_status(PIOB, PIN_BUTTON) == 0) {
  400d58:	48b2      	ldr	r0, [pc, #712]	; (401024 <main+0x31c>)
  400d5a:	2103      	movs	r1, #3
  400d5c:	4bb2      	ldr	r3, [pc, #712]	; (401028 <main+0x320>)
  400d5e:	4798      	blx	r3
  400d60:	4603      	mov	r3, r0
  400d62:	2b00      	cmp	r3, #0
  400d64:	f040 816f 	bne.w	401046 <main+0x33e>
				_pio_set(PIOC, (1 << PIN_LED_RED ));
  400d68:	48ad      	ldr	r0, [pc, #692]	; (401020 <main+0x318>)
  400d6a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400d6e:	4baf      	ldr	r3, [pc, #700]	; (40102c <main+0x324>)
  400d70:	4798      	blx	r3
				
				delay_ms(time);
  400d72:	4baf      	ldr	r3, [pc, #700]	; (401030 <main+0x328>)
  400d74:	4798      	blx	r3
  400d76:	4603      	mov	r3, r0
  400d78:	4618      	mov	r0, r3
  400d7a:	f04f 0100 	mov.w	r1, #0
  400d7e:	4602      	mov	r2, r0
  400d80:	460b      	mov	r3, r1
  400d82:	1892      	adds	r2, r2, r2
  400d84:	eb43 0303 	adc.w	r3, r3, r3
  400d88:	1812      	adds	r2, r2, r0
  400d8a:	eb43 0301 	adc.w	r3, r3, r1
  400d8e:	ea4f 1943 	mov.w	r9, r3, lsl #5
  400d92:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
  400d96:	ea4f 1842 	mov.w	r8, r2, lsl #5
  400d9a:	eb12 0208 	adds.w	r2, r2, r8
  400d9e:	eb43 0309 	adc.w	r3, r3, r9
  400da2:	1880      	adds	r0, r0, r2
  400da4:	eb41 0103 	adc.w	r1, r1, r3
  400da8:	f243 62af 	movw	r2, #13999	; 0x36af
  400dac:	f04f 0300 	mov.w	r3, #0
  400db0:	1812      	adds	r2, r2, r0
  400db2:	eb43 0301 	adc.w	r3, r3, r1
  400db6:	4c9f      	ldr	r4, [pc, #636]	; (401034 <main+0x32c>)
  400db8:	4610      	mov	r0, r2
  400dba:	4619      	mov	r1, r3
  400dbc:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400dc0:	f04f 0300 	mov.w	r3, #0
  400dc4:	47a0      	blx	r4
  400dc6:	4602      	mov	r2, r0
  400dc8:	460b      	mov	r3, r1
  400dca:	4613      	mov	r3, r2
  400dcc:	4618      	mov	r0, r3
  400dce:	4b9a      	ldr	r3, [pc, #616]	; (401038 <main+0x330>)
  400dd0:	4798      	blx	r3
				_pio_clear(PIOA, (1 << PIN_LED_BLUE));
  400dd2:	4891      	ldr	r0, [pc, #580]	; (401018 <main+0x310>)
  400dd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400dd8:	4b98      	ldr	r3, [pc, #608]	; (40103c <main+0x334>)
  400dda:	4798      	blx	r3
				
				delay_ms(time);
  400ddc:	4b94      	ldr	r3, [pc, #592]	; (401030 <main+0x328>)
  400dde:	4798      	blx	r3
  400de0:	4603      	mov	r3, r0
  400de2:	4618      	mov	r0, r3
  400de4:	f04f 0100 	mov.w	r1, #0
  400de8:	4602      	mov	r2, r0
  400dea:	460b      	mov	r3, r1
  400dec:	1892      	adds	r2, r2, r2
  400dee:	eb43 0303 	adc.w	r3, r3, r3
  400df2:	1812      	adds	r2, r2, r0
  400df4:	eb43 0301 	adc.w	r3, r3, r1
  400df8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
  400dfc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
  400e00:	ea4f 1a42 	mov.w	sl, r2, lsl #5
  400e04:	eb12 020a 	adds.w	r2, r2, sl
  400e08:	eb43 030b 	adc.w	r3, r3, fp
  400e0c:	1880      	adds	r0, r0, r2
  400e0e:	eb41 0103 	adc.w	r1, r1, r3
  400e12:	f243 62af 	movw	r2, #13999	; 0x36af
  400e16:	f04f 0300 	mov.w	r3, #0
  400e1a:	1812      	adds	r2, r2, r0
  400e1c:	eb43 0301 	adc.w	r3, r3, r1
  400e20:	4c84      	ldr	r4, [pc, #528]	; (401034 <main+0x32c>)
  400e22:	4610      	mov	r0, r2
  400e24:	4619      	mov	r1, r3
  400e26:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e2a:	f04f 0300 	mov.w	r3, #0
  400e2e:	47a0      	blx	r4
  400e30:	4602      	mov	r2, r0
  400e32:	460b      	mov	r3, r1
  400e34:	4613      	mov	r3, r2
  400e36:	4618      	mov	r0, r3
  400e38:	4b7f      	ldr	r3, [pc, #508]	; (401038 <main+0x330>)
  400e3a:	4798      	blx	r3
			    _pio_clear(PIOA, (1 << PIN_LED_GREEN ));
  400e3c:	4876      	ldr	r0, [pc, #472]	; (401018 <main+0x310>)
  400e3e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400e42:	4b7e      	ldr	r3, [pc, #504]	; (40103c <main+0x334>)
  400e44:	4798      	blx	r3
				
				delay_ms(time);
  400e46:	4b7a      	ldr	r3, [pc, #488]	; (401030 <main+0x328>)
  400e48:	4798      	blx	r3
  400e4a:	4603      	mov	r3, r0
  400e4c:	4618      	mov	r0, r3
  400e4e:	f04f 0100 	mov.w	r1, #0
  400e52:	4602      	mov	r2, r0
  400e54:	460b      	mov	r3, r1
  400e56:	1892      	adds	r2, r2, r2
  400e58:	eb43 0303 	adc.w	r3, r3, r3
  400e5c:	1812      	adds	r2, r2, r0
  400e5e:	eb43 0301 	adc.w	r3, r3, r1
  400e62:	015c      	lsls	r4, r3, #5
  400e64:	61fc      	str	r4, [r7, #28]
  400e66:	69fc      	ldr	r4, [r7, #28]
  400e68:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
  400e6c:	61fc      	str	r4, [r7, #28]
  400e6e:	0154      	lsls	r4, r2, #5
  400e70:	61bc      	str	r4, [r7, #24]
  400e72:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
  400e76:	18a4      	adds	r4, r4, r2
  400e78:	eb45 0503 	adc.w	r5, r5, r3
  400e7c:	4622      	mov	r2, r4
  400e7e:	462b      	mov	r3, r5
  400e80:	1880      	adds	r0, r0, r2
  400e82:	eb41 0103 	adc.w	r1, r1, r3
  400e86:	f243 62af 	movw	r2, #13999	; 0x36af
  400e8a:	f04f 0300 	mov.w	r3, #0
  400e8e:	1812      	adds	r2, r2, r0
  400e90:	eb43 0301 	adc.w	r3, r3, r1
  400e94:	4c67      	ldr	r4, [pc, #412]	; (401034 <main+0x32c>)
  400e96:	4610      	mov	r0, r2
  400e98:	4619      	mov	r1, r3
  400e9a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e9e:	f04f 0300 	mov.w	r3, #0
  400ea2:	47a0      	blx	r4
  400ea4:	4602      	mov	r2, r0
  400ea6:	460b      	mov	r3, r1
  400ea8:	4613      	mov	r3, r2
  400eaa:	4618      	mov	r0, r3
  400eac:	4b62      	ldr	r3, [pc, #392]	; (401038 <main+0x330>)
  400eae:	4798      	blx	r3
				_pio_clear(PIOC, (1 << PIN_LED_RED ));
  400eb0:	485b      	ldr	r0, [pc, #364]	; (401020 <main+0x318>)
  400eb2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400eb6:	4b61      	ldr	r3, [pc, #388]	; (40103c <main+0x334>)
  400eb8:	4798      	blx	r3
				
				delay_ms(time);
  400eba:	4b5d      	ldr	r3, [pc, #372]	; (401030 <main+0x328>)
  400ebc:	4798      	blx	r3
  400ebe:	4603      	mov	r3, r0
  400ec0:	4618      	mov	r0, r3
  400ec2:	f04f 0100 	mov.w	r1, #0
  400ec6:	4602      	mov	r2, r0
  400ec8:	460b      	mov	r3, r1
  400eca:	1892      	adds	r2, r2, r2
  400ecc:	eb43 0303 	adc.w	r3, r3, r3
  400ed0:	1812      	adds	r2, r2, r0
  400ed2:	eb43 0301 	adc.w	r3, r3, r1
  400ed6:	015c      	lsls	r4, r3, #5
  400ed8:	617c      	str	r4, [r7, #20]
  400eda:	697c      	ldr	r4, [r7, #20]
  400edc:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
  400ee0:	617c      	str	r4, [r7, #20]
  400ee2:	0154      	lsls	r4, r2, #5
  400ee4:	613c      	str	r4, [r7, #16]
  400ee6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
  400eea:	18a4      	adds	r4, r4, r2
  400eec:	eb45 0503 	adc.w	r5, r5, r3
  400ef0:	4622      	mov	r2, r4
  400ef2:	462b      	mov	r3, r5
  400ef4:	1880      	adds	r0, r0, r2
  400ef6:	eb41 0103 	adc.w	r1, r1, r3
  400efa:	f243 62af 	movw	r2, #13999	; 0x36af
  400efe:	f04f 0300 	mov.w	r3, #0
  400f02:	1812      	adds	r2, r2, r0
  400f04:	eb43 0301 	adc.w	r3, r3, r1
  400f08:	4c4a      	ldr	r4, [pc, #296]	; (401034 <main+0x32c>)
  400f0a:	4610      	mov	r0, r2
  400f0c:	4619      	mov	r1, r3
  400f0e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400f12:	f04f 0300 	mov.w	r3, #0
  400f16:	47a0      	blx	r4
  400f18:	4602      	mov	r2, r0
  400f1a:	460b      	mov	r3, r1
  400f1c:	4613      	mov	r3, r2
  400f1e:	4618      	mov	r0, r3
  400f20:	4b45      	ldr	r3, [pc, #276]	; (401038 <main+0x330>)
  400f22:	4798      	blx	r3
				_pio_set(PIOA, (1 << PIN_LED_BLUE ));
  400f24:	483c      	ldr	r0, [pc, #240]	; (401018 <main+0x310>)
  400f26:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400f2a:	4b40      	ldr	r3, [pc, #256]	; (40102c <main+0x324>)
  400f2c:	4798      	blx	r3
				
				delay_ms(time);
  400f2e:	4b40      	ldr	r3, [pc, #256]	; (401030 <main+0x328>)
  400f30:	4798      	blx	r3
  400f32:	4603      	mov	r3, r0
  400f34:	4618      	mov	r0, r3
  400f36:	f04f 0100 	mov.w	r1, #0
  400f3a:	4602      	mov	r2, r0
  400f3c:	460b      	mov	r3, r1
  400f3e:	1892      	adds	r2, r2, r2
  400f40:	eb43 0303 	adc.w	r3, r3, r3
  400f44:	1812      	adds	r2, r2, r0
  400f46:	eb43 0301 	adc.w	r3, r3, r1
  400f4a:	015c      	lsls	r4, r3, #5
  400f4c:	60fc      	str	r4, [r7, #12]
  400f4e:	68fc      	ldr	r4, [r7, #12]
  400f50:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
  400f54:	60fc      	str	r4, [r7, #12]
  400f56:	0154      	lsls	r4, r2, #5
  400f58:	60bc      	str	r4, [r7, #8]
  400f5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
  400f5e:	18a4      	adds	r4, r4, r2
  400f60:	eb45 0503 	adc.w	r5, r5, r3
  400f64:	4622      	mov	r2, r4
  400f66:	462b      	mov	r3, r5
  400f68:	1880      	adds	r0, r0, r2
  400f6a:	eb41 0103 	adc.w	r1, r1, r3
  400f6e:	f243 62af 	movw	r2, #13999	; 0x36af
  400f72:	f04f 0300 	mov.w	r3, #0
  400f76:	1812      	adds	r2, r2, r0
  400f78:	eb43 0301 	adc.w	r3, r3, r1
  400f7c:	4c2d      	ldr	r4, [pc, #180]	; (401034 <main+0x32c>)
  400f7e:	4610      	mov	r0, r2
  400f80:	4619      	mov	r1, r3
  400f82:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400f86:	f04f 0300 	mov.w	r3, #0
  400f8a:	47a0      	blx	r4
  400f8c:	4602      	mov	r2, r0
  400f8e:	460b      	mov	r3, r1
  400f90:	4613      	mov	r3, r2
  400f92:	4618      	mov	r0, r3
  400f94:	4b28      	ldr	r3, [pc, #160]	; (401038 <main+0x330>)
  400f96:	4798      	blx	r3
				_pio_set(PIOA, (1 << PIN_LED_GREEN ));
  400f98:	481f      	ldr	r0, [pc, #124]	; (401018 <main+0x310>)
  400f9a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400f9e:	4b23      	ldr	r3, [pc, #140]	; (40102c <main+0x324>)
  400fa0:	4798      	blx	r3
				
				delay_ms(time);
  400fa2:	4b23      	ldr	r3, [pc, #140]	; (401030 <main+0x328>)
  400fa4:	4798      	blx	r3
  400fa6:	4603      	mov	r3, r0
  400fa8:	4618      	mov	r0, r3
  400faa:	f04f 0100 	mov.w	r1, #0
  400fae:	4602      	mov	r2, r0
  400fb0:	460b      	mov	r3, r1
  400fb2:	1892      	adds	r2, r2, r2
  400fb4:	eb43 0303 	adc.w	r3, r3, r3
  400fb8:	1812      	adds	r2, r2, r0
  400fba:	eb43 0301 	adc.w	r3, r3, r1
  400fbe:	015c      	lsls	r4, r3, #5
  400fc0:	607c      	str	r4, [r7, #4]
  400fc2:	687c      	ldr	r4, [r7, #4]
  400fc4:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
  400fc8:	607c      	str	r4, [r7, #4]
  400fca:	0154      	lsls	r4, r2, #5
  400fcc:	603c      	str	r4, [r7, #0]
  400fce:	e9d7 4500 	ldrd	r4, r5, [r7]
  400fd2:	18a4      	adds	r4, r4, r2
  400fd4:	eb45 0503 	adc.w	r5, r5, r3
  400fd8:	4622      	mov	r2, r4
  400fda:	462b      	mov	r3, r5
  400fdc:	1880      	adds	r0, r0, r2
  400fde:	eb41 0103 	adc.w	r1, r1, r3
  400fe2:	f243 62af 	movw	r2, #13999	; 0x36af
  400fe6:	f04f 0300 	mov.w	r3, #0
  400fea:	1812      	adds	r2, r2, r0
  400fec:	eb43 0301 	adc.w	r3, r3, r1
  400ff0:	4c10      	ldr	r4, [pc, #64]	; (401034 <main+0x32c>)
  400ff2:	4610      	mov	r0, r2
  400ff4:	4619      	mov	r1, r3
  400ff6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400ffa:	f04f 0300 	mov.w	r3, #0
  400ffe:	47a0      	blx	r4
  401000:	4602      	mov	r2, r0
  401002:	460b      	mov	r3, r1
  401004:	4613      	mov	r3, r2
  401006:	4618      	mov	r0, r3
  401008:	e01a      	b.n	401040 <main+0x338>
  40100a:	bf00      	nop
  40100c:	00400405 	.word	0x00400405
  401010:	400e1450 	.word	0x400e1450
  401014:	00400c29 	.word	0x00400c29
  401018:	400e0e00 	.word	0x400e0e00
  40101c:	00400b41 	.word	0x00400b41
  401020:	400e1200 	.word	0x400e1200
  401024:	400e1000 	.word	0x400e1000
  401028:	00400c05 	.word	0x00400c05
  40102c:	00400bcd 	.word	0x00400bcd
  401030:	00400cf5 	.word	0x00400cf5
  401034:	0040107d 	.word	0x0040107d
  401038:	20000001 	.word	0x20000001
  40103c:	00400be9 	.word	0x00400be9
  401040:	4b09      	ldr	r3, [pc, #36]	; (401068 <main+0x360>)
  401042:	4798      	blx	r3
  401044:	e00e      	b.n	401064 <main+0x35c>
			} else {
				_pio_clear(PIOC, (1 << PIN_LED_RED ));
  401046:	4809      	ldr	r0, [pc, #36]	; (40106c <main+0x364>)
  401048:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40104c:	4b08      	ldr	r3, [pc, #32]	; (401070 <main+0x368>)
  40104e:	4798      	blx	r3
				_pio_set(PIOA, (1 << PIN_LED_BLUE ));
  401050:	4808      	ldr	r0, [pc, #32]	; (401074 <main+0x36c>)
  401052:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401056:	4b08      	ldr	r3, [pc, #32]	; (401078 <main+0x370>)
  401058:	4798      	blx	r3
				_pio_set(PIOA, (1 << PIN_LED_GREEN ));
  40105a:	4806      	ldr	r0, [pc, #24]	; (401074 <main+0x36c>)
  40105c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401060:	4b05      	ldr	r3, [pc, #20]	; (401078 <main+0x370>)
  401062:	4798      	blx	r3
			}
			
	}
  401064:	e678      	b.n	400d58 <main+0x50>
  401066:	bf00      	nop
  401068:	20000001 	.word	0x20000001
  40106c:	400e1200 	.word	0x400e1200
  401070:	00400be9 	.word	0x00400be9
  401074:	400e0e00 	.word	0x400e0e00
  401078:	00400bcd 	.word	0x00400bcd

0040107c <__aeabi_uldivmod>:
  40107c:	b953      	cbnz	r3, 401094 <__aeabi_uldivmod+0x18>
  40107e:	b94a      	cbnz	r2, 401094 <__aeabi_uldivmod+0x18>
  401080:	2900      	cmp	r1, #0
  401082:	bf08      	it	eq
  401084:	2800      	cmpeq	r0, #0
  401086:	bf1c      	itt	ne
  401088:	f04f 31ff 	movne.w	r1, #4294967295
  40108c:	f04f 30ff 	movne.w	r0, #4294967295
  401090:	f000 b83c 	b.w	40110c <__aeabi_idiv0>
  401094:	b082      	sub	sp, #8
  401096:	46ec      	mov	ip, sp
  401098:	e92d 5000 	stmdb	sp!, {ip, lr}
  40109c:	f000 f81e 	bl	4010dc <__gnu_uldivmod_helper>
  4010a0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4010a4:	b002      	add	sp, #8
  4010a6:	bc0c      	pop	{r2, r3}
  4010a8:	4770      	bx	lr
  4010aa:	bf00      	nop

004010ac <__gnu_ldivmod_helper>:
  4010ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010b0:	9c06      	ldr	r4, [sp, #24]
  4010b2:	4615      	mov	r5, r2
  4010b4:	4606      	mov	r6, r0
  4010b6:	460f      	mov	r7, r1
  4010b8:	4698      	mov	r8, r3
  4010ba:	f000 f829 	bl	401110 <__divdi3>
  4010be:	fb05 f301 	mul.w	r3, r5, r1
  4010c2:	fb00 3808 	mla	r8, r0, r8, r3
  4010c6:	fba5 2300 	umull	r2, r3, r5, r0
  4010ca:	1ab2      	subs	r2, r6, r2
  4010cc:	4443      	add	r3, r8
  4010ce:	eb67 0303 	sbc.w	r3, r7, r3
  4010d2:	e9c4 2300 	strd	r2, r3, [r4]
  4010d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010da:	bf00      	nop

004010dc <__gnu_uldivmod_helper>:
  4010dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010e0:	9c06      	ldr	r4, [sp, #24]
  4010e2:	4690      	mov	r8, r2
  4010e4:	4606      	mov	r6, r0
  4010e6:	460f      	mov	r7, r1
  4010e8:	461d      	mov	r5, r3
  4010ea:	f000 f95f 	bl	4013ac <__udivdi3>
  4010ee:	fb00 f505 	mul.w	r5, r0, r5
  4010f2:	fba0 2308 	umull	r2, r3, r0, r8
  4010f6:	fb08 5501 	mla	r5, r8, r1, r5
  4010fa:	1ab2      	subs	r2, r6, r2
  4010fc:	442b      	add	r3, r5
  4010fe:	eb67 0303 	sbc.w	r3, r7, r3
  401102:	e9c4 2300 	strd	r2, r3, [r4]
  401106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40110a:	bf00      	nop

0040110c <__aeabi_idiv0>:
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop

00401110 <__divdi3>:
  401110:	2900      	cmp	r1, #0
  401112:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401116:	f2c0 80a6 	blt.w	401266 <__divdi3+0x156>
  40111a:	2600      	movs	r6, #0
  40111c:	2b00      	cmp	r3, #0
  40111e:	f2c0 809c 	blt.w	40125a <__divdi3+0x14a>
  401122:	4688      	mov	r8, r1
  401124:	4694      	mov	ip, r2
  401126:	469e      	mov	lr, r3
  401128:	4615      	mov	r5, r2
  40112a:	4604      	mov	r4, r0
  40112c:	460f      	mov	r7, r1
  40112e:	2b00      	cmp	r3, #0
  401130:	d13d      	bne.n	4011ae <__divdi3+0x9e>
  401132:	428a      	cmp	r2, r1
  401134:	d959      	bls.n	4011ea <__divdi3+0xda>
  401136:	fab2 f382 	clz	r3, r2
  40113a:	b13b      	cbz	r3, 40114c <__divdi3+0x3c>
  40113c:	f1c3 0220 	rsb	r2, r3, #32
  401140:	409f      	lsls	r7, r3
  401142:	fa20 f202 	lsr.w	r2, r0, r2
  401146:	409d      	lsls	r5, r3
  401148:	4317      	orrs	r7, r2
  40114a:	409c      	lsls	r4, r3
  40114c:	0c29      	lsrs	r1, r5, #16
  40114e:	0c22      	lsrs	r2, r4, #16
  401150:	fbb7 fef1 	udiv	lr, r7, r1
  401154:	b2a8      	uxth	r0, r5
  401156:	fb01 771e 	mls	r7, r1, lr, r7
  40115a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40115e:	fb00 f30e 	mul.w	r3, r0, lr
  401162:	42bb      	cmp	r3, r7
  401164:	d90a      	bls.n	40117c <__divdi3+0x6c>
  401166:	197f      	adds	r7, r7, r5
  401168:	f10e 32ff 	add.w	r2, lr, #4294967295
  40116c:	f080 8105 	bcs.w	40137a <__divdi3+0x26a>
  401170:	42bb      	cmp	r3, r7
  401172:	f240 8102 	bls.w	40137a <__divdi3+0x26a>
  401176:	f1ae 0e02 	sub.w	lr, lr, #2
  40117a:	442f      	add	r7, r5
  40117c:	1aff      	subs	r7, r7, r3
  40117e:	b2a4      	uxth	r4, r4
  401180:	fbb7 f3f1 	udiv	r3, r7, r1
  401184:	fb01 7713 	mls	r7, r1, r3, r7
  401188:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40118c:	fb00 f003 	mul.w	r0, r0, r3
  401190:	42b8      	cmp	r0, r7
  401192:	d908      	bls.n	4011a6 <__divdi3+0x96>
  401194:	197f      	adds	r7, r7, r5
  401196:	f103 32ff 	add.w	r2, r3, #4294967295
  40119a:	f080 80f0 	bcs.w	40137e <__divdi3+0x26e>
  40119e:	42b8      	cmp	r0, r7
  4011a0:	f240 80ed 	bls.w	40137e <__divdi3+0x26e>
  4011a4:	3b02      	subs	r3, #2
  4011a6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  4011aa:	2200      	movs	r2, #0
  4011ac:	e003      	b.n	4011b6 <__divdi3+0xa6>
  4011ae:	428b      	cmp	r3, r1
  4011b0:	d90f      	bls.n	4011d2 <__divdi3+0xc2>
  4011b2:	2200      	movs	r2, #0
  4011b4:	4613      	mov	r3, r2
  4011b6:	1c34      	adds	r4, r6, #0
  4011b8:	bf18      	it	ne
  4011ba:	2401      	movne	r4, #1
  4011bc:	4260      	negs	r0, r4
  4011be:	f04f 0500 	mov.w	r5, #0
  4011c2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  4011c6:	4058      	eors	r0, r3
  4011c8:	4051      	eors	r1, r2
  4011ca:	1900      	adds	r0, r0, r4
  4011cc:	4169      	adcs	r1, r5
  4011ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011d2:	fab3 f283 	clz	r2, r3
  4011d6:	2a00      	cmp	r2, #0
  4011d8:	f040 8086 	bne.w	4012e8 <__divdi3+0x1d8>
  4011dc:	428b      	cmp	r3, r1
  4011de:	d302      	bcc.n	4011e6 <__divdi3+0xd6>
  4011e0:	4584      	cmp	ip, r0
  4011e2:	f200 80db 	bhi.w	40139c <__divdi3+0x28c>
  4011e6:	2301      	movs	r3, #1
  4011e8:	e7e5      	b.n	4011b6 <__divdi3+0xa6>
  4011ea:	b912      	cbnz	r2, 4011f2 <__divdi3+0xe2>
  4011ec:	2301      	movs	r3, #1
  4011ee:	fbb3 f5f2 	udiv	r5, r3, r2
  4011f2:	fab5 f085 	clz	r0, r5
  4011f6:	2800      	cmp	r0, #0
  4011f8:	d13b      	bne.n	401272 <__divdi3+0x162>
  4011fa:	1b78      	subs	r0, r7, r5
  4011fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  401200:	fa1f fc85 	uxth.w	ip, r5
  401204:	2201      	movs	r2, #1
  401206:	fbb0 f8fe 	udiv	r8, r0, lr
  40120a:	0c21      	lsrs	r1, r4, #16
  40120c:	fb0e 0718 	mls	r7, lr, r8, r0
  401210:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  401214:	fb0c f308 	mul.w	r3, ip, r8
  401218:	42bb      	cmp	r3, r7
  40121a:	d907      	bls.n	40122c <__divdi3+0x11c>
  40121c:	197f      	adds	r7, r7, r5
  40121e:	f108 31ff 	add.w	r1, r8, #4294967295
  401222:	d202      	bcs.n	40122a <__divdi3+0x11a>
  401224:	42bb      	cmp	r3, r7
  401226:	f200 80bd 	bhi.w	4013a4 <__divdi3+0x294>
  40122a:	4688      	mov	r8, r1
  40122c:	1aff      	subs	r7, r7, r3
  40122e:	b2a4      	uxth	r4, r4
  401230:	fbb7 f3fe 	udiv	r3, r7, lr
  401234:	fb0e 7713 	mls	r7, lr, r3, r7
  401238:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40123c:	fb0c fc03 	mul.w	ip, ip, r3
  401240:	45bc      	cmp	ip, r7
  401242:	d907      	bls.n	401254 <__divdi3+0x144>
  401244:	197f      	adds	r7, r7, r5
  401246:	f103 31ff 	add.w	r1, r3, #4294967295
  40124a:	d202      	bcs.n	401252 <__divdi3+0x142>
  40124c:	45bc      	cmp	ip, r7
  40124e:	f200 80a7 	bhi.w	4013a0 <__divdi3+0x290>
  401252:	460b      	mov	r3, r1
  401254:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  401258:	e7ad      	b.n	4011b6 <__divdi3+0xa6>
  40125a:	4252      	negs	r2, r2
  40125c:	ea6f 0606 	mvn.w	r6, r6
  401260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401264:	e75d      	b.n	401122 <__divdi3+0x12>
  401266:	4240      	negs	r0, r0
  401268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40126c:	f04f 36ff 	mov.w	r6, #4294967295
  401270:	e754      	b.n	40111c <__divdi3+0xc>
  401272:	f1c0 0220 	rsb	r2, r0, #32
  401276:	fa24 f102 	lsr.w	r1, r4, r2
  40127a:	fa07 f300 	lsl.w	r3, r7, r0
  40127e:	4085      	lsls	r5, r0
  401280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  401284:	40d7      	lsrs	r7, r2
  401286:	4319      	orrs	r1, r3
  401288:	fbb7 f2fe 	udiv	r2, r7, lr
  40128c:	0c0b      	lsrs	r3, r1, #16
  40128e:	fb0e 7712 	mls	r7, lr, r2, r7
  401292:	fa1f fc85 	uxth.w	ip, r5
  401296:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  40129a:	fb0c f702 	mul.w	r7, ip, r2
  40129e:	429f      	cmp	r7, r3
  4012a0:	fa04 f400 	lsl.w	r4, r4, r0
  4012a4:	d907      	bls.n	4012b6 <__divdi3+0x1a6>
  4012a6:	195b      	adds	r3, r3, r5
  4012a8:	f102 30ff 	add.w	r0, r2, #4294967295
  4012ac:	d274      	bcs.n	401398 <__divdi3+0x288>
  4012ae:	429f      	cmp	r7, r3
  4012b0:	d972      	bls.n	401398 <__divdi3+0x288>
  4012b2:	3a02      	subs	r2, #2
  4012b4:	442b      	add	r3, r5
  4012b6:	1bdf      	subs	r7, r3, r7
  4012b8:	b289      	uxth	r1, r1
  4012ba:	fbb7 f8fe 	udiv	r8, r7, lr
  4012be:	fb0e 7318 	mls	r3, lr, r8, r7
  4012c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4012c6:	fb0c f708 	mul.w	r7, ip, r8
  4012ca:	429f      	cmp	r7, r3
  4012cc:	d908      	bls.n	4012e0 <__divdi3+0x1d0>
  4012ce:	195b      	adds	r3, r3, r5
  4012d0:	f108 31ff 	add.w	r1, r8, #4294967295
  4012d4:	d25c      	bcs.n	401390 <__divdi3+0x280>
  4012d6:	429f      	cmp	r7, r3
  4012d8:	d95a      	bls.n	401390 <__divdi3+0x280>
  4012da:	f1a8 0802 	sub.w	r8, r8, #2
  4012de:	442b      	add	r3, r5
  4012e0:	1bd8      	subs	r0, r3, r7
  4012e2:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  4012e6:	e78e      	b.n	401206 <__divdi3+0xf6>
  4012e8:	f1c2 0320 	rsb	r3, r2, #32
  4012ec:	fa2c f103 	lsr.w	r1, ip, r3
  4012f0:	fa0e fe02 	lsl.w	lr, lr, r2
  4012f4:	fa20 f703 	lsr.w	r7, r0, r3
  4012f8:	ea41 0e0e 	orr.w	lr, r1, lr
  4012fc:	fa08 f002 	lsl.w	r0, r8, r2
  401300:	fa28 f103 	lsr.w	r1, r8, r3
  401304:	ea4f 451e 	mov.w	r5, lr, lsr #16
  401308:	4338      	orrs	r0, r7
  40130a:	fbb1 f8f5 	udiv	r8, r1, r5
  40130e:	0c03      	lsrs	r3, r0, #16
  401310:	fb05 1118 	mls	r1, r5, r8, r1
  401314:	fa1f f78e 	uxth.w	r7, lr
  401318:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40131c:	fb07 f308 	mul.w	r3, r7, r8
  401320:	428b      	cmp	r3, r1
  401322:	fa0c fc02 	lsl.w	ip, ip, r2
  401326:	d909      	bls.n	40133c <__divdi3+0x22c>
  401328:	eb11 010e 	adds.w	r1, r1, lr
  40132c:	f108 39ff 	add.w	r9, r8, #4294967295
  401330:	d230      	bcs.n	401394 <__divdi3+0x284>
  401332:	428b      	cmp	r3, r1
  401334:	d92e      	bls.n	401394 <__divdi3+0x284>
  401336:	f1a8 0802 	sub.w	r8, r8, #2
  40133a:	4471      	add	r1, lr
  40133c:	1ac9      	subs	r1, r1, r3
  40133e:	b280      	uxth	r0, r0
  401340:	fbb1 f3f5 	udiv	r3, r1, r5
  401344:	fb05 1113 	mls	r1, r5, r3, r1
  401348:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40134c:	fb07 f703 	mul.w	r7, r7, r3
  401350:	428f      	cmp	r7, r1
  401352:	d908      	bls.n	401366 <__divdi3+0x256>
  401354:	eb11 010e 	adds.w	r1, r1, lr
  401358:	f103 30ff 	add.w	r0, r3, #4294967295
  40135c:	d216      	bcs.n	40138c <__divdi3+0x27c>
  40135e:	428f      	cmp	r7, r1
  401360:	d914      	bls.n	40138c <__divdi3+0x27c>
  401362:	3b02      	subs	r3, #2
  401364:	4471      	add	r1, lr
  401366:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40136a:	1bc9      	subs	r1, r1, r7
  40136c:	fba3 890c 	umull	r8, r9, r3, ip
  401370:	4549      	cmp	r1, r9
  401372:	d309      	bcc.n	401388 <__divdi3+0x278>
  401374:	d005      	beq.n	401382 <__divdi3+0x272>
  401376:	2200      	movs	r2, #0
  401378:	e71d      	b.n	4011b6 <__divdi3+0xa6>
  40137a:	4696      	mov	lr, r2
  40137c:	e6fe      	b.n	40117c <__divdi3+0x6c>
  40137e:	4613      	mov	r3, r2
  401380:	e711      	b.n	4011a6 <__divdi3+0x96>
  401382:	4094      	lsls	r4, r2
  401384:	4544      	cmp	r4, r8
  401386:	d2f6      	bcs.n	401376 <__divdi3+0x266>
  401388:	3b01      	subs	r3, #1
  40138a:	e7f4      	b.n	401376 <__divdi3+0x266>
  40138c:	4603      	mov	r3, r0
  40138e:	e7ea      	b.n	401366 <__divdi3+0x256>
  401390:	4688      	mov	r8, r1
  401392:	e7a5      	b.n	4012e0 <__divdi3+0x1d0>
  401394:	46c8      	mov	r8, r9
  401396:	e7d1      	b.n	40133c <__divdi3+0x22c>
  401398:	4602      	mov	r2, r0
  40139a:	e78c      	b.n	4012b6 <__divdi3+0x1a6>
  40139c:	4613      	mov	r3, r2
  40139e:	e70a      	b.n	4011b6 <__divdi3+0xa6>
  4013a0:	3b02      	subs	r3, #2
  4013a2:	e757      	b.n	401254 <__divdi3+0x144>
  4013a4:	f1a8 0802 	sub.w	r8, r8, #2
  4013a8:	442f      	add	r7, r5
  4013aa:	e73f      	b.n	40122c <__divdi3+0x11c>

004013ac <__udivdi3>:
  4013ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013b0:	2b00      	cmp	r3, #0
  4013b2:	d144      	bne.n	40143e <__udivdi3+0x92>
  4013b4:	428a      	cmp	r2, r1
  4013b6:	4615      	mov	r5, r2
  4013b8:	4604      	mov	r4, r0
  4013ba:	d94f      	bls.n	40145c <__udivdi3+0xb0>
  4013bc:	fab2 f782 	clz	r7, r2
  4013c0:	460e      	mov	r6, r1
  4013c2:	b14f      	cbz	r7, 4013d8 <__udivdi3+0x2c>
  4013c4:	f1c7 0320 	rsb	r3, r7, #32
  4013c8:	40b9      	lsls	r1, r7
  4013ca:	fa20 f603 	lsr.w	r6, r0, r3
  4013ce:	fa02 f507 	lsl.w	r5, r2, r7
  4013d2:	430e      	orrs	r6, r1
  4013d4:	fa00 f407 	lsl.w	r4, r0, r7
  4013d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4013dc:	0c23      	lsrs	r3, r4, #16
  4013de:	fbb6 f0fe 	udiv	r0, r6, lr
  4013e2:	b2af      	uxth	r7, r5
  4013e4:	fb0e 6110 	mls	r1, lr, r0, r6
  4013e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4013ec:	fb07 f100 	mul.w	r1, r7, r0
  4013f0:	4299      	cmp	r1, r3
  4013f2:	d909      	bls.n	401408 <__udivdi3+0x5c>
  4013f4:	195b      	adds	r3, r3, r5
  4013f6:	f100 32ff 	add.w	r2, r0, #4294967295
  4013fa:	f080 80ec 	bcs.w	4015d6 <__udivdi3+0x22a>
  4013fe:	4299      	cmp	r1, r3
  401400:	f240 80e9 	bls.w	4015d6 <__udivdi3+0x22a>
  401404:	3802      	subs	r0, #2
  401406:	442b      	add	r3, r5
  401408:	1a5a      	subs	r2, r3, r1
  40140a:	b2a4      	uxth	r4, r4
  40140c:	fbb2 f3fe 	udiv	r3, r2, lr
  401410:	fb0e 2213 	mls	r2, lr, r3, r2
  401414:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  401418:	fb07 f703 	mul.w	r7, r7, r3
  40141c:	4297      	cmp	r7, r2
  40141e:	d908      	bls.n	401432 <__udivdi3+0x86>
  401420:	1952      	adds	r2, r2, r5
  401422:	f103 31ff 	add.w	r1, r3, #4294967295
  401426:	f080 80d8 	bcs.w	4015da <__udivdi3+0x22e>
  40142a:	4297      	cmp	r7, r2
  40142c:	f240 80d5 	bls.w	4015da <__udivdi3+0x22e>
  401430:	3b02      	subs	r3, #2
  401432:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  401436:	2600      	movs	r6, #0
  401438:	4631      	mov	r1, r6
  40143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40143e:	428b      	cmp	r3, r1
  401440:	d847      	bhi.n	4014d2 <__udivdi3+0x126>
  401442:	fab3 f683 	clz	r6, r3
  401446:	2e00      	cmp	r6, #0
  401448:	d148      	bne.n	4014dc <__udivdi3+0x130>
  40144a:	428b      	cmp	r3, r1
  40144c:	d302      	bcc.n	401454 <__udivdi3+0xa8>
  40144e:	4282      	cmp	r2, r0
  401450:	f200 80cd 	bhi.w	4015ee <__udivdi3+0x242>
  401454:	2001      	movs	r0, #1
  401456:	4631      	mov	r1, r6
  401458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40145c:	b912      	cbnz	r2, 401464 <__udivdi3+0xb8>
  40145e:	2501      	movs	r5, #1
  401460:	fbb5 f5f2 	udiv	r5, r5, r2
  401464:	fab5 f885 	clz	r8, r5
  401468:	f1b8 0f00 	cmp.w	r8, #0
  40146c:	d177      	bne.n	40155e <__udivdi3+0x1b2>
  40146e:	1b4a      	subs	r2, r1, r5
  401470:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  401474:	b2af      	uxth	r7, r5
  401476:	2601      	movs	r6, #1
  401478:	fbb2 f0fe 	udiv	r0, r2, lr
  40147c:	0c23      	lsrs	r3, r4, #16
  40147e:	fb0e 2110 	mls	r1, lr, r0, r2
  401482:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  401486:	fb07 f300 	mul.w	r3, r7, r0
  40148a:	428b      	cmp	r3, r1
  40148c:	d907      	bls.n	40149e <__udivdi3+0xf2>
  40148e:	1949      	adds	r1, r1, r5
  401490:	f100 32ff 	add.w	r2, r0, #4294967295
  401494:	d202      	bcs.n	40149c <__udivdi3+0xf0>
  401496:	428b      	cmp	r3, r1
  401498:	f200 80ba 	bhi.w	401610 <__udivdi3+0x264>
  40149c:	4610      	mov	r0, r2
  40149e:	1ac9      	subs	r1, r1, r3
  4014a0:	b2a4      	uxth	r4, r4
  4014a2:	fbb1 f3fe 	udiv	r3, r1, lr
  4014a6:	fb0e 1113 	mls	r1, lr, r3, r1
  4014aa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4014ae:	fb07 f703 	mul.w	r7, r7, r3
  4014b2:	42a7      	cmp	r7, r4
  4014b4:	d908      	bls.n	4014c8 <__udivdi3+0x11c>
  4014b6:	1964      	adds	r4, r4, r5
  4014b8:	f103 32ff 	add.w	r2, r3, #4294967295
  4014bc:	f080 808f 	bcs.w	4015de <__udivdi3+0x232>
  4014c0:	42a7      	cmp	r7, r4
  4014c2:	f240 808c 	bls.w	4015de <__udivdi3+0x232>
  4014c6:	3b02      	subs	r3, #2
  4014c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4014cc:	4631      	mov	r1, r6
  4014ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014d2:	2600      	movs	r6, #0
  4014d4:	4630      	mov	r0, r6
  4014d6:	4631      	mov	r1, r6
  4014d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014dc:	f1c6 0420 	rsb	r4, r6, #32
  4014e0:	fa22 f504 	lsr.w	r5, r2, r4
  4014e4:	40b3      	lsls	r3, r6
  4014e6:	432b      	orrs	r3, r5
  4014e8:	fa20 fc04 	lsr.w	ip, r0, r4
  4014ec:	fa01 f706 	lsl.w	r7, r1, r6
  4014f0:	fa21 f504 	lsr.w	r5, r1, r4
  4014f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  4014f8:	ea4c 0707 	orr.w	r7, ip, r7
  4014fc:	fbb5 f8fe 	udiv	r8, r5, lr
  401500:	0c39      	lsrs	r1, r7, #16
  401502:	fb0e 5518 	mls	r5, lr, r8, r5
  401506:	fa1f fc83 	uxth.w	ip, r3
  40150a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  40150e:	fb0c f108 	mul.w	r1, ip, r8
  401512:	42a9      	cmp	r1, r5
  401514:	fa02 f206 	lsl.w	r2, r2, r6
  401518:	d904      	bls.n	401524 <__udivdi3+0x178>
  40151a:	18ed      	adds	r5, r5, r3
  40151c:	f108 34ff 	add.w	r4, r8, #4294967295
  401520:	d367      	bcc.n	4015f2 <__udivdi3+0x246>
  401522:	46a0      	mov	r8, r4
  401524:	1a6d      	subs	r5, r5, r1
  401526:	b2bf      	uxth	r7, r7
  401528:	fbb5 f4fe 	udiv	r4, r5, lr
  40152c:	fb0e 5514 	mls	r5, lr, r4, r5
  401530:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  401534:	fb0c fc04 	mul.w	ip, ip, r4
  401538:	458c      	cmp	ip, r1
  40153a:	d904      	bls.n	401546 <__udivdi3+0x19a>
  40153c:	18c9      	adds	r1, r1, r3
  40153e:	f104 35ff 	add.w	r5, r4, #4294967295
  401542:	d35c      	bcc.n	4015fe <__udivdi3+0x252>
  401544:	462c      	mov	r4, r5
  401546:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40154a:	ebcc 0101 	rsb	r1, ip, r1
  40154e:	fba4 2302 	umull	r2, r3, r4, r2
  401552:	4299      	cmp	r1, r3
  401554:	d348      	bcc.n	4015e8 <__udivdi3+0x23c>
  401556:	d044      	beq.n	4015e2 <__udivdi3+0x236>
  401558:	4620      	mov	r0, r4
  40155a:	2600      	movs	r6, #0
  40155c:	e76c      	b.n	401438 <__udivdi3+0x8c>
  40155e:	f1c8 0420 	rsb	r4, r8, #32
  401562:	fa01 f308 	lsl.w	r3, r1, r8
  401566:	fa05 f508 	lsl.w	r5, r5, r8
  40156a:	fa20 f704 	lsr.w	r7, r0, r4
  40156e:	40e1      	lsrs	r1, r4
  401570:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  401574:	431f      	orrs	r7, r3
  401576:	fbb1 f6fe 	udiv	r6, r1, lr
  40157a:	0c3a      	lsrs	r2, r7, #16
  40157c:	fb0e 1116 	mls	r1, lr, r6, r1
  401580:	fa1f fc85 	uxth.w	ip, r5
  401584:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  401588:	fb0c f206 	mul.w	r2, ip, r6
  40158c:	429a      	cmp	r2, r3
  40158e:	fa00 f408 	lsl.w	r4, r0, r8
  401592:	d907      	bls.n	4015a4 <__udivdi3+0x1f8>
  401594:	195b      	adds	r3, r3, r5
  401596:	f106 31ff 	add.w	r1, r6, #4294967295
  40159a:	d237      	bcs.n	40160c <__udivdi3+0x260>
  40159c:	429a      	cmp	r2, r3
  40159e:	d935      	bls.n	40160c <__udivdi3+0x260>
  4015a0:	3e02      	subs	r6, #2
  4015a2:	442b      	add	r3, r5
  4015a4:	1a9b      	subs	r3, r3, r2
  4015a6:	b2bf      	uxth	r7, r7
  4015a8:	fbb3 f0fe 	udiv	r0, r3, lr
  4015ac:	fb0e 3310 	mls	r3, lr, r0, r3
  4015b0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  4015b4:	fb0c f100 	mul.w	r1, ip, r0
  4015b8:	4299      	cmp	r1, r3
  4015ba:	d907      	bls.n	4015cc <__udivdi3+0x220>
  4015bc:	195b      	adds	r3, r3, r5
  4015be:	f100 32ff 	add.w	r2, r0, #4294967295
  4015c2:	d221      	bcs.n	401608 <__udivdi3+0x25c>
  4015c4:	4299      	cmp	r1, r3
  4015c6:	d91f      	bls.n	401608 <__udivdi3+0x25c>
  4015c8:	3802      	subs	r0, #2
  4015ca:	442b      	add	r3, r5
  4015cc:	1a5a      	subs	r2, r3, r1
  4015ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  4015d2:	4667      	mov	r7, ip
  4015d4:	e750      	b.n	401478 <__udivdi3+0xcc>
  4015d6:	4610      	mov	r0, r2
  4015d8:	e716      	b.n	401408 <__udivdi3+0x5c>
  4015da:	460b      	mov	r3, r1
  4015dc:	e729      	b.n	401432 <__udivdi3+0x86>
  4015de:	4613      	mov	r3, r2
  4015e0:	e772      	b.n	4014c8 <__udivdi3+0x11c>
  4015e2:	40b0      	lsls	r0, r6
  4015e4:	4290      	cmp	r0, r2
  4015e6:	d2b7      	bcs.n	401558 <__udivdi3+0x1ac>
  4015e8:	1e60      	subs	r0, r4, #1
  4015ea:	2600      	movs	r6, #0
  4015ec:	e724      	b.n	401438 <__udivdi3+0x8c>
  4015ee:	4630      	mov	r0, r6
  4015f0:	e722      	b.n	401438 <__udivdi3+0x8c>
  4015f2:	42a9      	cmp	r1, r5
  4015f4:	d995      	bls.n	401522 <__udivdi3+0x176>
  4015f6:	f1a8 0802 	sub.w	r8, r8, #2
  4015fa:	441d      	add	r5, r3
  4015fc:	e792      	b.n	401524 <__udivdi3+0x178>
  4015fe:	458c      	cmp	ip, r1
  401600:	d9a0      	bls.n	401544 <__udivdi3+0x198>
  401602:	3c02      	subs	r4, #2
  401604:	4419      	add	r1, r3
  401606:	e79e      	b.n	401546 <__udivdi3+0x19a>
  401608:	4610      	mov	r0, r2
  40160a:	e7df      	b.n	4015cc <__udivdi3+0x220>
  40160c:	460e      	mov	r6, r1
  40160e:	e7c9      	b.n	4015a4 <__udivdi3+0x1f8>
  401610:	3802      	subs	r0, #2
  401612:	4429      	add	r1, r5
  401614:	e743      	b.n	40149e <__udivdi3+0xf2>
  401616:	bf00      	nop

00401618 <__libc_init_array>:
  401618:	b570      	push	{r4, r5, r6, lr}
  40161a:	4e0f      	ldr	r6, [pc, #60]	; (401658 <__libc_init_array+0x40>)
  40161c:	4d0f      	ldr	r5, [pc, #60]	; (40165c <__libc_init_array+0x44>)
  40161e:	1b76      	subs	r6, r6, r5
  401620:	10b6      	asrs	r6, r6, #2
  401622:	bf18      	it	ne
  401624:	2400      	movne	r4, #0
  401626:	d005      	beq.n	401634 <__libc_init_array+0x1c>
  401628:	3401      	adds	r4, #1
  40162a:	f855 3b04 	ldr.w	r3, [r5], #4
  40162e:	4798      	blx	r3
  401630:	42a6      	cmp	r6, r4
  401632:	d1f9      	bne.n	401628 <__libc_init_array+0x10>
  401634:	4e0a      	ldr	r6, [pc, #40]	; (401660 <__libc_init_array+0x48>)
  401636:	4d0b      	ldr	r5, [pc, #44]	; (401664 <__libc_init_array+0x4c>)
  401638:	1b76      	subs	r6, r6, r5
  40163a:	f000 f891 	bl	401760 <_init>
  40163e:	10b6      	asrs	r6, r6, #2
  401640:	bf18      	it	ne
  401642:	2400      	movne	r4, #0
  401644:	d006      	beq.n	401654 <__libc_init_array+0x3c>
  401646:	3401      	adds	r4, #1
  401648:	f855 3b04 	ldr.w	r3, [r5], #4
  40164c:	4798      	blx	r3
  40164e:	42a6      	cmp	r6, r4
  401650:	d1f9      	bne.n	401646 <__libc_init_array+0x2e>
  401652:	bd70      	pop	{r4, r5, r6, pc}
  401654:	bd70      	pop	{r4, r5, r6, pc}
  401656:	bf00      	nop
  401658:	0040176c 	.word	0x0040176c
  40165c:	0040176c 	.word	0x0040176c
  401660:	00401774 	.word	0x00401774
  401664:	0040176c 	.word	0x0040176c

00401668 <register_fini>:
  401668:	4b02      	ldr	r3, [pc, #8]	; (401674 <register_fini+0xc>)
  40166a:	b113      	cbz	r3, 401672 <register_fini+0xa>
  40166c:	4802      	ldr	r0, [pc, #8]	; (401678 <register_fini+0x10>)
  40166e:	f000 b805 	b.w	40167c <atexit>
  401672:	4770      	bx	lr
  401674:	00000000 	.word	0x00000000
  401678:	00401689 	.word	0x00401689

0040167c <atexit>:
  40167c:	4601      	mov	r1, r0
  40167e:	2000      	movs	r0, #0
  401680:	4602      	mov	r2, r0
  401682:	4603      	mov	r3, r0
  401684:	f000 b816 	b.w	4016b4 <__register_exitproc>

00401688 <__libc_fini_array>:
  401688:	b538      	push	{r3, r4, r5, lr}
  40168a:	4b08      	ldr	r3, [pc, #32]	; (4016ac <__libc_fini_array+0x24>)
  40168c:	4d08      	ldr	r5, [pc, #32]	; (4016b0 <__libc_fini_array+0x28>)
  40168e:	1aed      	subs	r5, r5, r3
  401690:	10ac      	asrs	r4, r5, #2
  401692:	bf18      	it	ne
  401694:	18ed      	addne	r5, r5, r3
  401696:	d005      	beq.n	4016a4 <__libc_fini_array+0x1c>
  401698:	3c01      	subs	r4, #1
  40169a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40169e:	4798      	blx	r3
  4016a0:	2c00      	cmp	r4, #0
  4016a2:	d1f9      	bne.n	401698 <__libc_fini_array+0x10>
  4016a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4016a8:	f000 b864 	b.w	401774 <_fini>
  4016ac:	00401780 	.word	0x00401780
  4016b0:	00401784 	.word	0x00401784

004016b4 <__register_exitproc>:
  4016b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4016b8:	4c25      	ldr	r4, [pc, #148]	; (401750 <__register_exitproc+0x9c>)
  4016ba:	6825      	ldr	r5, [r4, #0]
  4016bc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4016c0:	4606      	mov	r6, r0
  4016c2:	4688      	mov	r8, r1
  4016c4:	4692      	mov	sl, r2
  4016c6:	4699      	mov	r9, r3
  4016c8:	b3cc      	cbz	r4, 40173e <__register_exitproc+0x8a>
  4016ca:	6860      	ldr	r0, [r4, #4]
  4016cc:	281f      	cmp	r0, #31
  4016ce:	dc18      	bgt.n	401702 <__register_exitproc+0x4e>
  4016d0:	1c43      	adds	r3, r0, #1
  4016d2:	b17e      	cbz	r6, 4016f4 <__register_exitproc+0x40>
  4016d4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4016d8:	2101      	movs	r1, #1
  4016da:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4016de:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  4016e2:	fa01 f200 	lsl.w	r2, r1, r0
  4016e6:	4317      	orrs	r7, r2
  4016e8:	2e02      	cmp	r6, #2
  4016ea:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4016ee:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4016f2:	d01e      	beq.n	401732 <__register_exitproc+0x7e>
  4016f4:	3002      	adds	r0, #2
  4016f6:	6063      	str	r3, [r4, #4]
  4016f8:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4016fc:	2000      	movs	r0, #0
  4016fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401702:	4b14      	ldr	r3, [pc, #80]	; (401754 <__register_exitproc+0xa0>)
  401704:	b303      	cbz	r3, 401748 <__register_exitproc+0x94>
  401706:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40170a:	f3af 8000 	nop.w
  40170e:	4604      	mov	r4, r0
  401710:	b1d0      	cbz	r0, 401748 <__register_exitproc+0x94>
  401712:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  401716:	2700      	movs	r7, #0
  401718:	e880 0088 	stmia.w	r0, {r3, r7}
  40171c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401720:	4638      	mov	r0, r7
  401722:	2301      	movs	r3, #1
  401724:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  401728:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40172c:	2e00      	cmp	r6, #0
  40172e:	d0e1      	beq.n	4016f4 <__register_exitproc+0x40>
  401730:	e7d0      	b.n	4016d4 <__register_exitproc+0x20>
  401732:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  401736:	430a      	orrs	r2, r1
  401738:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40173c:	e7da      	b.n	4016f4 <__register_exitproc+0x40>
  40173e:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  401742:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401746:	e7c0      	b.n	4016ca <__register_exitproc+0x16>
  401748:	f04f 30ff 	mov.w	r0, #4294967295
  40174c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401750:	0040175c 	.word	0x0040175c
  401754:	00000000 	.word	0x00000000
  401758:	00000043 	.word	0x00000043

0040175c <_global_impure_ptr>:
  40175c:	20000020                                 .. 

00401760 <_init>:
  401760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401762:	bf00      	nop
  401764:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401766:	bc08      	pop	{r3}
  401768:	469e      	mov	lr, r3
  40176a:	4770      	bx	lr

0040176c <__init_array_start>:
  40176c:	00401669 	.word	0x00401669

00401770 <__frame_dummy_init_array_entry>:
  401770:	004000f1                                ..@.

00401774 <_fini>:
  401774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401776:	bf00      	nop
  401778:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40177a:	bc08      	pop	{r3}
  40177c:	469e      	mov	lr, r3
  40177e:	4770      	bx	lr

00401780 <__fini_array_start>:
  401780:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <SystemCoreClock>:
2000001c:	0900 003d                                   ..=.

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
20000054:	1758 0040 0000 0000 0000 0000 0000 0000     X.@.............
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
