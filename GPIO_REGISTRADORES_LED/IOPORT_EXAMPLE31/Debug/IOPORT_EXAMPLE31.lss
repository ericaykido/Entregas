
IOPORT_EXAMPLE31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a18  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  00400a18  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  20000430  00400e48  00010430  2**2
                  ALLOC
  3 .stack        00003004  200004c4  00400edc  00010430  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001045a  2**0
                  CONTENTS, READONLY
  6 .debug_info   000059b7  00000000  00000000  000104b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001003  00000000  00000000  00015e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000022a5  00000000  00000000  00016e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004d0  00000000  00000000  00019114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000480  00000000  00000000  000195e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000113ab  00000000  00000000  00019a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005e93  00000000  00000000  0002ae0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005092c  00000000  00000000  00030ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b10  00000000  00000000  000815d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034c8 	.word	0x200034c8
  400004:	004005e1 	.word	0x004005e1
  400008:	004005dd 	.word	0x004005dd
  40000c:	004005dd 	.word	0x004005dd
  400010:	004005dd 	.word	0x004005dd
  400014:	004005dd 	.word	0x004005dd
  400018:	004005dd 	.word	0x004005dd
	...
  40002c:	004005dd 	.word	0x004005dd
  400030:	004005dd 	.word	0x004005dd
  400034:	00000000 	.word	0x00000000
  400038:	004005dd 	.word	0x004005dd
  40003c:	004005dd 	.word	0x004005dd
  400040:	004005dd 	.word	0x004005dd
  400044:	004005dd 	.word	0x004005dd
  400048:	004005dd 	.word	0x004005dd
  40004c:	004005dd 	.word	0x004005dd
  400050:	004005dd 	.word	0x004005dd
  400054:	004005dd 	.word	0x004005dd
  400058:	004005dd 	.word	0x004005dd
  40005c:	004005dd 	.word	0x004005dd
  400060:	004005dd 	.word	0x004005dd
  400064:	004005dd 	.word	0x004005dd
  400068:	00000000 	.word	0x00000000
  40006c:	00400461 	.word	0x00400461
  400070:	00400475 	.word	0x00400475
  400074:	00400489 	.word	0x00400489
  400078:	004005dd 	.word	0x004005dd
  40007c:	004005dd 	.word	0x004005dd
	...
  400088:	004005dd 	.word	0x004005dd
  40008c:	004005dd 	.word	0x004005dd
  400090:	004005dd 	.word	0x004005dd
  400094:	004005dd 	.word	0x004005dd
  400098:	004005dd 	.word	0x004005dd
  40009c:	004005dd 	.word	0x004005dd
  4000a0:	004005dd 	.word	0x004005dd
  4000a4:	004005dd 	.word	0x004005dd
  4000a8:	004005dd 	.word	0x004005dd
  4000ac:	004005dd 	.word	0x004005dd
  4000b0:	004005dd 	.word	0x004005dd
  4000b4:	004005dd 	.word	0x004005dd
  4000b8:	004005dd 	.word	0x004005dd
  4000bc:	004005dd 	.word	0x004005dd
  4000c0:	004005dd 	.word	0x004005dd
  4000c4:	004005dd 	.word	0x004005dd
  4000c8:	004005dd 	.word	0x004005dd

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000430 	.word	0x20000430
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400a18 	.word	0x00400a18

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00400a18 	.word	0x00400a18
  40011c:	20000434 	.word	0x20000434
  400120:	00400a18 	.word	0x00400a18
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	480b      	ldr	r0, [pc, #44]	; (40018c <sysclk_init+0x64>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	004007a5 	.word	0x004007a5
  40016c:	00400505 	.word	0x00400505
  400170:	00400559 	.word	0x00400559
  400174:	00400569 	.word	0x00400569
  400178:	20073f01 	.word	0x20073f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400579 	.word	0x00400579
  400184:	0040049d 	.word	0x0040049d
  400188:	00400691 	.word	0x00400691
  40018c:	02dc6c00 	.word	0x02dc6c00

00400190 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400190:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400192:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400196:	4b0c      	ldr	r3, [pc, #48]	; (4001c8 <board_init+0x38>)
  400198:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40019a:	200b      	movs	r0, #11
  40019c:	4c0b      	ldr	r4, [pc, #44]	; (4001cc <board_init+0x3c>)
  40019e:	47a0      	blx	r4
  4001a0:	200c      	movs	r0, #12
  4001a2:	47a0      	blx	r4
  4001a4:	200d      	movs	r0, #13
  4001a6:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4001a8:	2013      	movs	r0, #19
  4001aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001ae:	4c08      	ldr	r4, [pc, #32]	; (4001d0 <board_init+0x40>)
  4001b0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4001b2:	2014      	movs	r0, #20
  4001b4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001b8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4001ba:	2023      	movs	r0, #35	; 0x23
  4001bc:	4905      	ldr	r1, [pc, #20]	; (4001d4 <board_init+0x44>)
  4001be:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  4001c0:	204c      	movs	r0, #76	; 0x4c
  4001c2:	4905      	ldr	r1, [pc, #20]	; (4001d8 <board_init+0x48>)
  4001c4:	47a0      	blx	r4
  4001c6:	bd10      	pop	{r4, pc}
  4001c8:	400e1450 	.word	0x400e1450
  4001cc:	00400589 	.word	0x00400589
  4001d0:	004002d5 	.word	0x004002d5
  4001d4:	28000079 	.word	0x28000079
  4001d8:	28000059 	.word	0x28000059

004001dc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4001dc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4001de:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4001e2:	d02f      	beq.n	400244 <pio_set_peripheral+0x68>
  4001e4:	d807      	bhi.n	4001f6 <pio_set_peripheral+0x1a>
  4001e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4001ea:	d014      	beq.n	400216 <pio_set_peripheral+0x3a>
  4001ec:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4001f0:	d01e      	beq.n	400230 <pio_set_peripheral+0x54>
  4001f2:	b939      	cbnz	r1, 400204 <pio_set_peripheral+0x28>
  4001f4:	4770      	bx	lr
  4001f6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4001fa:	d037      	beq.n	40026c <pio_set_peripheral+0x90>
  4001fc:	d804      	bhi.n	400208 <pio_set_peripheral+0x2c>
  4001fe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400202:	d029      	beq.n	400258 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400204:	6042      	str	r2, [r0, #4]
  400206:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400208:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40020c:	d02e      	beq.n	40026c <pio_set_peripheral+0x90>
  40020e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400212:	d02b      	beq.n	40026c <pio_set_peripheral+0x90>
  400214:	e7f6      	b.n	400204 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400216:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400218:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40021a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40021c:	43d3      	mvns	r3, r2
  40021e:	4021      	ands	r1, r4
  400220:	4019      	ands	r1, r3
  400222:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400224:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400226:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400228:	4021      	ands	r1, r4
  40022a:	400b      	ands	r3, r1
  40022c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40022e:	e01a      	b.n	400266 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400230:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400232:	4313      	orrs	r3, r2
  400234:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400236:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400238:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40023a:	400b      	ands	r3, r1
  40023c:	ea23 0302 	bic.w	r3, r3, r2
  400240:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400242:	e7df      	b.n	400204 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400244:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400246:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400248:	400b      	ands	r3, r1
  40024a:	ea23 0302 	bic.w	r3, r3, r2
  40024e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400250:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400252:	4313      	orrs	r3, r2
  400254:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400256:	e7d5      	b.n	400204 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400258:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40025a:	4313      	orrs	r3, r2
  40025c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40025e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400260:	4313      	orrs	r3, r2
  400262:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400264:	e7ce      	b.n	400204 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400266:	6042      	str	r2, [r0, #4]
}
  400268:	f85d 4b04 	ldr.w	r4, [sp], #4
  40026c:	4770      	bx	lr
  40026e:	bf00      	nop

00400270 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400270:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400272:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400276:	bf14      	ite	ne
  400278:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40027a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40027c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400280:	bf14      	ite	ne
  400282:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400284:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400286:	f012 0f02 	tst.w	r2, #2
  40028a:	d002      	beq.n	400292 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  40028c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400290:	e004      	b.n	40029c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400292:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400296:	bf18      	it	ne
  400298:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40029c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40029e:	6001      	str	r1, [r0, #0]
  4002a0:	4770      	bx	lr
  4002a2:	bf00      	nop

004002a4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4002a4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4002a6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4002a8:	9c01      	ldr	r4, [sp, #4]
  4002aa:	b10c      	cbz	r4, 4002b0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4002ac:	6641      	str	r1, [r0, #100]	; 0x64
  4002ae:	e000      	b.n	4002b2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4002b0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4002b2:	b10b      	cbz	r3, 4002b8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4002b4:	6501      	str	r1, [r0, #80]	; 0x50
  4002b6:	e000      	b.n	4002ba <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4002b8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4002ba:	b10a      	cbz	r2, 4002c0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4002bc:	6301      	str	r1, [r0, #48]	; 0x30
  4002be:	e000      	b.n	4002c2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4002c0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4002c2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4002c4:	6001      	str	r1, [r0, #0]
}
  4002c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ca:	4770      	bx	lr

004002cc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4002cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4002ce:	4770      	bx	lr

004002d0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4002d0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4002d2:	4770      	bx	lr

004002d4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4002d4:	b570      	push	{r4, r5, r6, lr}
  4002d6:	b082      	sub	sp, #8
  4002d8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4002da:	0943      	lsrs	r3, r0, #5
  4002dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4002e0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4002e4:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4002e6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4002ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4002ee:	d047      	beq.n	400380 <pio_configure_pin+0xac>
  4002f0:	d809      	bhi.n	400306 <pio_configure_pin+0x32>
  4002f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4002f6:	d021      	beq.n	40033c <pio_configure_pin+0x68>
  4002f8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4002fc:	d02f      	beq.n	40035e <pio_configure_pin+0x8a>
  4002fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400302:	d16f      	bne.n	4003e4 <pio_configure_pin+0x110>
  400304:	e009      	b.n	40031a <pio_configure_pin+0x46>
  400306:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40030a:	d055      	beq.n	4003b8 <pio_configure_pin+0xe4>
  40030c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400310:	d052      	beq.n	4003b8 <pio_configure_pin+0xe4>
  400312:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400316:	d044      	beq.n	4003a2 <pio_configure_pin+0xce>
  400318:	e064      	b.n	4003e4 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40031a:	f000 001f 	and.w	r0, r0, #31
  40031e:	2601      	movs	r6, #1
  400320:	4086      	lsls	r6, r0
  400322:	4620      	mov	r0, r4
  400324:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400328:	4632      	mov	r2, r6
  40032a:	4b30      	ldr	r3, [pc, #192]	; (4003ec <pio_configure_pin+0x118>)
  40032c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40032e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400332:	bf14      	ite	ne
  400334:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400336:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400338:	2001      	movs	r0, #1
  40033a:	e054      	b.n	4003e6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40033c:	f000 001f 	and.w	r0, r0, #31
  400340:	2601      	movs	r6, #1
  400342:	4086      	lsls	r6, r0
  400344:	4620      	mov	r0, r4
  400346:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40034a:	4632      	mov	r2, r6
  40034c:	4b27      	ldr	r3, [pc, #156]	; (4003ec <pio_configure_pin+0x118>)
  40034e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400350:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400354:	bf14      	ite	ne
  400356:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400358:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40035a:	2001      	movs	r0, #1
  40035c:	e043      	b.n	4003e6 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40035e:	f000 001f 	and.w	r0, r0, #31
  400362:	2601      	movs	r6, #1
  400364:	4086      	lsls	r6, r0
  400366:	4620      	mov	r0, r4
  400368:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40036c:	4632      	mov	r2, r6
  40036e:	4b1f      	ldr	r3, [pc, #124]	; (4003ec <pio_configure_pin+0x118>)
  400370:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400372:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400376:	bf14      	ite	ne
  400378:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40037a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40037c:	2001      	movs	r0, #1
  40037e:	e032      	b.n	4003e6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400380:	f000 001f 	and.w	r0, r0, #31
  400384:	2601      	movs	r6, #1
  400386:	4086      	lsls	r6, r0
  400388:	4620      	mov	r0, r4
  40038a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40038e:	4632      	mov	r2, r6
  400390:	4b16      	ldr	r3, [pc, #88]	; (4003ec <pio_configure_pin+0x118>)
  400392:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400394:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400398:	bf14      	ite	ne
  40039a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40039c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40039e:	2001      	movs	r0, #1
  4003a0:	e021      	b.n	4003e6 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4003a2:	f000 031f 	and.w	r3, r0, #31
  4003a6:	2601      	movs	r6, #1
  4003a8:	4620      	mov	r0, r4
  4003aa:	fa06 f103 	lsl.w	r1, r6, r3
  4003ae:	462a      	mov	r2, r5
  4003b0:	4b0f      	ldr	r3, [pc, #60]	; (4003f0 <pio_configure_pin+0x11c>)
  4003b2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4003b4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4003b6:	e016      	b.n	4003e6 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4003b8:	f000 031f 	and.w	r3, r0, #31
  4003bc:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4003be:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4003c2:	ea05 0106 	and.w	r1, r5, r6
  4003c6:	9100      	str	r1, [sp, #0]
  4003c8:	4620      	mov	r0, r4
  4003ca:	fa06 f103 	lsl.w	r1, r6, r3
  4003ce:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4003d2:	bf14      	ite	ne
  4003d4:	2200      	movne	r2, #0
  4003d6:	2201      	moveq	r2, #1
  4003d8:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4003dc:	4c05      	ldr	r4, [pc, #20]	; (4003f4 <pio_configure_pin+0x120>)
  4003de:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4003e0:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4003e2:	e000      	b.n	4003e6 <pio_configure_pin+0x112>

	default:
		return 0;
  4003e4:	2000      	movs	r0, #0
	}

	return 1;
}
  4003e6:	b002      	add	sp, #8
  4003e8:	bd70      	pop	{r4, r5, r6, pc}
  4003ea:	bf00      	nop
  4003ec:	004001dd 	.word	0x004001dd
  4003f0:	00400271 	.word	0x00400271
  4003f4:	004002a5 	.word	0x004002a5

004003f8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4003f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4003fc:	4681      	mov	r9, r0
  4003fe:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400400:	4b12      	ldr	r3, [pc, #72]	; (40044c <pio_handler_process+0x54>)
  400402:	4798      	blx	r3
  400404:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400406:	4648      	mov	r0, r9
  400408:	4b11      	ldr	r3, [pc, #68]	; (400450 <pio_handler_process+0x58>)
  40040a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40040c:	4005      	ands	r5, r0
  40040e:	d013      	beq.n	400438 <pio_handler_process+0x40>
  400410:	4c10      	ldr	r4, [pc, #64]	; (400454 <pio_handler_process+0x5c>)
  400412:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400416:	6823      	ldr	r3, [r4, #0]
  400418:	4543      	cmp	r3, r8
  40041a:	d108      	bne.n	40042e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40041c:	6861      	ldr	r1, [r4, #4]
  40041e:	4229      	tst	r1, r5
  400420:	d005      	beq.n	40042e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400422:	68e3      	ldr	r3, [r4, #12]
  400424:	4640      	mov	r0, r8
  400426:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400428:	6863      	ldr	r3, [r4, #4]
  40042a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40042e:	42b4      	cmp	r4, r6
  400430:	d002      	beq.n	400438 <pio_handler_process+0x40>
  400432:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400434:	2d00      	cmp	r5, #0
  400436:	d1ee      	bne.n	400416 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400438:	4b07      	ldr	r3, [pc, #28]	; (400458 <pio_handler_process+0x60>)
  40043a:	681b      	ldr	r3, [r3, #0]
  40043c:	b123      	cbz	r3, 400448 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40043e:	4b07      	ldr	r3, [pc, #28]	; (40045c <pio_handler_process+0x64>)
  400440:	681b      	ldr	r3, [r3, #0]
  400442:	b10b      	cbz	r3, 400448 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400444:	4648      	mov	r0, r9
  400446:	4798      	blx	r3
  400448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40044c:	004002cd 	.word	0x004002cd
  400450:	004002d1 	.word	0x004002d1
  400454:	20000450 	.word	0x20000450
  400458:	200004c0 	.word	0x200004c0
  40045c:	2000044c 	.word	0x2000044c

00400460 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400460:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400462:	4802      	ldr	r0, [pc, #8]	; (40046c <PIOA_Handler+0xc>)
  400464:	210b      	movs	r1, #11
  400466:	4b02      	ldr	r3, [pc, #8]	; (400470 <PIOA_Handler+0x10>)
  400468:	4798      	blx	r3
  40046a:	bd08      	pop	{r3, pc}
  40046c:	400e0e00 	.word	0x400e0e00
  400470:	004003f9 	.word	0x004003f9

00400474 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400474:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400476:	4802      	ldr	r0, [pc, #8]	; (400480 <PIOB_Handler+0xc>)
  400478:	210c      	movs	r1, #12
  40047a:	4b02      	ldr	r3, [pc, #8]	; (400484 <PIOB_Handler+0x10>)
  40047c:	4798      	blx	r3
  40047e:	bd08      	pop	{r3, pc}
  400480:	400e1000 	.word	0x400e1000
  400484:	004003f9 	.word	0x004003f9

00400488 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400488:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40048a:	4802      	ldr	r0, [pc, #8]	; (400494 <PIOC_Handler+0xc>)
  40048c:	210d      	movs	r1, #13
  40048e:	4b02      	ldr	r3, [pc, #8]	; (400498 <PIOC_Handler+0x10>)
  400490:	4798      	blx	r3
  400492:	bd08      	pop	{r3, pc}
  400494:	400e1200 	.word	0x400e1200
  400498:	004003f9 	.word	0x004003f9

0040049c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40049c:	4a18      	ldr	r2, [pc, #96]	; (400500 <pmc_switch_mck_to_pllack+0x64>)
  40049e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4004a4:	4318      	orrs	r0, r3
  4004a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004aa:	f013 0f08 	tst.w	r3, #8
  4004ae:	d003      	beq.n	4004b8 <pmc_switch_mck_to_pllack+0x1c>
  4004b0:	e009      	b.n	4004c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004b2:	3b01      	subs	r3, #1
  4004b4:	d103      	bne.n	4004be <pmc_switch_mck_to_pllack+0x22>
  4004b6:	e01e      	b.n	4004f6 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004bc:	4910      	ldr	r1, [pc, #64]	; (400500 <pmc_switch_mck_to_pllack+0x64>)
  4004be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004c0:	f012 0f08 	tst.w	r2, #8
  4004c4:	d0f5      	beq.n	4004b2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4004c6:	4a0e      	ldr	r2, [pc, #56]	; (400500 <pmc_switch_mck_to_pllack+0x64>)
  4004c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004ca:	f023 0303 	bic.w	r3, r3, #3
  4004ce:	f043 0302 	orr.w	r3, r3, #2
  4004d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004d4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4004d6:	f010 0008 	ands.w	r0, r0, #8
  4004da:	d004      	beq.n	4004e6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4004dc:	2000      	movs	r0, #0
  4004de:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004e0:	3b01      	subs	r3, #1
  4004e2:	d103      	bne.n	4004ec <pmc_switch_mck_to_pllack+0x50>
  4004e4:	e009      	b.n	4004fa <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004ea:	4905      	ldr	r1, [pc, #20]	; (400500 <pmc_switch_mck_to_pllack+0x64>)
  4004ec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004ee:	f012 0f08 	tst.w	r2, #8
  4004f2:	d0f5      	beq.n	4004e0 <pmc_switch_mck_to_pllack+0x44>
  4004f4:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4004f6:	2001      	movs	r0, #1
  4004f8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4004fa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4004fc:	4770      	bx	lr
  4004fe:	bf00      	nop
  400500:	400e0400 	.word	0x400e0400

00400504 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400504:	b138      	cbz	r0, 400516 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400506:	4911      	ldr	r1, [pc, #68]	; (40054c <pmc_switch_mainck_to_xtal+0x48>)
  400508:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40050a:	4a11      	ldr	r2, [pc, #68]	; (400550 <pmc_switch_mainck_to_xtal+0x4c>)
  40050c:	401a      	ands	r2, r3
  40050e:	4b11      	ldr	r3, [pc, #68]	; (400554 <pmc_switch_mainck_to_xtal+0x50>)
  400510:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400512:	620b      	str	r3, [r1, #32]
  400514:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400516:	4a0d      	ldr	r2, [pc, #52]	; (40054c <pmc_switch_mainck_to_xtal+0x48>)
  400518:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40051a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40051e:	f023 0303 	bic.w	r3, r3, #3
  400522:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400526:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40052a:	0209      	lsls	r1, r1, #8
  40052c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40052e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400530:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400532:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400534:	f013 0f01 	tst.w	r3, #1
  400538:	d0fb      	beq.n	400532 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40053a:	4a04      	ldr	r2, [pc, #16]	; (40054c <pmc_switch_mainck_to_xtal+0x48>)
  40053c:	6a13      	ldr	r3, [r2, #32]
  40053e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400546:	6213      	str	r3, [r2, #32]
  400548:	4770      	bx	lr
  40054a:	bf00      	nop
  40054c:	400e0400 	.word	0x400e0400
  400550:	fec8fffc 	.word	0xfec8fffc
  400554:	01370002 	.word	0x01370002

00400558 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400558:	4b02      	ldr	r3, [pc, #8]	; (400564 <pmc_osc_is_ready_mainck+0xc>)
  40055a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40055c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400560:	4770      	bx	lr
  400562:	bf00      	nop
  400564:	400e0400 	.word	0x400e0400

00400568 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400568:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40056c:	4b01      	ldr	r3, [pc, #4]	; (400574 <pmc_disable_pllack+0xc>)
  40056e:	629a      	str	r2, [r3, #40]	; 0x28
  400570:	4770      	bx	lr
  400572:	bf00      	nop
  400574:	400e0400 	.word	0x400e0400

00400578 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400578:	4b02      	ldr	r3, [pc, #8]	; (400584 <pmc_is_locked_pllack+0xc>)
  40057a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40057c:	f000 0002 	and.w	r0, r0, #2
  400580:	4770      	bx	lr
  400582:	bf00      	nop
  400584:	400e0400 	.word	0x400e0400

00400588 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400588:	2822      	cmp	r0, #34	; 0x22
  40058a:	d81e      	bhi.n	4005ca <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40058c:	281f      	cmp	r0, #31
  40058e:	d80c      	bhi.n	4005aa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400590:	4b11      	ldr	r3, [pc, #68]	; (4005d8 <pmc_enable_periph_clk+0x50>)
  400592:	699a      	ldr	r2, [r3, #24]
  400594:	2301      	movs	r3, #1
  400596:	4083      	lsls	r3, r0
  400598:	401a      	ands	r2, r3
  40059a:	4293      	cmp	r3, r2
  40059c:	d017      	beq.n	4005ce <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40059e:	2301      	movs	r3, #1
  4005a0:	4083      	lsls	r3, r0
  4005a2:	4a0d      	ldr	r2, [pc, #52]	; (4005d8 <pmc_enable_periph_clk+0x50>)
  4005a4:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005a6:	2000      	movs	r0, #0
  4005a8:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4005aa:	4b0b      	ldr	r3, [pc, #44]	; (4005d8 <pmc_enable_periph_clk+0x50>)
  4005ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4005b0:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4005b2:	2301      	movs	r3, #1
  4005b4:	4083      	lsls	r3, r0
  4005b6:	401a      	ands	r2, r3
  4005b8:	4293      	cmp	r3, r2
  4005ba:	d00a      	beq.n	4005d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4005bc:	2301      	movs	r3, #1
  4005be:	4083      	lsls	r3, r0
  4005c0:	4a05      	ldr	r2, [pc, #20]	; (4005d8 <pmc_enable_periph_clk+0x50>)
  4005c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4005c6:	2000      	movs	r0, #0
  4005c8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4005ca:	2001      	movs	r0, #1
  4005cc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005ce:	2000      	movs	r0, #0
  4005d0:	4770      	bx	lr
  4005d2:	2000      	movs	r0, #0
}
  4005d4:	4770      	bx	lr
  4005d6:	bf00      	nop
  4005d8:	400e0400 	.word	0x400e0400

004005dc <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4005dc:	e7fe      	b.n	4005dc <Dummy_Handler>
  4005de:	bf00      	nop

004005e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4005e0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4005e2:	4b20      	ldr	r3, [pc, #128]	; (400664 <Reset_Handler+0x84>)
  4005e4:	4a20      	ldr	r2, [pc, #128]	; (400668 <Reset_Handler+0x88>)
  4005e6:	429a      	cmp	r2, r3
  4005e8:	d913      	bls.n	400612 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4005ea:	4b20      	ldr	r3, [pc, #128]	; (40066c <Reset_Handler+0x8c>)
  4005ec:	4a1d      	ldr	r2, [pc, #116]	; (400664 <Reset_Handler+0x84>)
  4005ee:	429a      	cmp	r2, r3
  4005f0:	d21f      	bcs.n	400632 <Reset_Handler+0x52>
  4005f2:	4611      	mov	r1, r2
  4005f4:	3204      	adds	r2, #4
  4005f6:	3303      	adds	r3, #3
  4005f8:	1a9b      	subs	r3, r3, r2
  4005fa:	f023 0303 	bic.w	r3, r3, #3
  4005fe:	3304      	adds	r3, #4
  400600:	4a19      	ldr	r2, [pc, #100]	; (400668 <Reset_Handler+0x88>)
  400602:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400604:	f852 0b04 	ldr.w	r0, [r2], #4
  400608:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40060c:	429a      	cmp	r2, r3
  40060e:	d1f9      	bne.n	400604 <Reset_Handler+0x24>
  400610:	e00f      	b.n	400632 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400612:	4b14      	ldr	r3, [pc, #80]	; (400664 <Reset_Handler+0x84>)
  400614:	4a14      	ldr	r2, [pc, #80]	; (400668 <Reset_Handler+0x88>)
  400616:	429a      	cmp	r2, r3
  400618:	d20b      	bcs.n	400632 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40061a:	4b14      	ldr	r3, [pc, #80]	; (40066c <Reset_Handler+0x8c>)
  40061c:	4a11      	ldr	r2, [pc, #68]	; (400664 <Reset_Handler+0x84>)
  40061e:	1a9a      	subs	r2, r3, r2
  400620:	4813      	ldr	r0, [pc, #76]	; (400670 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400622:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400624:	b12a      	cbz	r2, 400632 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  400626:	f851 2904 	ldr.w	r2, [r1], #-4
  40062a:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40062e:	4281      	cmp	r1, r0
  400630:	d1f9      	bne.n	400626 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400632:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400634:	4b0f      	ldr	r3, [pc, #60]	; (400674 <Reset_Handler+0x94>)
  400636:	4a10      	ldr	r2, [pc, #64]	; (400678 <Reset_Handler+0x98>)
  400638:	429a      	cmp	r2, r3
  40063a:	d20b      	bcs.n	400654 <Reset_Handler+0x74>
  40063c:	1d13      	adds	r3, r2, #4
  40063e:	4a0f      	ldr	r2, [pc, #60]	; (40067c <Reset_Handler+0x9c>)
  400640:	1ad2      	subs	r2, r2, r3
  400642:	f022 0203 	bic.w	r2, r2, #3
  400646:	441a      	add	r2, r3
  400648:	3b04      	subs	r3, #4
		*pDest++ = 0;
  40064a:	2100      	movs	r1, #0
  40064c:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400650:	4293      	cmp	r3, r2
  400652:	d1fb      	bne.n	40064c <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400654:	4b0a      	ldr	r3, [pc, #40]	; (400680 <Reset_Handler+0xa0>)
  400656:	4a0b      	ldr	r2, [pc, #44]	; (400684 <Reset_Handler+0xa4>)
  400658:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40065a:	4b0b      	ldr	r3, [pc, #44]	; (400688 <Reset_Handler+0xa8>)
  40065c:	4798      	blx	r3

	/* Branch to main function */
	main();
  40065e:	4b0b      	ldr	r3, [pc, #44]	; (40068c <Reset_Handler+0xac>)
  400660:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  400662:	e7fe      	b.n	400662 <Reset_Handler+0x82>
  400664:	20000000 	.word	0x20000000
  400668:	00400a18 	.word	0x00400a18
  40066c:	20000430 	.word	0x20000430
  400670:	00400a14 	.word	0x00400a14
  400674:	200004c4 	.word	0x200004c4
  400678:	20000430 	.word	0x20000430
  40067c:	200004c7 	.word	0x200004c7
  400680:	e000ed00 	.word	0xe000ed00
  400684:	00400000 	.word	0x00400000
  400688:	004008ad 	.word	0x004008ad
  40068c:	00400839 	.word	0x00400839

00400690 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400690:	4b3d      	ldr	r3, [pc, #244]	; (400788 <SystemCoreClockUpdate+0xf8>)
  400692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400694:	f003 0303 	and.w	r3, r3, #3
  400698:	2b03      	cmp	r3, #3
  40069a:	d85d      	bhi.n	400758 <SystemCoreClockUpdate+0xc8>
  40069c:	e8df f003 	tbb	[pc, r3]
  4006a0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4006a4:	4b39      	ldr	r3, [pc, #228]	; (40078c <SystemCoreClockUpdate+0xfc>)
  4006a6:	695b      	ldr	r3, [r3, #20]
  4006a8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4006ac:	bf14      	ite	ne
  4006ae:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4006b2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4006b6:	4b36      	ldr	r3, [pc, #216]	; (400790 <SystemCoreClockUpdate+0x100>)
  4006b8:	601a      	str	r2, [r3, #0]
  4006ba:	e04d      	b.n	400758 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4006bc:	4b32      	ldr	r3, [pc, #200]	; (400788 <SystemCoreClockUpdate+0xf8>)
  4006be:	6a1b      	ldr	r3, [r3, #32]
  4006c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4006c4:	d003      	beq.n	4006ce <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4006c6:	4a33      	ldr	r2, [pc, #204]	; (400794 <SystemCoreClockUpdate+0x104>)
  4006c8:	4b31      	ldr	r3, [pc, #196]	; (400790 <SystemCoreClockUpdate+0x100>)
  4006ca:	601a      	str	r2, [r3, #0]
  4006cc:	e044      	b.n	400758 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4006ce:	4a32      	ldr	r2, [pc, #200]	; (400798 <SystemCoreClockUpdate+0x108>)
  4006d0:	4b2f      	ldr	r3, [pc, #188]	; (400790 <SystemCoreClockUpdate+0x100>)
  4006d2:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4006d4:	4b2c      	ldr	r3, [pc, #176]	; (400788 <SystemCoreClockUpdate+0xf8>)
  4006d6:	6a1b      	ldr	r3, [r3, #32]
  4006d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006dc:	2b10      	cmp	r3, #16
  4006de:	d002      	beq.n	4006e6 <SystemCoreClockUpdate+0x56>
  4006e0:	2b20      	cmp	r3, #32
  4006e2:	d004      	beq.n	4006ee <SystemCoreClockUpdate+0x5e>
  4006e4:	e038      	b.n	400758 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4006e6:	4a2d      	ldr	r2, [pc, #180]	; (40079c <SystemCoreClockUpdate+0x10c>)
  4006e8:	4b29      	ldr	r3, [pc, #164]	; (400790 <SystemCoreClockUpdate+0x100>)
  4006ea:	601a      	str	r2, [r3, #0]
			break;
  4006ec:	e034      	b.n	400758 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4006ee:	4a29      	ldr	r2, [pc, #164]	; (400794 <SystemCoreClockUpdate+0x104>)
  4006f0:	4b27      	ldr	r3, [pc, #156]	; (400790 <SystemCoreClockUpdate+0x100>)
  4006f2:	601a      	str	r2, [r3, #0]
			break;
  4006f4:	e030      	b.n	400758 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4006f6:	4b24      	ldr	r3, [pc, #144]	; (400788 <SystemCoreClockUpdate+0xf8>)
  4006f8:	6a1b      	ldr	r3, [r3, #32]
  4006fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4006fe:	d003      	beq.n	400708 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400700:	4a24      	ldr	r2, [pc, #144]	; (400794 <SystemCoreClockUpdate+0x104>)
  400702:	4b23      	ldr	r3, [pc, #140]	; (400790 <SystemCoreClockUpdate+0x100>)
  400704:	601a      	str	r2, [r3, #0]
  400706:	e012      	b.n	40072e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400708:	4a23      	ldr	r2, [pc, #140]	; (400798 <SystemCoreClockUpdate+0x108>)
  40070a:	4b21      	ldr	r3, [pc, #132]	; (400790 <SystemCoreClockUpdate+0x100>)
  40070c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40070e:	4b1e      	ldr	r3, [pc, #120]	; (400788 <SystemCoreClockUpdate+0xf8>)
  400710:	6a1b      	ldr	r3, [r3, #32]
  400712:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400716:	2b10      	cmp	r3, #16
  400718:	d002      	beq.n	400720 <SystemCoreClockUpdate+0x90>
  40071a:	2b20      	cmp	r3, #32
  40071c:	d004      	beq.n	400728 <SystemCoreClockUpdate+0x98>
  40071e:	e006      	b.n	40072e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400720:	4a1e      	ldr	r2, [pc, #120]	; (40079c <SystemCoreClockUpdate+0x10c>)
  400722:	4b1b      	ldr	r3, [pc, #108]	; (400790 <SystemCoreClockUpdate+0x100>)
  400724:	601a      	str	r2, [r3, #0]
					break;
  400726:	e002      	b.n	40072e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400728:	4a1a      	ldr	r2, [pc, #104]	; (400794 <SystemCoreClockUpdate+0x104>)
  40072a:	4b19      	ldr	r3, [pc, #100]	; (400790 <SystemCoreClockUpdate+0x100>)
  40072c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40072e:	4b16      	ldr	r3, [pc, #88]	; (400788 <SystemCoreClockUpdate+0xf8>)
  400730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400732:	f003 0303 	and.w	r3, r3, #3
  400736:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400738:	4a13      	ldr	r2, [pc, #76]	; (400788 <SystemCoreClockUpdate+0xf8>)
  40073a:	bf07      	ittee	eq
  40073c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40073e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400740:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400742:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400744:	4812      	ldr	r0, [pc, #72]	; (400790 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400746:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40074a:	6803      	ldr	r3, [r0, #0]
  40074c:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400750:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400752:	fbb3 f3f2 	udiv	r3, r3, r2
  400756:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400758:	4b0b      	ldr	r3, [pc, #44]	; (400788 <SystemCoreClockUpdate+0xf8>)
  40075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40075c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400760:	2b70      	cmp	r3, #112	; 0x70
  400762:	d107      	bne.n	400774 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400764:	4a0a      	ldr	r2, [pc, #40]	; (400790 <SystemCoreClockUpdate+0x100>)
  400766:	6813      	ldr	r3, [r2, #0]
  400768:	490d      	ldr	r1, [pc, #52]	; (4007a0 <SystemCoreClockUpdate+0x110>)
  40076a:	fba1 1303 	umull	r1, r3, r1, r3
  40076e:	085b      	lsrs	r3, r3, #1
  400770:	6013      	str	r3, [r2, #0]
  400772:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400774:	4b04      	ldr	r3, [pc, #16]	; (400788 <SystemCoreClockUpdate+0xf8>)
  400776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400778:	4905      	ldr	r1, [pc, #20]	; (400790 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40077a:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40077e:	680b      	ldr	r3, [r1, #0]
  400780:	40d3      	lsrs	r3, r2
  400782:	600b      	str	r3, [r1, #0]
  400784:	4770      	bx	lr
  400786:	bf00      	nop
  400788:	400e0400 	.word	0x400e0400
  40078c:	400e1410 	.word	0x400e1410
  400790:	20000000 	.word	0x20000000
  400794:	00b71b00 	.word	0x00b71b00
  400798:	003d0900 	.word	0x003d0900
  40079c:	007a1200 	.word	0x007a1200
  4007a0:	aaaaaaab 	.word	0xaaaaaaab

004007a4 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4007a4:	4b1a      	ldr	r3, [pc, #104]	; (400810 <system_init_flash+0x6c>)
  4007a6:	4298      	cmp	r0, r3
  4007a8:	d807      	bhi.n	4007ba <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4007aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4007ae:	4a19      	ldr	r2, [pc, #100]	; (400814 <system_init_flash+0x70>)
  4007b0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4007b2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4007b6:	6013      	str	r3, [r2, #0]
  4007b8:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4007ba:	4b17      	ldr	r3, [pc, #92]	; (400818 <system_init_flash+0x74>)
  4007bc:	4298      	cmp	r0, r3
  4007be:	d806      	bhi.n	4007ce <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4007c0:	4b16      	ldr	r3, [pc, #88]	; (40081c <system_init_flash+0x78>)
  4007c2:	4a14      	ldr	r2, [pc, #80]	; (400814 <system_init_flash+0x70>)
  4007c4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4007c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4007ca:	6013      	str	r3, [r2, #0]
  4007cc:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4007ce:	4b14      	ldr	r3, [pc, #80]	; (400820 <system_init_flash+0x7c>)
  4007d0:	4298      	cmp	r0, r3
  4007d2:	d806      	bhi.n	4007e2 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4007d4:	4b13      	ldr	r3, [pc, #76]	; (400824 <system_init_flash+0x80>)
  4007d6:	4a0f      	ldr	r2, [pc, #60]	; (400814 <system_init_flash+0x70>)
  4007d8:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4007da:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4007de:	6013      	str	r3, [r2, #0]
  4007e0:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4007e2:	4b11      	ldr	r3, [pc, #68]	; (400828 <system_init_flash+0x84>)
  4007e4:	4298      	cmp	r0, r3
  4007e6:	d806      	bhi.n	4007f6 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4007e8:	4b10      	ldr	r3, [pc, #64]	; (40082c <system_init_flash+0x88>)
  4007ea:	4a0a      	ldr	r2, [pc, #40]	; (400814 <system_init_flash+0x70>)
  4007ec:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4007ee:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4007f2:	6013      	str	r3, [r2, #0]
  4007f4:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4007f6:	4b0e      	ldr	r3, [pc, #56]	; (400830 <system_init_flash+0x8c>)
  4007f8:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4007fa:	bf94      	ite	ls
  4007fc:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400800:	4b0c      	ldrhi	r3, [pc, #48]	; (400834 <system_init_flash+0x90>)
  400802:	4a04      	ldr	r2, [pc, #16]	; (400814 <system_init_flash+0x70>)
  400804:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400806:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40080a:	6013      	str	r3, [r2, #0]
  40080c:	4770      	bx	lr
  40080e:	bf00      	nop
  400810:	01312cff 	.word	0x01312cff
  400814:	400e0a00 	.word	0x400e0a00
  400818:	026259ff 	.word	0x026259ff
  40081c:	04000100 	.word	0x04000100
  400820:	039386ff 	.word	0x039386ff
  400824:	04000200 	.word	0x04000200
  400828:	04c4b3ff 	.word	0x04c4b3ff
  40082c:	04000300 	.word	0x04000300
  400830:	05f5e0ff 	.word	0x05f5e0ff
  400834:	04000500 	.word	0x04000500

00400838 <main>:
 */
#include <asf.h>
#include "conf_example.h"

int main(void)
{
  400838:	b508      	push	{r3, lr}
	sysclk_init();
  40083a:	4b18      	ldr	r3, [pc, #96]	; (40089c <main+0x64>)
  40083c:	4798      	blx	r3
	board_init();
  40083e:	4b18      	ldr	r3, [pc, #96]	; (4008a0 <main+0x68>)
  400840:	4798      	blx	r3
  400842:	200b      	movs	r0, #11
  400844:	4c17      	ldr	r4, [pc, #92]	; (4008a4 <main+0x6c>)
  400846:	47a0      	blx	r4
  400848:	200c      	movs	r0, #12
  40084a:	47a0      	blx	r4
  40084c:	200d      	movs	r0, #13
  40084e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400850:	4b15      	ldr	r3, [pc, #84]	; (4008a8 <main+0x70>)
  400852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400856:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400858:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40085c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400860:	2208      	movs	r2, #8
  400862:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400864:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400868:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40086a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40086e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400870:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400878:	f022 0208 	bic.w	r2, r2, #8
  40087c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40087e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400880:	f022 0208 	bic.w	r2, r2, #8
  400884:	675a      	str	r2, [r3, #116]	; 0x74
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400886:	4618      	mov	r0, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400888:	4907      	ldr	r1, [pc, #28]	; (4008a8 <main+0x70>)
  40088a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40088e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  400890:	f013 0f08 	tst.w	r3, #8
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400894:	bf14      	ite	ne
  400896:	630a      	strne	r2, [r1, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400898:	634a      	streq	r2, [r1, #52]	; 0x34
  40089a:	e7f8      	b.n	40088e <main+0x56>
  40089c:	00400129 	.word	0x00400129
  4008a0:	00400191 	.word	0x00400191
  4008a4:	00400589 	.word	0x00400589
  4008a8:	400e0e00 	.word	0x400e0e00

004008ac <__libc_init_array>:
  4008ac:	b570      	push	{r4, r5, r6, lr}
  4008ae:	4e0f      	ldr	r6, [pc, #60]	; (4008ec <__libc_init_array+0x40>)
  4008b0:	4d0f      	ldr	r5, [pc, #60]	; (4008f0 <__libc_init_array+0x44>)
  4008b2:	1b76      	subs	r6, r6, r5
  4008b4:	10b6      	asrs	r6, r6, #2
  4008b6:	bf18      	it	ne
  4008b8:	2400      	movne	r4, #0
  4008ba:	d005      	beq.n	4008c8 <__libc_init_array+0x1c>
  4008bc:	3401      	adds	r4, #1
  4008be:	f855 3b04 	ldr.w	r3, [r5], #4
  4008c2:	4798      	blx	r3
  4008c4:	42a6      	cmp	r6, r4
  4008c6:	d1f9      	bne.n	4008bc <__libc_init_array+0x10>
  4008c8:	4e0a      	ldr	r6, [pc, #40]	; (4008f4 <__libc_init_array+0x48>)
  4008ca:	4d0b      	ldr	r5, [pc, #44]	; (4008f8 <__libc_init_array+0x4c>)
  4008cc:	1b76      	subs	r6, r6, r5
  4008ce:	f000 f891 	bl	4009f4 <_init>
  4008d2:	10b6      	asrs	r6, r6, #2
  4008d4:	bf18      	it	ne
  4008d6:	2400      	movne	r4, #0
  4008d8:	d006      	beq.n	4008e8 <__libc_init_array+0x3c>
  4008da:	3401      	adds	r4, #1
  4008dc:	f855 3b04 	ldr.w	r3, [r5], #4
  4008e0:	4798      	blx	r3
  4008e2:	42a6      	cmp	r6, r4
  4008e4:	d1f9      	bne.n	4008da <__libc_init_array+0x2e>
  4008e6:	bd70      	pop	{r4, r5, r6, pc}
  4008e8:	bd70      	pop	{r4, r5, r6, pc}
  4008ea:	bf00      	nop
  4008ec:	00400a00 	.word	0x00400a00
  4008f0:	00400a00 	.word	0x00400a00
  4008f4:	00400a08 	.word	0x00400a08
  4008f8:	00400a00 	.word	0x00400a00

004008fc <register_fini>:
  4008fc:	4b02      	ldr	r3, [pc, #8]	; (400908 <register_fini+0xc>)
  4008fe:	b113      	cbz	r3, 400906 <register_fini+0xa>
  400900:	4802      	ldr	r0, [pc, #8]	; (40090c <register_fini+0x10>)
  400902:	f000 b805 	b.w	400910 <atexit>
  400906:	4770      	bx	lr
  400908:	00000000 	.word	0x00000000
  40090c:	0040091d 	.word	0x0040091d

00400910 <atexit>:
  400910:	4601      	mov	r1, r0
  400912:	2000      	movs	r0, #0
  400914:	4602      	mov	r2, r0
  400916:	4603      	mov	r3, r0
  400918:	f000 b816 	b.w	400948 <__register_exitproc>

0040091c <__libc_fini_array>:
  40091c:	b538      	push	{r3, r4, r5, lr}
  40091e:	4b08      	ldr	r3, [pc, #32]	; (400940 <__libc_fini_array+0x24>)
  400920:	4d08      	ldr	r5, [pc, #32]	; (400944 <__libc_fini_array+0x28>)
  400922:	1aed      	subs	r5, r5, r3
  400924:	10ac      	asrs	r4, r5, #2
  400926:	bf18      	it	ne
  400928:	18ed      	addne	r5, r5, r3
  40092a:	d005      	beq.n	400938 <__libc_fini_array+0x1c>
  40092c:	3c01      	subs	r4, #1
  40092e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400932:	4798      	blx	r3
  400934:	2c00      	cmp	r4, #0
  400936:	d1f9      	bne.n	40092c <__libc_fini_array+0x10>
  400938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40093c:	f000 b864 	b.w	400a08 <_fini>
  400940:	00400a14 	.word	0x00400a14
  400944:	00400a18 	.word	0x00400a18

00400948 <__register_exitproc>:
  400948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40094c:	4c25      	ldr	r4, [pc, #148]	; (4009e4 <__register_exitproc+0x9c>)
  40094e:	6825      	ldr	r5, [r4, #0]
  400950:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400954:	4606      	mov	r6, r0
  400956:	4688      	mov	r8, r1
  400958:	4692      	mov	sl, r2
  40095a:	4699      	mov	r9, r3
  40095c:	b3cc      	cbz	r4, 4009d2 <__register_exitproc+0x8a>
  40095e:	6860      	ldr	r0, [r4, #4]
  400960:	281f      	cmp	r0, #31
  400962:	dc18      	bgt.n	400996 <__register_exitproc+0x4e>
  400964:	1c43      	adds	r3, r0, #1
  400966:	b17e      	cbz	r6, 400988 <__register_exitproc+0x40>
  400968:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40096c:	2101      	movs	r1, #1
  40096e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400972:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  400976:	fa01 f200 	lsl.w	r2, r1, r0
  40097a:	4317      	orrs	r7, r2
  40097c:	2e02      	cmp	r6, #2
  40097e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400982:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400986:	d01e      	beq.n	4009c6 <__register_exitproc+0x7e>
  400988:	3002      	adds	r0, #2
  40098a:	6063      	str	r3, [r4, #4]
  40098c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400990:	2000      	movs	r0, #0
  400992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400996:	4b14      	ldr	r3, [pc, #80]	; (4009e8 <__register_exitproc+0xa0>)
  400998:	b303      	cbz	r3, 4009dc <__register_exitproc+0x94>
  40099a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40099e:	f3af 8000 	nop.w
  4009a2:	4604      	mov	r4, r0
  4009a4:	b1d0      	cbz	r0, 4009dc <__register_exitproc+0x94>
  4009a6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4009aa:	2700      	movs	r7, #0
  4009ac:	e880 0088 	stmia.w	r0, {r3, r7}
  4009b0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4009b4:	4638      	mov	r0, r7
  4009b6:	2301      	movs	r3, #1
  4009b8:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4009bc:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4009c0:	2e00      	cmp	r6, #0
  4009c2:	d0e1      	beq.n	400988 <__register_exitproc+0x40>
  4009c4:	e7d0      	b.n	400968 <__register_exitproc+0x20>
  4009c6:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4009ca:	430a      	orrs	r2, r1
  4009cc:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4009d0:	e7da      	b.n	400988 <__register_exitproc+0x40>
  4009d2:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4009d6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4009da:	e7c0      	b.n	40095e <__register_exitproc+0x16>
  4009dc:	f04f 30ff 	mov.w	r0, #4294967295
  4009e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4009e4:	004009f0 	.word	0x004009f0
  4009e8:	00000000 	.word	0x00000000
  4009ec:	00000043 	.word	0x00000043

004009f0 <_global_impure_ptr>:
  4009f0:	20000008                                ... 

004009f4 <_init>:
  4009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009f6:	bf00      	nop
  4009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4009fa:	bc08      	pop	{r3}
  4009fc:	469e      	mov	lr, r3
  4009fe:	4770      	bx	lr

00400a00 <__init_array_start>:
  400a00:	004008fd 	.word	0x004008fd

00400a04 <__frame_dummy_init_array_entry>:
  400a04:	004000f1                                ..@.

00400a08 <_fini>:
  400a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a0a:	bf00      	nop
  400a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400a0e:	bc08      	pop	{r3}
  400a10:	469e      	mov	lr, r3
  400a12:	4770      	bx	lr

00400a14 <__fini_array_start>:
  400a14:	004000cd 	.word	0x004000cd
