
DACC_SINEWAVE_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004448  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404448  00404448  0000c448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  00404450  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000ec  2000086c  00404cbc  0001086c  2**2
                  ALLOC
  4 .stack        00003000  20000958  00404da8  0001086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0001086c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010896  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a299  00000000  00000000  000108f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c70  00000000  00000000  0001ab8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003fee  00000000  00000000  0001c7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000948  00000000  00000000  000207e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000898  00000000  00000000  00021130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012f1f  00000000  00000000  000219c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a02b  00000000  00000000  000348e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052909  00000000  00000000  0003e912  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000020ac  00000000  00000000  0009121c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003958 	.word	0x20003958
  400004:	00400881 	.word	0x00400881
  400008:	0040087d 	.word	0x0040087d
  40000c:	0040087d 	.word	0x0040087d
  400010:	0040087d 	.word	0x0040087d
  400014:	0040087d 	.word	0x0040087d
  400018:	0040087d 	.word	0x0040087d
	...
  40002c:	0040087d 	.word	0x0040087d
  400030:	0040087d 	.word	0x0040087d
  400034:	00000000 	.word	0x00000000
  400038:	0040087d 	.word	0x0040087d
  40003c:	00400da5 	.word	0x00400da5
  400040:	0040087d 	.word	0x0040087d
  400044:	0040087d 	.word	0x0040087d
  400048:	0040087d 	.word	0x0040087d
  40004c:	0040087d 	.word	0x0040087d
  400050:	0040087d 	.word	0x0040087d
  400054:	0040087d 	.word	0x0040087d
  400058:	0040087d 	.word	0x0040087d
  40005c:	0040087d 	.word	0x0040087d
  400060:	0040087d 	.word	0x0040087d
  400064:	0040087d 	.word	0x0040087d
  400068:	00000000 	.word	0x00000000
  40006c:	00400679 	.word	0x00400679
  400070:	0040068d 	.word	0x0040068d
  400074:	004006a1 	.word	0x004006a1
  400078:	0040087d 	.word	0x0040087d
  40007c:	0040087d 	.word	0x0040087d
	...
  400088:	0040087d 	.word	0x0040087d
  40008c:	0040087d 	.word	0x0040087d
  400090:	0040087d 	.word	0x0040087d
  400094:	0040087d 	.word	0x0040087d
  400098:	0040087d 	.word	0x0040087d
  40009c:	0040087d 	.word	0x0040087d
  4000a0:	0040087d 	.word	0x0040087d
  4000a4:	0040087d 	.word	0x0040087d
  4000a8:	0040087d 	.word	0x0040087d
  4000ac:	0040087d 	.word	0x0040087d
  4000b0:	0040087d 	.word	0x0040087d
  4000b4:	0040087d 	.word	0x0040087d
  4000b8:	0040087d 	.word	0x0040087d
  4000bc:	0040087d 	.word	0x0040087d
  4000c0:	0040087d 	.word	0x0040087d
  4000c4:	0040087d 	.word	0x0040087d
  4000c8:	0040087d 	.word	0x0040087d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000086c 	.word	0x2000086c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404450 	.word	0x00404450

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00404450 	.word	0x00404450
  40011c:	20000870 	.word	0x20000870
  400120:	00404450 	.word	0x00404450
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400a45 	.word	0x00400a45
  40016c:	0040071d 	.word	0x0040071d
  400170:	00400771 	.word	0x00400771
  400174:	00400781 	.word	0x00400781
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400791 	.word	0x00400791
  400184:	004006b5 	.word	0x004006b5
  400188:	00400931 	.word	0x00400931

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	2000094c 	.word	0x2000094c
  4001c4:	20000944 	.word	0x20000944

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000948 	.word	0x20000948
  400214:	2000094c 	.word	0x2000094c

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b10      	ldr	r3, [pc, #64]	; (400260 <board_init+0x48>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c0f      	ldr	r4, [pc, #60]	; (400264 <board_init+0x4c>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	2013      	movs	r0, #19
  400232:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400236:	4c0c      	ldr	r4, [pc, #48]	; (400268 <board_init+0x50>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	2014      	movs	r0, #20
  40023c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	2023      	movs	r0, #35	; 0x23
  400244:	4909      	ldr	r1, [pc, #36]	; (40026c <board_init+0x54>)
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	204c      	movs	r0, #76	; 0x4c
  40024a:	4909      	ldr	r1, [pc, #36]	; (400270 <board_init+0x58>)
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40024e:	4809      	ldr	r0, [pc, #36]	; (400274 <board_init+0x5c>)
  400250:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400258:	4b07      	ldr	r3, [pc, #28]	; (400278 <board_init+0x60>)
  40025a:	4798      	blx	r3
  40025c:	bd10      	pop	{r4, pc}
  40025e:	bf00      	nop
  400260:	400e1450 	.word	0x400e1450
  400264:	004007a1 	.word	0x004007a1
  400268:	00400411 	.word	0x00400411
  40026c:	28000079 	.word	0x28000079
  400270:	28000059 	.word	0x28000059
  400274:	400e0e00 	.word	0x400e0e00
  400278:	00400535 	.word	0x00400535

0040027c <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  40027c:	2301      	movs	r3, #1
  40027e:	6003      	str	r3, [r0, #0]
  400280:	4770      	bx	lr
  400282:	bf00      	nop

00400284 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  400284:	b141      	cbz	r1, 400298 <dacc_set_transfer_mode+0x14>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400286:	6843      	ldr	r3, [r0, #4]
  400288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40028c:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  40028e:	6843      	ldr	r3, [r0, #4]
  400290:	f043 0310 	orr.w	r3, r3, #16
  400294:	6043      	str	r3, [r0, #4]
  400296:	e007      	b.n	4002a8 <dacc_set_transfer_mode+0x24>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400298:	6843      	ldr	r3, [r0, #4]
  40029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40029e:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  4002a0:	6843      	ldr	r3, [r0, #4]
  4002a2:	f023 0310 	bic.w	r3, r3, #16
  4002a6:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4002a8:	2000      	movs	r0, #0
  4002aa:	4770      	bx	lr

004002ac <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  4002ac:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4002ae:	4770      	bx	lr

004002b0 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4002b0:	6201      	str	r1, [r0, #32]
  4002b2:	4770      	bx	lr

004002b4 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4002b4:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4002b6:	2901      	cmp	r1, #1
  4002b8:	d806      	bhi.n	4002c8 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
  4002ba:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4002be:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4002c2:	6041      	str	r1, [r0, #4]

	return DACC_RC_OK;
  4002c4:	2000      	movs	r0, #0
  4002c6:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
  4002c8:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4002ca:	4770      	bx	lr

004002cc <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
  4002cc:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
  4002ce:	6844      	ldr	r4, [r0, #4]
  4002d0:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
  4002d4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
  4002d8:	0209      	lsls	r1, r1, #8
  4002da:	b289      	uxth	r1, r1
  4002dc:	430c      	orrs	r4, r1
	if (ul_maxs) {
  4002de:	b112      	cbz	r2, 4002e6 <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
  4002e0:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  4002e4:	e001      	b.n	4002ea <dacc_set_timing+0x1e>
		} else {
		mr &= ~DACC_MR_MAXS;
  4002e6:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  4002ea:	061b      	lsls	r3, r3, #24
  4002ec:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  4002f0:	431c      	orrs	r4, r3

	p_dacc->DACC_MR = mr;
  4002f2:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
  4002f4:	2000      	movs	r0, #0
  4002f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002fa:	4770      	bx	lr

004002fc <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4002fc:	2901      	cmp	r1, #1
  4002fe:	d804      	bhi.n	40030a <dacc_enable_channel+0xe>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400300:	2301      	movs	r3, #1
  400302:	408b      	lsls	r3, r1
  400304:	6103      	str	r3, [r0, #16]
	return DACC_RC_OK;
  400306:	2000      	movs	r0, #0
  400308:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  40030a:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40030c:	4770      	bx	lr
  40030e:	bf00      	nop

00400310 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400310:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400314:	2000      	movs	r0, #0
  400316:	4770      	bx	lr

00400318 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400318:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40031a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40031e:	d02f      	beq.n	400380 <pio_set_peripheral+0x68>
  400320:	d807      	bhi.n	400332 <pio_set_peripheral+0x1a>
  400322:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400326:	d014      	beq.n	400352 <pio_set_peripheral+0x3a>
  400328:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40032c:	d01e      	beq.n	40036c <pio_set_peripheral+0x54>
  40032e:	b939      	cbnz	r1, 400340 <pio_set_peripheral+0x28>
  400330:	4770      	bx	lr
  400332:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400336:	d037      	beq.n	4003a8 <pio_set_peripheral+0x90>
  400338:	d804      	bhi.n	400344 <pio_set_peripheral+0x2c>
  40033a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40033e:	d029      	beq.n	400394 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400340:	6042      	str	r2, [r0, #4]
  400342:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400344:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400348:	d02e      	beq.n	4003a8 <pio_set_peripheral+0x90>
  40034a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40034e:	d02b      	beq.n	4003a8 <pio_set_peripheral+0x90>
  400350:	e7f6      	b.n	400340 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400352:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400354:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400356:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400358:	43d3      	mvns	r3, r2
  40035a:	4021      	ands	r1, r4
  40035c:	4019      	ands	r1, r3
  40035e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400360:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400362:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400364:	4021      	ands	r1, r4
  400366:	400b      	ands	r3, r1
  400368:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40036a:	e01a      	b.n	4003a2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40036c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40036e:	4313      	orrs	r3, r2
  400370:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400372:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400374:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400376:	400b      	ands	r3, r1
  400378:	ea23 0302 	bic.w	r3, r3, r2
  40037c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40037e:	e7df      	b.n	400340 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400380:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400382:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400384:	400b      	ands	r3, r1
  400386:	ea23 0302 	bic.w	r3, r3, r2
  40038a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40038c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40038e:	4313      	orrs	r3, r2
  400390:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400392:	e7d5      	b.n	400340 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400394:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400396:	4313      	orrs	r3, r2
  400398:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40039a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40039c:	4313      	orrs	r3, r2
  40039e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003a0:	e7ce      	b.n	400340 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4003a2:	6042      	str	r2, [r0, #4]
}
  4003a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003a8:	4770      	bx	lr
  4003aa:	bf00      	nop

004003ac <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003ac:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003ae:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4003b2:	bf14      	ite	ne
  4003b4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003b6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4003b8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4003bc:	bf14      	ite	ne
  4003be:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4003c0:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4003c2:	f012 0f02 	tst.w	r2, #2
  4003c6:	d002      	beq.n	4003ce <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  4003c8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4003cc:	e004      	b.n	4003d8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4003ce:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4003d2:	bf18      	it	ne
  4003d4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4003d8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4003da:	6001      	str	r1, [r0, #0]
  4003dc:	4770      	bx	lr
  4003de:	bf00      	nop

004003e0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4003e0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003e2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003e4:	9c01      	ldr	r4, [sp, #4]
  4003e6:	b10c      	cbz	r4, 4003ec <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4003e8:	6641      	str	r1, [r0, #100]	; 0x64
  4003ea:	e000      	b.n	4003ee <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003ec:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4003ee:	b10b      	cbz	r3, 4003f4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4003f0:	6501      	str	r1, [r0, #80]	; 0x50
  4003f2:	e000      	b.n	4003f6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4003f4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4003f6:	b10a      	cbz	r2, 4003fc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4003f8:	6301      	str	r1, [r0, #48]	; 0x30
  4003fa:	e000      	b.n	4003fe <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4003fc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4003fe:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400400:	6001      	str	r1, [r0, #0]
}
  400402:	f85d 4b04 	ldr.w	r4, [sp], #4
  400406:	4770      	bx	lr

00400408 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400408:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40040a:	4770      	bx	lr

0040040c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40040c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40040e:	4770      	bx	lr

00400410 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400410:	b570      	push	{r4, r5, r6, lr}
  400412:	b082      	sub	sp, #8
  400414:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400416:	0943      	lsrs	r3, r0, #5
  400418:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40041c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400420:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400422:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40042a:	d047      	beq.n	4004bc <pio_configure_pin+0xac>
  40042c:	d809      	bhi.n	400442 <pio_configure_pin+0x32>
  40042e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400432:	d021      	beq.n	400478 <pio_configure_pin+0x68>
  400434:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400438:	d02f      	beq.n	40049a <pio_configure_pin+0x8a>
  40043a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40043e:	d16f      	bne.n	400520 <pio_configure_pin+0x110>
  400440:	e009      	b.n	400456 <pio_configure_pin+0x46>
  400442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400446:	d055      	beq.n	4004f4 <pio_configure_pin+0xe4>
  400448:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40044c:	d052      	beq.n	4004f4 <pio_configure_pin+0xe4>
  40044e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400452:	d044      	beq.n	4004de <pio_configure_pin+0xce>
  400454:	e064      	b.n	400520 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400456:	f000 001f 	and.w	r0, r0, #31
  40045a:	2601      	movs	r6, #1
  40045c:	4086      	lsls	r6, r0
  40045e:	4620      	mov	r0, r4
  400460:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400464:	4632      	mov	r2, r6
  400466:	4b30      	ldr	r3, [pc, #192]	; (400528 <pio_configure_pin+0x118>)
  400468:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40046a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40046e:	bf14      	ite	ne
  400470:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400472:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400474:	2001      	movs	r0, #1
  400476:	e054      	b.n	400522 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400478:	f000 001f 	and.w	r0, r0, #31
  40047c:	2601      	movs	r6, #1
  40047e:	4086      	lsls	r6, r0
  400480:	4620      	mov	r0, r4
  400482:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400486:	4632      	mov	r2, r6
  400488:	4b27      	ldr	r3, [pc, #156]	; (400528 <pio_configure_pin+0x118>)
  40048a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40048c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400490:	bf14      	ite	ne
  400492:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400494:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400496:	2001      	movs	r0, #1
  400498:	e043      	b.n	400522 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40049a:	f000 001f 	and.w	r0, r0, #31
  40049e:	2601      	movs	r6, #1
  4004a0:	4086      	lsls	r6, r0
  4004a2:	4620      	mov	r0, r4
  4004a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4004a8:	4632      	mov	r2, r6
  4004aa:	4b1f      	ldr	r3, [pc, #124]	; (400528 <pio_configure_pin+0x118>)
  4004ac:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004ae:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004b2:	bf14      	ite	ne
  4004b4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004b6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004b8:	2001      	movs	r0, #1
  4004ba:	e032      	b.n	400522 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4004bc:	f000 001f 	and.w	r0, r0, #31
  4004c0:	2601      	movs	r6, #1
  4004c2:	4086      	lsls	r6, r0
  4004c4:	4620      	mov	r0, r4
  4004c6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4004ca:	4632      	mov	r2, r6
  4004cc:	4b16      	ldr	r3, [pc, #88]	; (400528 <pio_configure_pin+0x118>)
  4004ce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004d0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004d4:	bf14      	ite	ne
  4004d6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004d8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004da:	2001      	movs	r0, #1
  4004dc:	e021      	b.n	400522 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4004de:	f000 031f 	and.w	r3, r0, #31
  4004e2:	2601      	movs	r6, #1
  4004e4:	4620      	mov	r0, r4
  4004e6:	fa06 f103 	lsl.w	r1, r6, r3
  4004ea:	462a      	mov	r2, r5
  4004ec:	4b0f      	ldr	r3, [pc, #60]	; (40052c <pio_configure_pin+0x11c>)
  4004ee:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4004f0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4004f2:	e016      	b.n	400522 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004f4:	f000 031f 	and.w	r3, r0, #31
  4004f8:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4004fa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004fe:	ea05 0106 	and.w	r1, r5, r6
  400502:	9100      	str	r1, [sp, #0]
  400504:	4620      	mov	r0, r4
  400506:	fa06 f103 	lsl.w	r1, r6, r3
  40050a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40050e:	bf14      	ite	ne
  400510:	2200      	movne	r2, #0
  400512:	2201      	moveq	r2, #1
  400514:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400518:	4c05      	ldr	r4, [pc, #20]	; (400530 <pio_configure_pin+0x120>)
  40051a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40051c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40051e:	e000      	b.n	400522 <pio_configure_pin+0x112>

	default:
		return 0;
  400520:	2000      	movs	r0, #0
	}

	return 1;
}
  400522:	b002      	add	sp, #8
  400524:	bd70      	pop	{r4, r5, r6, pc}
  400526:	bf00      	nop
  400528:	00400319 	.word	0x00400319
  40052c:	004003ad 	.word	0x004003ad
  400530:	004003e1 	.word	0x004003e1

00400534 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400534:	b570      	push	{r4, r5, r6, lr}
  400536:	b082      	sub	sp, #8
  400538:	4606      	mov	r6, r0
  40053a:	460d      	mov	r5, r1
  40053c:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40053e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400546:	d038      	beq.n	4005ba <pio_configure_pin_group+0x86>
  400548:	d809      	bhi.n	40055e <pio_configure_pin_group+0x2a>
  40054a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40054e:	d01c      	beq.n	40058a <pio_configure_pin_group+0x56>
  400550:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400554:	d025      	beq.n	4005a2 <pio_configure_pin_group+0x6e>
  400556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40055a:	d150      	bne.n	4005fe <pio_configure_pin_group+0xca>
  40055c:	e009      	b.n	400572 <pio_configure_pin_group+0x3e>
  40055e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400562:	d03a      	beq.n	4005da <pio_configure_pin_group+0xa6>
  400564:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400568:	d037      	beq.n	4005da <pio_configure_pin_group+0xa6>
  40056a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40056e:	d030      	beq.n	4005d2 <pio_configure_pin_group+0x9e>
  400570:	e045      	b.n	4005fe <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400572:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400576:	462a      	mov	r2, r5
  400578:	4b22      	ldr	r3, [pc, #136]	; (400604 <pio_configure_pin_group+0xd0>)
  40057a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40057c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400580:	bf14      	ite	ne
  400582:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400584:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400586:	2001      	movs	r0, #1
  400588:	e03a      	b.n	400600 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40058a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40058e:	462a      	mov	r2, r5
  400590:	4b1c      	ldr	r3, [pc, #112]	; (400604 <pio_configure_pin_group+0xd0>)
  400592:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400594:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400598:	bf14      	ite	ne
  40059a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40059c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40059e:	2001      	movs	r0, #1
  4005a0:	e02e      	b.n	400600 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4005a2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005a6:	462a      	mov	r2, r5
  4005a8:	4b16      	ldr	r3, [pc, #88]	; (400604 <pio_configure_pin_group+0xd0>)
  4005aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005ac:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005b0:	bf14      	ite	ne
  4005b2:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005b4:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005b6:	2001      	movs	r0, #1
  4005b8:	e022      	b.n	400600 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4005ba:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005be:	462a      	mov	r2, r5
  4005c0:	4b10      	ldr	r3, [pc, #64]	; (400604 <pio_configure_pin_group+0xd0>)
  4005c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005c4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005c8:	bf14      	ite	ne
  4005ca:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005cc:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005ce:	2001      	movs	r0, #1
  4005d0:	e016      	b.n	400600 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <pio_configure_pin_group+0xd4>)
  4005d4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005d6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4005d8:	e012      	b.n	400600 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4005da:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4005de:	f004 0301 	and.w	r3, r4, #1
  4005e2:	9300      	str	r3, [sp, #0]
  4005e4:	4630      	mov	r0, r6
  4005e6:	4629      	mov	r1, r5
  4005e8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005ec:	bf14      	ite	ne
  4005ee:	2200      	movne	r2, #0
  4005f0:	2201      	moveq	r2, #1
  4005f2:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005f6:	4c05      	ldr	r4, [pc, #20]	; (40060c <pio_configure_pin_group+0xd8>)
  4005f8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4005fa:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4005fc:	e000      	b.n	400600 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4005fe:	2000      	movs	r0, #0
	}

	return 1;
}
  400600:	b002      	add	sp, #8
  400602:	bd70      	pop	{r4, r5, r6, pc}
  400604:	00400319 	.word	0x00400319
  400608:	004003ad 	.word	0x004003ad
  40060c:	004003e1 	.word	0x004003e1

00400610 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400614:	4681      	mov	r9, r0
  400616:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400618:	4b12      	ldr	r3, [pc, #72]	; (400664 <pio_handler_process+0x54>)
  40061a:	4798      	blx	r3
  40061c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40061e:	4648      	mov	r0, r9
  400620:	4b11      	ldr	r3, [pc, #68]	; (400668 <pio_handler_process+0x58>)
  400622:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400624:	4005      	ands	r5, r0
  400626:	d013      	beq.n	400650 <pio_handler_process+0x40>
  400628:	4c10      	ldr	r4, [pc, #64]	; (40066c <pio_handler_process+0x5c>)
  40062a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40062e:	6823      	ldr	r3, [r4, #0]
  400630:	4543      	cmp	r3, r8
  400632:	d108      	bne.n	400646 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400634:	6861      	ldr	r1, [r4, #4]
  400636:	4229      	tst	r1, r5
  400638:	d005      	beq.n	400646 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40063a:	68e3      	ldr	r3, [r4, #12]
  40063c:	4640      	mov	r0, r8
  40063e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400640:	6863      	ldr	r3, [r4, #4]
  400642:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400646:	42b4      	cmp	r4, r6
  400648:	d002      	beq.n	400650 <pio_handler_process+0x40>
  40064a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40064c:	2d00      	cmp	r5, #0
  40064e:	d1ee      	bne.n	40062e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400650:	4b07      	ldr	r3, [pc, #28]	; (400670 <pio_handler_process+0x60>)
  400652:	681b      	ldr	r3, [r3, #0]
  400654:	b123      	cbz	r3, 400660 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400656:	4b07      	ldr	r3, [pc, #28]	; (400674 <pio_handler_process+0x64>)
  400658:	681b      	ldr	r3, [r3, #0]
  40065a:	b10b      	cbz	r3, 400660 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40065c:	4648      	mov	r0, r9
  40065e:	4798      	blx	r3
  400660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400664:	00400409 	.word	0x00400409
  400668:	0040040d 	.word	0x0040040d
  40066c:	2000088c 	.word	0x2000088c
  400670:	20000950 	.word	0x20000950
  400674:	20000888 	.word	0x20000888

00400678 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400678:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40067a:	4802      	ldr	r0, [pc, #8]	; (400684 <PIOA_Handler+0xc>)
  40067c:	210b      	movs	r1, #11
  40067e:	4b02      	ldr	r3, [pc, #8]	; (400688 <PIOA_Handler+0x10>)
  400680:	4798      	blx	r3
  400682:	bd08      	pop	{r3, pc}
  400684:	400e0e00 	.word	0x400e0e00
  400688:	00400611 	.word	0x00400611

0040068c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40068c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40068e:	4802      	ldr	r0, [pc, #8]	; (400698 <PIOB_Handler+0xc>)
  400690:	210c      	movs	r1, #12
  400692:	4b02      	ldr	r3, [pc, #8]	; (40069c <PIOB_Handler+0x10>)
  400694:	4798      	blx	r3
  400696:	bd08      	pop	{r3, pc}
  400698:	400e1000 	.word	0x400e1000
  40069c:	00400611 	.word	0x00400611

004006a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4006a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4006a2:	4802      	ldr	r0, [pc, #8]	; (4006ac <PIOC_Handler+0xc>)
  4006a4:	210d      	movs	r1, #13
  4006a6:	4b02      	ldr	r3, [pc, #8]	; (4006b0 <PIOC_Handler+0x10>)
  4006a8:	4798      	blx	r3
  4006aa:	bd08      	pop	{r3, pc}
  4006ac:	400e1200 	.word	0x400e1200
  4006b0:	00400611 	.word	0x00400611

004006b4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4006b4:	4a18      	ldr	r2, [pc, #96]	; (400718 <pmc_switch_mck_to_pllack+0x64>)
  4006b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006bc:	4318      	orrs	r0, r3
  4006be:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006c2:	f013 0f08 	tst.w	r3, #8
  4006c6:	d003      	beq.n	4006d0 <pmc_switch_mck_to_pllack+0x1c>
  4006c8:	e009      	b.n	4006de <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006ca:	3b01      	subs	r3, #1
  4006cc:	d103      	bne.n	4006d6 <pmc_switch_mck_to_pllack+0x22>
  4006ce:	e01e      	b.n	40070e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006d4:	4910      	ldr	r1, [pc, #64]	; (400718 <pmc_switch_mck_to_pllack+0x64>)
  4006d6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006d8:	f012 0f08 	tst.w	r2, #8
  4006dc:	d0f5      	beq.n	4006ca <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4006de:	4a0e      	ldr	r2, [pc, #56]	; (400718 <pmc_switch_mck_to_pllack+0x64>)
  4006e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006e2:	f023 0303 	bic.w	r3, r3, #3
  4006e6:	f043 0302 	orr.w	r3, r3, #2
  4006ea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006ec:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4006ee:	f010 0008 	ands.w	r0, r0, #8
  4006f2:	d004      	beq.n	4006fe <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4006f4:	2000      	movs	r0, #0
  4006f6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006f8:	3b01      	subs	r3, #1
  4006fa:	d103      	bne.n	400704 <pmc_switch_mck_to_pllack+0x50>
  4006fc:	e009      	b.n	400712 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400702:	4905      	ldr	r1, [pc, #20]	; (400718 <pmc_switch_mck_to_pllack+0x64>)
  400704:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400706:	f012 0f08 	tst.w	r2, #8
  40070a:	d0f5      	beq.n	4006f8 <pmc_switch_mck_to_pllack+0x44>
  40070c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40070e:	2001      	movs	r0, #1
  400710:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400712:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	400e0400 	.word	0x400e0400

0040071c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40071c:	b138      	cbz	r0, 40072e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40071e:	4911      	ldr	r1, [pc, #68]	; (400764 <pmc_switch_mainck_to_xtal+0x48>)
  400720:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400722:	4a11      	ldr	r2, [pc, #68]	; (400768 <pmc_switch_mainck_to_xtal+0x4c>)
  400724:	401a      	ands	r2, r3
  400726:	4b11      	ldr	r3, [pc, #68]	; (40076c <pmc_switch_mainck_to_xtal+0x50>)
  400728:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40072a:	620b      	str	r3, [r1, #32]
  40072c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40072e:	4a0d      	ldr	r2, [pc, #52]	; (400764 <pmc_switch_mainck_to_xtal+0x48>)
  400730:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400732:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400736:	f023 0303 	bic.w	r3, r3, #3
  40073a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40073e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400742:	0209      	lsls	r1, r1, #8
  400744:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400746:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400748:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40074a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40074c:	f013 0f01 	tst.w	r3, #1
  400750:	d0fb      	beq.n	40074a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400752:	4a04      	ldr	r2, [pc, #16]	; (400764 <pmc_switch_mainck_to_xtal+0x48>)
  400754:	6a13      	ldr	r3, [r2, #32]
  400756:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40075a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40075e:	6213      	str	r3, [r2, #32]
  400760:	4770      	bx	lr
  400762:	bf00      	nop
  400764:	400e0400 	.word	0x400e0400
  400768:	fec8fffc 	.word	0xfec8fffc
  40076c:	01370002 	.word	0x01370002

00400770 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400770:	4b02      	ldr	r3, [pc, #8]	; (40077c <pmc_osc_is_ready_mainck+0xc>)
  400772:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400774:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400778:	4770      	bx	lr
  40077a:	bf00      	nop
  40077c:	400e0400 	.word	0x400e0400

00400780 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400780:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400784:	4b01      	ldr	r3, [pc, #4]	; (40078c <pmc_disable_pllack+0xc>)
  400786:	629a      	str	r2, [r3, #40]	; 0x28
  400788:	4770      	bx	lr
  40078a:	bf00      	nop
  40078c:	400e0400 	.word	0x400e0400

00400790 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400790:	4b02      	ldr	r3, [pc, #8]	; (40079c <pmc_is_locked_pllack+0xc>)
  400792:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400794:	f000 0002 	and.w	r0, r0, #2
  400798:	4770      	bx	lr
  40079a:	bf00      	nop
  40079c:	400e0400 	.word	0x400e0400

004007a0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4007a0:	2822      	cmp	r0, #34	; 0x22
  4007a2:	d81e      	bhi.n	4007e2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4007a4:	281f      	cmp	r0, #31
  4007a6:	d80c      	bhi.n	4007c2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4007a8:	4b11      	ldr	r3, [pc, #68]	; (4007f0 <pmc_enable_periph_clk+0x50>)
  4007aa:	699a      	ldr	r2, [r3, #24]
  4007ac:	2301      	movs	r3, #1
  4007ae:	4083      	lsls	r3, r0
  4007b0:	401a      	ands	r2, r3
  4007b2:	4293      	cmp	r3, r2
  4007b4:	d017      	beq.n	4007e6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4007b6:	2301      	movs	r3, #1
  4007b8:	4083      	lsls	r3, r0
  4007ba:	4a0d      	ldr	r2, [pc, #52]	; (4007f0 <pmc_enable_periph_clk+0x50>)
  4007bc:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007be:	2000      	movs	r0, #0
  4007c0:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4007c2:	4b0b      	ldr	r3, [pc, #44]	; (4007f0 <pmc_enable_periph_clk+0x50>)
  4007c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4007c8:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4007ca:	2301      	movs	r3, #1
  4007cc:	4083      	lsls	r3, r0
  4007ce:	401a      	ands	r2, r3
  4007d0:	4293      	cmp	r3, r2
  4007d2:	d00a      	beq.n	4007ea <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4007d4:	2301      	movs	r3, #1
  4007d6:	4083      	lsls	r3, r0
  4007d8:	4a05      	ldr	r2, [pc, #20]	; (4007f0 <pmc_enable_periph_clk+0x50>)
  4007da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4007de:	2000      	movs	r0, #0
  4007e0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4007e2:	2001      	movs	r0, #1
  4007e4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007e6:	2000      	movs	r0, #0
  4007e8:	4770      	bx	lr
  4007ea:	2000      	movs	r0, #0
}
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop
  4007f0:	400e0400 	.word	0x400e0400

004007f4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4007f4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4007f6:	23ac      	movs	r3, #172	; 0xac
  4007f8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4007fa:	680b      	ldr	r3, [r1, #0]
  4007fc:	684a      	ldr	r2, [r1, #4]
  4007fe:	fbb3 f3f2 	udiv	r3, r3, r2
  400802:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400804:	1e5c      	subs	r4, r3, #1
  400806:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40080a:	4294      	cmp	r4, r2
  40080c:	d80a      	bhi.n	400824 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40080e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400810:	688b      	ldr	r3, [r1, #8]
  400812:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400814:	f240 2302 	movw	r3, #514	; 0x202
  400818:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40081c:	2350      	movs	r3, #80	; 0x50
  40081e:	6003      	str	r3, [r0, #0]

	return 0;
  400820:	2000      	movs	r0, #0
  400822:	e000      	b.n	400826 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400824:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400826:	f85d 4b04 	ldr.w	r4, [sp], #4
  40082a:	4770      	bx	lr

0040082c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40082c:	6943      	ldr	r3, [r0, #20]
  40082e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400832:	bf1a      	itte	ne
  400834:	61c1      	strne	r1, [r0, #28]
	return 0;
  400836:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400838:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40083a:	4770      	bx	lr

0040083c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40083c:	6943      	ldr	r3, [r0, #20]
  40083e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400842:	bf1d      	ittte	ne
  400844:	6983      	ldrne	r3, [r0, #24]
  400846:	700b      	strbne	r3, [r1, #0]
	return 0;
  400848:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  40084a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  40084c:	4770      	bx	lr
  40084e:	bf00      	nop

00400850 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400850:	6943      	ldr	r3, [r0, #20]
  400852:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400856:	bf1d      	ittte	ne
  400858:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40085c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40085e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400860:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400862:	4770      	bx	lr

00400864 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400864:	6943      	ldr	r3, [r0, #20]
  400866:	f013 0f01 	tst.w	r3, #1
  40086a:	d005      	beq.n	400878 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40086c:	6983      	ldr	r3, [r0, #24]
  40086e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400872:	600b      	str	r3, [r1, #0]

	return 0;
  400874:	2000      	movs	r0, #0
  400876:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400878:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  40087a:	4770      	bx	lr

0040087c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  40087c:	e7fe      	b.n	40087c <Dummy_Handler>
  40087e:	bf00      	nop

00400880 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400880:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400882:	4b20      	ldr	r3, [pc, #128]	; (400904 <Reset_Handler+0x84>)
  400884:	4a20      	ldr	r2, [pc, #128]	; (400908 <Reset_Handler+0x88>)
  400886:	429a      	cmp	r2, r3
  400888:	d913      	bls.n	4008b2 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40088a:	4b20      	ldr	r3, [pc, #128]	; (40090c <Reset_Handler+0x8c>)
  40088c:	4a1d      	ldr	r2, [pc, #116]	; (400904 <Reset_Handler+0x84>)
  40088e:	429a      	cmp	r2, r3
  400890:	d21f      	bcs.n	4008d2 <Reset_Handler+0x52>
  400892:	4611      	mov	r1, r2
  400894:	3204      	adds	r2, #4
  400896:	3303      	adds	r3, #3
  400898:	1a9b      	subs	r3, r3, r2
  40089a:	f023 0303 	bic.w	r3, r3, #3
  40089e:	3304      	adds	r3, #4
  4008a0:	4a19      	ldr	r2, [pc, #100]	; (400908 <Reset_Handler+0x88>)
  4008a2:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4008a4:	f852 0b04 	ldr.w	r0, [r2], #4
  4008a8:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4008ac:	429a      	cmp	r2, r3
  4008ae:	d1f9      	bne.n	4008a4 <Reset_Handler+0x24>
  4008b0:	e00f      	b.n	4008d2 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4008b2:	4b14      	ldr	r3, [pc, #80]	; (400904 <Reset_Handler+0x84>)
  4008b4:	4a14      	ldr	r2, [pc, #80]	; (400908 <Reset_Handler+0x88>)
  4008b6:	429a      	cmp	r2, r3
  4008b8:	d20b      	bcs.n	4008d2 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4008ba:	4b14      	ldr	r3, [pc, #80]	; (40090c <Reset_Handler+0x8c>)
  4008bc:	4a11      	ldr	r2, [pc, #68]	; (400904 <Reset_Handler+0x84>)
  4008be:	1a9a      	subs	r2, r3, r2
  4008c0:	4813      	ldr	r0, [pc, #76]	; (400910 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4008c2:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4008c4:	b12a      	cbz	r2, 4008d2 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  4008c6:	f851 2904 	ldr.w	r2, [r1], #-4
  4008ca:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4008ce:	4281      	cmp	r1, r0
  4008d0:	d1f9      	bne.n	4008c6 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4008d2:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008d4:	4b0f      	ldr	r3, [pc, #60]	; (400914 <Reset_Handler+0x94>)
  4008d6:	4a10      	ldr	r2, [pc, #64]	; (400918 <Reset_Handler+0x98>)
  4008d8:	429a      	cmp	r2, r3
  4008da:	d20b      	bcs.n	4008f4 <Reset_Handler+0x74>
  4008dc:	1d13      	adds	r3, r2, #4
  4008de:	4a0f      	ldr	r2, [pc, #60]	; (40091c <Reset_Handler+0x9c>)
  4008e0:	1ad2      	subs	r2, r2, r3
  4008e2:	f022 0203 	bic.w	r2, r2, #3
  4008e6:	441a      	add	r2, r3
  4008e8:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4008ea:	2100      	movs	r1, #0
  4008ec:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008f0:	4293      	cmp	r3, r2
  4008f2:	d1fb      	bne.n	4008ec <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4008f4:	4b0a      	ldr	r3, [pc, #40]	; (400920 <Reset_Handler+0xa0>)
  4008f6:	4a0b      	ldr	r2, [pc, #44]	; (400924 <Reset_Handler+0xa4>)
  4008f8:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4008fa:	4b0b      	ldr	r3, [pc, #44]	; (400928 <Reset_Handler+0xa8>)
  4008fc:	4798      	blx	r3

	/* Branch to main function */
	main();
  4008fe:	4b0b      	ldr	r3, [pc, #44]	; (40092c <Reset_Handler+0xac>)
  400900:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  400902:	e7fe      	b.n	400902 <Reset_Handler+0x82>
  400904:	20000000 	.word	0x20000000
  400908:	00404450 	.word	0x00404450
  40090c:	2000086c 	.word	0x2000086c
  400910:	0040444c 	.word	0x0040444c
  400914:	20000958 	.word	0x20000958
  400918:	2000086c 	.word	0x2000086c
  40091c:	2000095b 	.word	0x2000095b
  400920:	e000ed00 	.word	0xe000ed00
  400924:	00400000 	.word	0x00400000
  400928:	00401075 	.word	0x00401075
  40092c:	00400de5 	.word	0x00400de5

00400930 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400930:	4b3d      	ldr	r3, [pc, #244]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  400932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400934:	f003 0303 	and.w	r3, r3, #3
  400938:	2b03      	cmp	r3, #3
  40093a:	d85d      	bhi.n	4009f8 <SystemCoreClockUpdate+0xc8>
  40093c:	e8df f003 	tbb	[pc, r3]
  400940:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400944:	4b39      	ldr	r3, [pc, #228]	; (400a2c <SystemCoreClockUpdate+0xfc>)
  400946:	695b      	ldr	r3, [r3, #20]
  400948:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40094c:	bf14      	ite	ne
  40094e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400952:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400956:	4b36      	ldr	r3, [pc, #216]	; (400a30 <SystemCoreClockUpdate+0x100>)
  400958:	601a      	str	r2, [r3, #0]
  40095a:	e04d      	b.n	4009f8 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40095c:	4b32      	ldr	r3, [pc, #200]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  40095e:	6a1b      	ldr	r3, [r3, #32]
  400960:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400964:	d003      	beq.n	40096e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400966:	4a33      	ldr	r2, [pc, #204]	; (400a34 <SystemCoreClockUpdate+0x104>)
  400968:	4b31      	ldr	r3, [pc, #196]	; (400a30 <SystemCoreClockUpdate+0x100>)
  40096a:	601a      	str	r2, [r3, #0]
  40096c:	e044      	b.n	4009f8 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40096e:	4a32      	ldr	r2, [pc, #200]	; (400a38 <SystemCoreClockUpdate+0x108>)
  400970:	4b2f      	ldr	r3, [pc, #188]	; (400a30 <SystemCoreClockUpdate+0x100>)
  400972:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400974:	4b2c      	ldr	r3, [pc, #176]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  400976:	6a1b      	ldr	r3, [r3, #32]
  400978:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40097c:	2b10      	cmp	r3, #16
  40097e:	d002      	beq.n	400986 <SystemCoreClockUpdate+0x56>
  400980:	2b20      	cmp	r3, #32
  400982:	d004      	beq.n	40098e <SystemCoreClockUpdate+0x5e>
  400984:	e038      	b.n	4009f8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400986:	4a2d      	ldr	r2, [pc, #180]	; (400a3c <SystemCoreClockUpdate+0x10c>)
  400988:	4b29      	ldr	r3, [pc, #164]	; (400a30 <SystemCoreClockUpdate+0x100>)
  40098a:	601a      	str	r2, [r3, #0]
			break;
  40098c:	e034      	b.n	4009f8 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40098e:	4a29      	ldr	r2, [pc, #164]	; (400a34 <SystemCoreClockUpdate+0x104>)
  400990:	4b27      	ldr	r3, [pc, #156]	; (400a30 <SystemCoreClockUpdate+0x100>)
  400992:	601a      	str	r2, [r3, #0]
			break;
  400994:	e030      	b.n	4009f8 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400996:	4b24      	ldr	r3, [pc, #144]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  400998:	6a1b      	ldr	r3, [r3, #32]
  40099a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40099e:	d003      	beq.n	4009a8 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4009a0:	4a24      	ldr	r2, [pc, #144]	; (400a34 <SystemCoreClockUpdate+0x104>)
  4009a2:	4b23      	ldr	r3, [pc, #140]	; (400a30 <SystemCoreClockUpdate+0x100>)
  4009a4:	601a      	str	r2, [r3, #0]
  4009a6:	e012      	b.n	4009ce <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009a8:	4a23      	ldr	r2, [pc, #140]	; (400a38 <SystemCoreClockUpdate+0x108>)
  4009aa:	4b21      	ldr	r3, [pc, #132]	; (400a30 <SystemCoreClockUpdate+0x100>)
  4009ac:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009ae:	4b1e      	ldr	r3, [pc, #120]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  4009b0:	6a1b      	ldr	r3, [r3, #32]
  4009b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009b6:	2b10      	cmp	r3, #16
  4009b8:	d002      	beq.n	4009c0 <SystemCoreClockUpdate+0x90>
  4009ba:	2b20      	cmp	r3, #32
  4009bc:	d004      	beq.n	4009c8 <SystemCoreClockUpdate+0x98>
  4009be:	e006      	b.n	4009ce <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009c0:	4a1e      	ldr	r2, [pc, #120]	; (400a3c <SystemCoreClockUpdate+0x10c>)
  4009c2:	4b1b      	ldr	r3, [pc, #108]	; (400a30 <SystemCoreClockUpdate+0x100>)
  4009c4:	601a      	str	r2, [r3, #0]
					break;
  4009c6:	e002      	b.n	4009ce <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4009c8:	4a1a      	ldr	r2, [pc, #104]	; (400a34 <SystemCoreClockUpdate+0x104>)
  4009ca:	4b19      	ldr	r3, [pc, #100]	; (400a30 <SystemCoreClockUpdate+0x100>)
  4009cc:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4009ce:	4b16      	ldr	r3, [pc, #88]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  4009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009d2:	f003 0303 	and.w	r3, r3, #3
  4009d6:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4009d8:	4a13      	ldr	r2, [pc, #76]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  4009da:	bf07      	ittee	eq
  4009dc:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4009de:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009e0:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009e2:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4009e4:	4812      	ldr	r0, [pc, #72]	; (400a30 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4009e6:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009ea:	6803      	ldr	r3, [r0, #0]
  4009ec:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4009f0:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009f2:	fbb3 f3f2 	udiv	r3, r3, r2
  4009f6:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4009f8:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  4009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a00:	2b70      	cmp	r3, #112	; 0x70
  400a02:	d107      	bne.n	400a14 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400a04:	4a0a      	ldr	r2, [pc, #40]	; (400a30 <SystemCoreClockUpdate+0x100>)
  400a06:	6813      	ldr	r3, [r2, #0]
  400a08:	490d      	ldr	r1, [pc, #52]	; (400a40 <SystemCoreClockUpdate+0x110>)
  400a0a:	fba1 1303 	umull	r1, r3, r1, r3
  400a0e:	085b      	lsrs	r3, r3, #1
  400a10:	6013      	str	r3, [r2, #0]
  400a12:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a14:	4b04      	ldr	r3, [pc, #16]	; (400a28 <SystemCoreClockUpdate+0xf8>)
  400a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a18:	4905      	ldr	r1, [pc, #20]	; (400a30 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a1a:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a1e:	680b      	ldr	r3, [r1, #0]
  400a20:	40d3      	lsrs	r3, r2
  400a22:	600b      	str	r3, [r1, #0]
  400a24:	4770      	bx	lr
  400a26:	bf00      	nop
  400a28:	400e0400 	.word	0x400e0400
  400a2c:	400e1410 	.word	0x400e1410
  400a30:	20000000 	.word	0x20000000
  400a34:	00b71b00 	.word	0x00b71b00
  400a38:	003d0900 	.word	0x003d0900
  400a3c:	007a1200 	.word	0x007a1200
  400a40:	aaaaaaab 	.word	0xaaaaaaab

00400a44 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400a44:	4b1a      	ldr	r3, [pc, #104]	; (400ab0 <system_init_flash+0x6c>)
  400a46:	4298      	cmp	r0, r3
  400a48:	d807      	bhi.n	400a5a <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400a4e:	4a19      	ldr	r2, [pc, #100]	; (400ab4 <system_init_flash+0x70>)
  400a50:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a52:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a56:	6013      	str	r3, [r2, #0]
  400a58:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400a5a:	4b17      	ldr	r3, [pc, #92]	; (400ab8 <system_init_flash+0x74>)
  400a5c:	4298      	cmp	r0, r3
  400a5e:	d806      	bhi.n	400a6e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a60:	4b16      	ldr	r3, [pc, #88]	; (400abc <system_init_flash+0x78>)
  400a62:	4a14      	ldr	r2, [pc, #80]	; (400ab4 <system_init_flash+0x70>)
  400a64:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a66:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a6a:	6013      	str	r3, [r2, #0]
  400a6c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400a6e:	4b14      	ldr	r3, [pc, #80]	; (400ac0 <system_init_flash+0x7c>)
  400a70:	4298      	cmp	r0, r3
  400a72:	d806      	bhi.n	400a82 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a74:	4b13      	ldr	r3, [pc, #76]	; (400ac4 <system_init_flash+0x80>)
  400a76:	4a0f      	ldr	r2, [pc, #60]	; (400ab4 <system_init_flash+0x70>)
  400a78:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a7a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a7e:	6013      	str	r3, [r2, #0]
  400a80:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400a82:	4b11      	ldr	r3, [pc, #68]	; (400ac8 <system_init_flash+0x84>)
  400a84:	4298      	cmp	r0, r3
  400a86:	d806      	bhi.n	400a96 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a88:	4b10      	ldr	r3, [pc, #64]	; (400acc <system_init_flash+0x88>)
  400a8a:	4a0a      	ldr	r2, [pc, #40]	; (400ab4 <system_init_flash+0x70>)
  400a8c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a8e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a92:	6013      	str	r3, [r2, #0]
  400a94:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400a96:	4b0e      	ldr	r3, [pc, #56]	; (400ad0 <system_init_flash+0x8c>)
  400a98:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a9a:	bf94      	ite	ls
  400a9c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400aa0:	4b0c      	ldrhi	r3, [pc, #48]	; (400ad4 <system_init_flash+0x90>)
  400aa2:	4a04      	ldr	r2, [pc, #16]	; (400ab4 <system_init_flash+0x70>)
  400aa4:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400aa6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400aaa:	6013      	str	r3, [r2, #0]
  400aac:	4770      	bx	lr
  400aae:	bf00      	nop
  400ab0:	01312cff 	.word	0x01312cff
  400ab4:	400e0a00 	.word	0x400e0a00
  400ab8:	026259ff 	.word	0x026259ff
  400abc:	04000100 	.word	0x04000100
  400ac0:	039386ff 	.word	0x039386ff
  400ac4:	04000200 	.word	0x04000200
  400ac8:	04c4b3ff 	.word	0x04c4b3ff
  400acc:	04000300 	.word	0x04000300
  400ad0:	05f5e0ff 	.word	0x05f5e0ff
  400ad4:	04000500 	.word	0x04000500

00400ad8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400ad8:	4b09      	ldr	r3, [pc, #36]	; (400b00 <_sbrk+0x28>)
  400ada:	681b      	ldr	r3, [r3, #0]
  400adc:	b913      	cbnz	r3, 400ae4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400ade:	4a09      	ldr	r2, [pc, #36]	; (400b04 <_sbrk+0x2c>)
  400ae0:	4b07      	ldr	r3, [pc, #28]	; (400b00 <_sbrk+0x28>)
  400ae2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400ae4:	4b06      	ldr	r3, [pc, #24]	; (400b00 <_sbrk+0x28>)
  400ae6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400ae8:	181a      	adds	r2, r3, r0
  400aea:	4907      	ldr	r1, [pc, #28]	; (400b08 <_sbrk+0x30>)
  400aec:	4291      	cmp	r1, r2
  400aee:	db04      	blt.n	400afa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400af0:	4610      	mov	r0, r2
  400af2:	4a03      	ldr	r2, [pc, #12]	; (400b00 <_sbrk+0x28>)
  400af4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400af6:	4618      	mov	r0, r3
  400af8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400afa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400afe:	4770      	bx	lr
  400b00:	200008fc 	.word	0x200008fc
  400b04:	20003958 	.word	0x20003958
  400b08:	20027ffc 	.word	0x20027ffc

00400b0c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b0c:	f04f 30ff 	mov.w	r0, #4294967295
  400b10:	4770      	bx	lr
  400b12:	bf00      	nop

00400b14 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b18:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b1a:	2000      	movs	r0, #0
  400b1c:	4770      	bx	lr
  400b1e:	bf00      	nop

00400b20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b20:	2001      	movs	r0, #1
  400b22:	4770      	bx	lr

00400b24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b24:	2000      	movs	r0, #0
  400b26:	4770      	bx	lr

00400b28 <display_menu>:

/**
 * \brief Display main menu.
 */
static void display_menu(void)
{
  400b28:	b538      	push	{r3, r4, r5, lr}
	puts("======== Menu Choices for this example ========\r");
  400b2a:	4813      	ldr	r0, [pc, #76]	; (400b78 <display_menu+0x50>)
  400b2c:	4d13      	ldr	r5, [pc, #76]	; (400b7c <display_menu+0x54>)
  400b2e:	47a8      	blx	r5
	printf("-- 0: Set frequency(%dHz-%dkHz).\n\r",
  400b30:	4813      	ldr	r0, [pc, #76]	; (400b80 <display_menu+0x58>)
  400b32:	21c8      	movs	r1, #200	; 0xc8
  400b34:	2203      	movs	r2, #3
  400b36:	4c13      	ldr	r4, [pc, #76]	; (400b84 <display_menu+0x5c>)
  400b38:	47a0      	blx	r4
		MIN_FREQUENCY, MAX_FREQUENCY / 1000);
	printf("-- 1: Set amplitude(%d-%d).\n\r", MIN_AMPLITUDE, MAX_AMPLITUDE);
  400b3a:	4813      	ldr	r0, [pc, #76]	; (400b88 <display_menu+0x60>)
  400b3c:	2164      	movs	r1, #100	; 0x64
  400b3e:	f640 72ff 	movw	r2, #4095	; 0xfff
  400b42:	47a0      	blx	r4
	puts("-- i: Display present frequency and amplitude.\n\r"
  400b44:	4811      	ldr	r0, [pc, #68]	; (400b8c <display_menu+0x64>)
  400b46:	47a8      	blx	r5
			"-- w: Switch to full amplitude square wave or back.\n\r"
			"-- m: Display this menu.\n\r"
			"------------ Current configuration ------------\r");
	printf("-- DACC channel:\t%d\n\r", DACC_CHANNEL);
  400b48:	4811      	ldr	r0, [pc, #68]	; (400b90 <display_menu+0x68>)
  400b4a:	2101      	movs	r1, #1
  400b4c:	47a0      	blx	r4
	printf("-- Amplitude   :\t%ld\n\r", (long)g_l_amplitude);
  400b4e:	4811      	ldr	r0, [pc, #68]	; (400b94 <display_menu+0x6c>)
  400b50:	4b11      	ldr	r3, [pc, #68]	; (400b98 <display_menu+0x70>)
  400b52:	6819      	ldr	r1, [r3, #0]
  400b54:	47a0      	blx	r4
	printf("-- Frequency   :\t%lu\n\r", (unsigned long)g_ul_frequency);
  400b56:	4811      	ldr	r0, [pc, #68]	; (400b9c <display_menu+0x74>)
  400b58:	4b11      	ldr	r3, [pc, #68]	; (400ba0 <display_menu+0x78>)
  400b5a:	6819      	ldr	r1, [r3, #0]
  400b5c:	47a0      	blx	r4
	printf("-- Wave        :\t%s\n\r", g_uc_wave_sel ? "SQUARE" : "SINE");
  400b5e:	4b11      	ldr	r3, [pc, #68]	; (400ba4 <display_menu+0x7c>)
  400b60:	7819      	ldrb	r1, [r3, #0]
  400b62:	4811      	ldr	r0, [pc, #68]	; (400ba8 <display_menu+0x80>)
  400b64:	4b11      	ldr	r3, [pc, #68]	; (400bac <display_menu+0x84>)
  400b66:	4a12      	ldr	r2, [pc, #72]	; (400bb0 <display_menu+0x88>)
  400b68:	2900      	cmp	r1, #0
  400b6a:	bf14      	ite	ne
  400b6c:	4611      	movne	r1, r2
  400b6e:	4619      	moveq	r1, r3
  400b70:	47a0      	blx	r4
	puts("===============================================\r");
  400b72:	4810      	ldr	r0, [pc, #64]	; (400bb4 <display_menu+0x8c>)
  400b74:	47a8      	blx	r5
  400b76:	bd38      	pop	{r3, r4, r5, pc}
  400b78:	004040ac 	.word	0x004040ac
  400b7c:	004011e5 	.word	0x004011e5
  400b80:	004040e0 	.word	0x004040e0
  400b84:	004010c5 	.word	0x004010c5
  400b88:	00404104 	.word	0x00404104
  400b8c:	00404124 	.word	0x00404124
  400b90:	004041d4 	.word	0x004041d4
  400b94:	004041ec 	.word	0x004041ec
  400b98:	20000900 	.word	0x20000900
  400b9c:	00404204 	.word	0x00404204
  400ba0:	2000090c 	.word	0x2000090c
  400ba4:	20000908 	.word	0x20000908
  400ba8:	0040421c 	.word	0x0040421c
  400bac:	004040a4 	.word	0x004040a4
  400bb0:	0040409c 	.word	0x0040409c
  400bb4:	00404234 	.word	0x00404234

00400bb8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400bb8:	b570      	push	{r4, r5, r6, lr}
  400bba:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400bbc:	4b18      	ldr	r3, [pc, #96]	; (400c20 <usart_serial_putchar+0x68>)
  400bbe:	4298      	cmp	r0, r3
  400bc0:	d108      	bne.n	400bd4 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400bc2:	461e      	mov	r6, r3
  400bc4:	4d17      	ldr	r5, [pc, #92]	; (400c24 <usart_serial_putchar+0x6c>)
  400bc6:	4630      	mov	r0, r6
  400bc8:	4621      	mov	r1, r4
  400bca:	47a8      	blx	r5
  400bcc:	2800      	cmp	r0, #0
  400bce:	d1fa      	bne.n	400bc6 <usart_serial_putchar+0xe>
		return 1;
  400bd0:	2001      	movs	r0, #1
  400bd2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400bd4:	4b14      	ldr	r3, [pc, #80]	; (400c28 <usart_serial_putchar+0x70>)
  400bd6:	4298      	cmp	r0, r3
  400bd8:	d108      	bne.n	400bec <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400bda:	461e      	mov	r6, r3
  400bdc:	4d11      	ldr	r5, [pc, #68]	; (400c24 <usart_serial_putchar+0x6c>)
  400bde:	4630      	mov	r0, r6
  400be0:	4621      	mov	r1, r4
  400be2:	47a8      	blx	r5
  400be4:	2800      	cmp	r0, #0
  400be6:	d1fa      	bne.n	400bde <usart_serial_putchar+0x26>
		return 1;
  400be8:	2001      	movs	r0, #1
  400bea:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400bec:	4b0f      	ldr	r3, [pc, #60]	; (400c2c <usart_serial_putchar+0x74>)
  400bee:	4298      	cmp	r0, r3
  400bf0:	d108      	bne.n	400c04 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400bf2:	461e      	mov	r6, r3
  400bf4:	4d0e      	ldr	r5, [pc, #56]	; (400c30 <usart_serial_putchar+0x78>)
  400bf6:	4630      	mov	r0, r6
  400bf8:	4621      	mov	r1, r4
  400bfa:	47a8      	blx	r5
  400bfc:	2800      	cmp	r0, #0
  400bfe:	d1fa      	bne.n	400bf6 <usart_serial_putchar+0x3e>
		return 1;
  400c00:	2001      	movs	r0, #1
  400c02:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c04:	4b0b      	ldr	r3, [pc, #44]	; (400c34 <usart_serial_putchar+0x7c>)
  400c06:	4298      	cmp	r0, r3
  400c08:	d108      	bne.n	400c1c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400c0a:	461e      	mov	r6, r3
  400c0c:	4d08      	ldr	r5, [pc, #32]	; (400c30 <usart_serial_putchar+0x78>)
  400c0e:	4630      	mov	r0, r6
  400c10:	4621      	mov	r1, r4
  400c12:	47a8      	blx	r5
  400c14:	2800      	cmp	r0, #0
  400c16:	d1fa      	bne.n	400c0e <usart_serial_putchar+0x56>
		return 1;
  400c18:	2001      	movs	r0, #1
  400c1a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400c1c:	2000      	movs	r0, #0
}
  400c1e:	bd70      	pop	{r4, r5, r6, pc}
  400c20:	400e0600 	.word	0x400e0600
  400c24:	0040082d 	.word	0x0040082d
  400c28:	400e0800 	.word	0x400e0800
  400c2c:	40024000 	.word	0x40024000
  400c30:	00400851 	.word	0x00400851
  400c34:	40028000 	.word	0x40028000

00400c38 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400c38:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c3a:	b083      	sub	sp, #12
  400c3c:	4605      	mov	r5, r0
  400c3e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400c40:	2300      	movs	r3, #0
  400c42:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c44:	4b18      	ldr	r3, [pc, #96]	; (400ca8 <usart_serial_getchar+0x70>)
  400c46:	4298      	cmp	r0, r3
  400c48:	d107      	bne.n	400c5a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400c4a:	461f      	mov	r7, r3
  400c4c:	4e17      	ldr	r6, [pc, #92]	; (400cac <usart_serial_getchar+0x74>)
  400c4e:	4638      	mov	r0, r7
  400c50:	4621      	mov	r1, r4
  400c52:	47b0      	blx	r6
  400c54:	2800      	cmp	r0, #0
  400c56:	d1fa      	bne.n	400c4e <usart_serial_getchar+0x16>
  400c58:	e017      	b.n	400c8a <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c5a:	4b15      	ldr	r3, [pc, #84]	; (400cb0 <usart_serial_getchar+0x78>)
  400c5c:	4298      	cmp	r0, r3
  400c5e:	d107      	bne.n	400c70 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400c60:	461e      	mov	r6, r3
  400c62:	4d12      	ldr	r5, [pc, #72]	; (400cac <usart_serial_getchar+0x74>)
  400c64:	4630      	mov	r0, r6
  400c66:	4621      	mov	r1, r4
  400c68:	47a8      	blx	r5
  400c6a:	2800      	cmp	r0, #0
  400c6c:	d1fa      	bne.n	400c64 <usart_serial_getchar+0x2c>
  400c6e:	e018      	b.n	400ca2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c70:	4b10      	ldr	r3, [pc, #64]	; (400cb4 <usart_serial_getchar+0x7c>)
  400c72:	4298      	cmp	r0, r3
  400c74:	d109      	bne.n	400c8a <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400c76:	461e      	mov	r6, r3
  400c78:	4d0f      	ldr	r5, [pc, #60]	; (400cb8 <usart_serial_getchar+0x80>)
  400c7a:	4630      	mov	r0, r6
  400c7c:	a901      	add	r1, sp, #4
  400c7e:	47a8      	blx	r5
  400c80:	2800      	cmp	r0, #0
  400c82:	d1fa      	bne.n	400c7a <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400c84:	9b01      	ldr	r3, [sp, #4]
  400c86:	7023      	strb	r3, [r4, #0]
  400c88:	e00b      	b.n	400ca2 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c8a:	4b0c      	ldr	r3, [pc, #48]	; (400cbc <usart_serial_getchar+0x84>)
  400c8c:	429d      	cmp	r5, r3
  400c8e:	d108      	bne.n	400ca2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400c90:	461e      	mov	r6, r3
  400c92:	4d09      	ldr	r5, [pc, #36]	; (400cb8 <usart_serial_getchar+0x80>)
  400c94:	4630      	mov	r0, r6
  400c96:	a901      	add	r1, sp, #4
  400c98:	47a8      	blx	r5
  400c9a:	2800      	cmp	r0, #0
  400c9c:	d1fa      	bne.n	400c94 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400c9e:	9b01      	ldr	r3, [sp, #4]
  400ca0:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400ca2:	b003      	add	sp, #12
  400ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400ca6:	bf00      	nop
  400ca8:	400e0600 	.word	0x400e0600
  400cac:	0040083d 	.word	0x0040083d
  400cb0:	400e0800 	.word	0x400e0800
  400cb4:	40024000 	.word	0x40024000
  400cb8:	00400865 	.word	0x00400865
  400cbc:	40028000 	.word	0x40028000

00400cc0 <get_input_value>:
 * \param ul_lower_limit The lower limit of input
 * \param ul_upper_limit The upper limit of input
 */
static uint32_t get_input_value(uint32_t ul_lower_limit,
	uint32_t ul_upper_limit)
{
  400cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cc4:	b083      	sub	sp, #12
  400cc6:	4682      	mov	sl, r0
  400cc8:	4688      	mov	r8, r1
	uint32_t i = 0, length = 0, value = 0;
	uint8_t uc_key, str_temp[5] = { 0 };
  400cca:	2600      	movs	r6, #0
  400ccc:	9600      	str	r6, [sp, #0]
  400cce:	f88d 6004 	strb.w	r6, [sp, #4]
  400cd2:	466f      	mov	r7, sp
  400cd4:	46e9      	mov	r9, sp
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  400cd6:	4d2c      	ldr	r5, [pc, #176]	; (400d88 <get_input_value+0xc8>)
  400cd8:	4c2c      	ldr	r4, [pc, #176]	; (400d8c <get_input_value+0xcc>)
			puts("\r");
			break;
		}

		if ('0' <= uc_key && '9' >= uc_key) {
			printf("%c", uc_key);
  400cda:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 400da0 <get_input_value+0xe0>
  400cde:	4620      	mov	r0, r4
  400ce0:	f10d 0107 	add.w	r1, sp, #7
  400ce4:	47a8      	blx	r5
  400ce6:	2800      	cmp	r0, #0
  400ce8:	d1f9      	bne.n	400cde <get_input_value+0x1e>
	uint8_t uc_key, str_temp[5] = { 0 };

	while (1) {
        usart_serial_getchar((Usart *)CONSOLE_UART, &uc_key);

		if (uc_key == '\n' || uc_key == '\r') {
  400cea:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400cee:	290a      	cmp	r1, #10
  400cf0:	d001      	beq.n	400cf6 <get_input_value+0x36>
  400cf2:	290d      	cmp	r1, #13
  400cf4:	d103      	bne.n	400cfe <get_input_value+0x3e>
			puts("\r");
  400cf6:	4826      	ldr	r0, [pc, #152]	; (400d90 <get_input_value+0xd0>)
  400cf8:	4b26      	ldr	r3, [pc, #152]	; (400d94 <get_input_value+0xd4>)
  400cfa:	4798      	blx	r3
			break;
  400cfc:	e00e      	b.n	400d1c <get_input_value+0x5c>
		}

		if ('0' <= uc_key && '9' >= uc_key) {
  400cfe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  400d02:	b2db      	uxtb	r3, r3
  400d04:	2b09      	cmp	r3, #9
  400d06:	d8ea      	bhi.n	400cde <get_input_value+0x1e>
			printf("%c", uc_key);
  400d08:	4658      	mov	r0, fp
  400d0a:	4b23      	ldr	r3, [pc, #140]	; (400d98 <get_input_value+0xd8>)
  400d0c:	4798      	blx	r3
			str_temp[i++] = uc_key;
  400d0e:	3601      	adds	r6, #1
  400d10:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400d14:	f809 3b01 	strb.w	r3, [r9], #1

			if (i >= 4) {
  400d18:	2e04      	cmp	r6, #4
  400d1a:	d1e0      	bne.n	400cde <get_input_value+0x1e>
				break;
			}
		}
	}

	str_temp[i] = '\0';
  400d1c:	ab02      	add	r3, sp, #8
  400d1e:	4433      	add	r3, r6
  400d20:	2200      	movs	r2, #0
  400d22:	f803 2c08 	strb.w	r2, [r3, #-8]
  400d26:	3e01      	subs	r6, #1
  400d28:	a901      	add	r1, sp, #4
			case 2:
				value += (str_temp[i] - '0') * 100;
				break;

			case 3:
				value += (str_temp[i] - '0') * 1000;
  400d2a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
			case 1:
				value += (str_temp[i] - '0') * 10;
				break;

			case 2:
				value += (str_temp[i] - '0') * 100;
  400d2e:	2064      	movs	r0, #100	; 0x64
	length = i;
	value = 0;

	/* Convert string to integer */
	for (i = 0; i < 4; i++) {
		if (str_temp[i] != '0') {
  400d30:	f817 3b01 	ldrb.w	r3, [r7], #1
  400d34:	2b30      	cmp	r3, #48	; 0x30
  400d36:	d015      	beq.n	400d64 <get_input_value+0xa4>
			switch (length - i - 1) {
  400d38:	2e03      	cmp	r6, #3
  400d3a:	d813      	bhi.n	400d64 <get_input_value+0xa4>
  400d3c:	e8df f006 	tbb	[pc, r6]
  400d40:	0f0b0502 	.word	0x0f0b0502
  400d44:	3a30      	subs	r2, #48	; 0x30
			case 0:
				value += (str_temp[i] - '0');
  400d46:	441a      	add	r2, r3
				break;
  400d48:	e00c      	b.n	400d64 <get_input_value+0xa4>

			case 1:
				value += (str_temp[i] - '0') * 10;
  400d4a:	3b30      	subs	r3, #48	; 0x30
  400d4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400d50:	eb02 0243 	add.w	r2, r2, r3, lsl #1
				break;
  400d54:	e006      	b.n	400d64 <get_input_value+0xa4>

			case 2:
				value += (str_temp[i] - '0') * 100;
  400d56:	3b30      	subs	r3, #48	; 0x30
  400d58:	fb00 2203 	mla	r2, r0, r3, r2
				break;
  400d5c:	e002      	b.n	400d64 <get_input_value+0xa4>

			case 3:
				value += (str_temp[i] - '0') * 1000;
  400d5e:	3b30      	subs	r3, #48	; 0x30
  400d60:	fb04 2203 	mla	r2, r4, r3, r2
  400d64:	3e01      	subs	r6, #1
	/* Input string length */
	length = i;
	value = 0;

	/* Convert string to integer */
	for (i = 0; i < 4; i++) {
  400d66:	428f      	cmp	r7, r1
  400d68:	d1e2      	bne.n	400d30 <get_input_value+0x70>
				break;
			}
		}
	}

	if (value > ul_upper_limit || value < ul_lower_limit) {
  400d6a:	4542      	cmp	r2, r8
  400d6c:	d801      	bhi.n	400d72 <get_input_value+0xb2>
  400d6e:	4552      	cmp	r2, sl
  400d70:	d205      	bcs.n	400d7e <get_input_value+0xbe>
		puts("\n\r-F- Input value is invalid!");
  400d72:	480a      	ldr	r0, [pc, #40]	; (400d9c <get_input_value+0xdc>)
  400d74:	4b07      	ldr	r3, [pc, #28]	; (400d94 <get_input_value+0xd4>)
  400d76:	4798      	blx	r3
		return VAL_INVALID;
  400d78:	f04f 30ff 	mov.w	r0, #4294967295
  400d7c:	e000      	b.n	400d80 <get_input_value+0xc0>
	}

	return value;
  400d7e:	4610      	mov	r0, r2
}
  400d80:	b003      	add	sp, #12
  400d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d86:	bf00      	nop
  400d88:	0040083d 	.word	0x0040083d
  400d8c:	400e0600 	.word	0x400e0600
  400d90:	00404120 	.word	0x00404120
  400d94:	004011e5 	.word	0x004011e5
  400d98:	004010c5 	.word	0x004010c5
  400d9c:	0040426c 	.word	0x0040426c
  400da0:	00404268 	.word	0x00404268

00400da4 <SysTick_Handler>:

/**
 * \brief SysTick IRQ handler.
 */
void SysTick_Handler(void)
{
  400da4:	b508      	push	{r3, lr}
	uint32_t status;
	uint32_t dac_val;
	
	status = dacc_get_interrupt_status(DACC_BASE);
  400da6:	480b      	ldr	r0, [pc, #44]	; (400dd4 <SysTick_Handler+0x30>)
  400da8:	4b0b      	ldr	r3, [pc, #44]	; (400dd8 <SysTick_Handler+0x34>)
  400daa:	4798      	blx	r3
	if ((status & DACC_ISR_TXRDY0) == DACC_ISR_TXRDY0) {
#elif (DACC_CHANNEL == 1)
	if ((status & DACC_ISR_TXRDY1) == DACC_ISR_TXRDY1) {
#endif
#else
	if ((status & DACC_ISR_TXRDY) == DACC_ISR_TXRDY) {
  400dac:	f010 0f01 	tst.w	r0, #1
  400db0:	d00f      	beq.n	400dd2 <SysTick_Handler+0x2e>
#endif
		g_ul_index_sample++;
  400db2:	4b0a      	ldr	r3, [pc, #40]	; (400ddc <SysTick_Handler+0x38>)
  400db4:	681b      	ldr	r3, [r3, #0]
  400db6:	3301      	adds	r3, #1
		if (g_ul_index_sample >= SAMPLES) {
  400db8:	2b63      	cmp	r3, #99	; 0x63
  400dba:	d802      	bhi.n	400dc2 <SysTick_Handler+0x1e>
	if ((status & DACC_ISR_TXRDY1) == DACC_ISR_TXRDY1) {
#endif
#else
	if ((status & DACC_ISR_TXRDY) == DACC_ISR_TXRDY) {
#endif
		g_ul_index_sample++;
  400dbc:	4a07      	ldr	r2, [pc, #28]	; (400ddc <SysTick_Handler+0x38>)
  400dbe:	6013      	str	r3, [r2, #0]
  400dc0:	e002      	b.n	400dc8 <SysTick_Handler+0x24>
		if (g_ul_index_sample >= SAMPLES) {
			g_ul_index_sample = 0;
  400dc2:	2200      	movs	r2, #0
  400dc4:	4b05      	ldr	r3, [pc, #20]	; (400ddc <SysTick_Handler+0x38>)
  400dc6:	601a      	str	r2, [r3, #0]
				((g_ul_index_sample > SAMPLES / 2) ? 0 : MAX_AMPLITUDE)
				: wave_to_dacc(gc_us_sine_data[g_ul_index_sample],
					 g_l_amplitude,
					 MAX_DIGITAL * 2, MAX_AMPLITUDE);
#if !(SAMV70 || SAMV71 || SAME70 || SAMS70)
		dacc_write_conversion_data(DACC_BASE, 4095);
  400dc8:	4802      	ldr	r0, [pc, #8]	; (400dd4 <SysTick_Handler+0x30>)
  400dca:	f640 71ff 	movw	r1, #4095	; 0xfff
  400dce:	4b04      	ldr	r3, [pc, #16]	; (400de0 <SysTick_Handler+0x3c>)
  400dd0:	4798      	blx	r3
  400dd2:	bd08      	pop	{r3, pc}
  400dd4:	4003c000 	.word	0x4003c000
  400dd8:	004002ad 	.word	0x004002ad
  400ddc:	20000904 	.word	0x20000904
  400de0:	004002b1 	.word	0x004002b1

00400de4 <main>:
 *  \brief DAC Sinewave application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400de8:	b085      	sub	sp, #20
	uint8_t uc_key;
	uint32_t ul_freq, ul_amp;

	/* Initialize the system */
	sysclk_init();
  400dea:	4b79      	ldr	r3, [pc, #484]	; (400fd0 <main+0x1ec>)
  400dec:	4798      	blx	r3
	board_init();
  400dee:	4b79      	ldr	r3, [pc, #484]	; (400fd4 <main+0x1f0>)
  400df0:	4798      	blx	r3
  400df2:	2008      	movs	r0, #8
  400df4:	4c78      	ldr	r4, [pc, #480]	; (400fd8 <main+0x1f4>)
  400df6:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400df8:	4d78      	ldr	r5, [pc, #480]	; (400fdc <main+0x1f8>)
  400dfa:	4b79      	ldr	r3, [pc, #484]	; (400fe0 <main+0x1fc>)
  400dfc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400dfe:	4a79      	ldr	r2, [pc, #484]	; (400fe4 <main+0x200>)
  400e00:	4b79      	ldr	r3, [pc, #484]	; (400fe8 <main+0x204>)
  400e02:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400e04:	4a79      	ldr	r2, [pc, #484]	; (400fec <main+0x208>)
  400e06:	4b7a      	ldr	r3, [pc, #488]	; (400ff0 <main+0x20c>)
  400e08:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400e0a:	4b7a      	ldr	r3, [pc, #488]	; (400ff4 <main+0x210>)
  400e0c:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
  400e0e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400e12:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  400e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e18:	9302      	str	r3, [sp, #8]
  400e1a:	2008      	movs	r0, #8
  400e1c:	47a0      	blx	r4
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400e1e:	4628      	mov	r0, r5
  400e20:	4669      	mov	r1, sp
  400e22:	4b75      	ldr	r3, [pc, #468]	; (400ff8 <main+0x214>)
  400e24:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400e26:	4e75      	ldr	r6, [pc, #468]	; (400ffc <main+0x218>)
  400e28:	6833      	ldr	r3, [r6, #0]
  400e2a:	6898      	ldr	r0, [r3, #8]
  400e2c:	2100      	movs	r1, #0
  400e2e:	4d74      	ldr	r5, [pc, #464]	; (401000 <main+0x21c>)
  400e30:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400e32:	6833      	ldr	r3, [r6, #0]
  400e34:	6858      	ldr	r0, [r3, #4]
  400e36:	2100      	movs	r1, #0
  400e38:	47a8      	blx	r5

	/* Initialize debug console */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400e3a:	4872      	ldr	r0, [pc, #456]	; (401004 <main+0x220>)
  400e3c:	4b72      	ldr	r3, [pc, #456]	; (401008 <main+0x224>)
  400e3e:	4798      	blx	r3
  400e40:	201e      	movs	r0, #30
  400e42:	47a0      	blx	r4
#else
	sysclk_enable_peripheral_clock(DACC_ID);
#endif

	/* Reset DACC registers */
	dacc_reset(DACC_BASE);
  400e44:	4c71      	ldr	r4, [pc, #452]	; (40100c <main+0x228>)
  400e46:	4620      	mov	r0, r4
  400e48:	4b71      	ldr	r3, [pc, #452]	; (401010 <main+0x22c>)
  400e4a:	4798      	blx	r3

	/* Half word transfer mode */
	dacc_set_transfer_mode(DACC_BASE, 1);
  400e4c:	4620      	mov	r0, r4
  400e4e:	2101      	movs	r1, #1
  400e50:	4b70      	ldr	r3, [pc, #448]	; (401014 <main+0x230>)
  400e52:	4798      	blx	r3
	 * refresh        - 0x08 (1024*8 dacc clocks)
	 * max speed mode -    0 (disabled)
	 * startup time   - 0x10 (1024 dacc clocks)
	 */
#if !(SAMV70 || SAMV71 || SAME70 || SAMS70)
	dacc_set_timing(DACC_BASE, 0x08, 0, 0x10);
  400e54:	4620      	mov	r0, r4
  400e56:	2108      	movs	r1, #8
  400e58:	2200      	movs	r2, #0
  400e5a:	2310      	movs	r3, #16
  400e5c:	4d6e      	ldr	r5, [pc, #440]	; (401018 <main+0x234>)
  400e5e:	47a8      	blx	r5

	/* Disable TAG and select output channel DACC_CHANNEL */
	dacc_set_channel_selection(DACC_BASE, DACC_CHANNEL);
  400e60:	4620      	mov	r0, r4
  400e62:	2101      	movs	r1, #1
  400e64:	4b6d      	ldr	r3, [pc, #436]	; (40101c <main+0x238>)
  400e66:	4798      	blx	r3
#endif

	/* Enable output channel DACC_CHANNEL */
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400e68:	4620      	mov	r0, r4
  400e6a:	2101      	movs	r1, #1
  400e6c:	4b6c      	ldr	r3, [pc, #432]	; (401020 <main+0x23c>)
  400e6e:	4798      	blx	r3

	/* Set up analog current */
	dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  400e70:	4620      	mov	r0, r4
  400e72:	f44f 7185 	mov.w	r1, #266	; 0x10a
  400e76:	4b6b      	ldr	r3, [pc, #428]	; (401024 <main+0x240>)
  400e78:	4798      	blx	r3
#endif /* (SAM3N) */

	g_l_amplitude = MAX_AMPLITUDE / 2;
  400e7a:	f240 72ff 	movw	r2, #2047	; 0x7ff
  400e7e:	4b6a      	ldr	r3, [pc, #424]	; (401028 <main+0x244>)
  400e80:	601a      	str	r2, [r3, #0]
	g_ul_frequency = DEFAULT_FREQUENCY;
  400e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400e86:	4b69      	ldr	r3, [pc, #420]	; (40102c <main+0x248>)
  400e88:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400e8a:	4b69      	ldr	r3, [pc, #420]	; (401030 <main+0x24c>)
  400e8c:	f240 42af 	movw	r2, #1199	; 0x4af
  400e90:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400e92:	21f0      	movs	r1, #240	; 0xf0
  400e94:	4a67      	ldr	r2, [pc, #412]	; (401034 <main+0x250>)
  400e96:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400e9a:	2200      	movs	r2, #0
  400e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400e9e:	2207      	movs	r2, #7
  400ea0:	601a      	str	r2, [r3, #0]

	SysTick_Config(sysclk_get_cpu_hz() / (g_ul_frequency * SAMPLES));

	/* Main menu */
	display_menu();
  400ea2:	4b65      	ldr	r3, [pc, #404]	; (401038 <main+0x254>)
  400ea4:	4798      	blx	r3
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  400ea6:	4d65      	ldr	r5, [pc, #404]	; (40103c <main+0x258>)
  400ea8:	f504 2424 	add.w	r4, r4, #671744	; 0xa4000
  400eac:	f504 64c0 	add.w	r4, r4, #1536	; 0x600
			g_uc_wave_sel = (g_uc_wave_sel + 1) & 1;
			break;

		case 'm':
		case 'M':
			display_menu();
  400eb0:	4e61      	ldr	r6, [pc, #388]	; (401038 <main+0x254>)
			ul_freq = get_input_value(MIN_FREQUENCY, MAX_FREQUENCY);
			printf("\r\n");

			if (ul_freq != VAL_INVALID) {
				printf("Set frequency to : %luHz\n\r", (unsigned long)ul_freq);
				SysTick_Config(sysclk_get_cpu_hz() / (ul_freq * SAMPLES));
  400eb2:	f8df 8140 	ldr.w	r8, [pc, #320]	; 400ff4 <main+0x210>
  400eb6:	4620      	mov	r0, r4
  400eb8:	f10d 010f 	add.w	r1, sp, #15
  400ebc:	47a8      	blx	r5
  400ebe:	2800      	cmp	r0, #0
  400ec0:	d1f9      	bne.n	400eb6 <main+0xd2>
	display_menu();

	while (1) {
		usart_serial_getchar((Usart *)CONSOLE_UART, &uc_key);

		switch (uc_key) {
  400ec2:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400ec6:	3b30      	subs	r3, #48	; 0x30
  400ec8:	2b47      	cmp	r3, #71	; 0x47
  400eca:	d87d      	bhi.n	400fc8 <main+0x1e4>
  400ecc:	e8df f003 	tbb	[pc, r3]
  400ed0:	7c7c4c24 	.word	0x7c7c4c24
  400ed4:	7c7c7c7c 	.word	0x7c7c7c7c
  400ed8:	7c7c7c7c 	.word	0x7c7c7c7c
  400edc:	7c7c7c7c 	.word	0x7c7c7c7c
  400ee0:	7c7c7c7c 	.word	0x7c7c7c7c
  400ee4:	7c7c7c7c 	.word	0x7c7c7c7c
  400ee8:	7c7c617c 	.word	0x7c7c617c
  400eec:	7c7c7b7c 	.word	0x7c7c7b7c
  400ef0:	7c7c7c7c 	.word	0x7c7c7c7c
  400ef4:	697c7c7c 	.word	0x697c7c7c
  400ef8:	7c7c7c7c 	.word	0x7c7c7c7c
  400efc:	7c7c7c7c 	.word	0x7c7c7c7c
  400f00:	7c7c7c7c 	.word	0x7c7c7c7c
  400f04:	7c7c7c7c 	.word	0x7c7c7c7c
  400f08:	7c7c617c 	.word	0x7c7c617c
  400f0c:	7c7c7b7c 	.word	0x7c7c7b7c
  400f10:	7c7c7c7c 	.word	0x7c7c7c7c
  400f14:	697c7c7c 	.word	0x697c7c7c
		case '0':
			printf("Frequency:\t");
  400f18:	4849      	ldr	r0, [pc, #292]	; (401040 <main+0x25c>)
  400f1a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 401054 <main+0x270>
  400f1e:	47c8      	blx	r9
			ul_freq = get_input_value(MIN_FREQUENCY, MAX_FREQUENCY);
  400f20:	20c8      	movs	r0, #200	; 0xc8
  400f22:	f640 31b8 	movw	r1, #3000	; 0xbb8
  400f26:	4b47      	ldr	r3, [pc, #284]	; (401044 <main+0x260>)
  400f28:	4798      	blx	r3
  400f2a:	4607      	mov	r7, r0
			printf("\r\n");
  400f2c:	4846      	ldr	r0, [pc, #280]	; (401048 <main+0x264>)
  400f2e:	47c8      	blx	r9

			if (ul_freq != VAL_INVALID) {
  400f30:	f1b7 3fff 	cmp.w	r7, #4294967295
  400f34:	d048      	beq.n	400fc8 <main+0x1e4>
				printf("Set frequency to : %luHz\n\r", (unsigned long)ul_freq);
  400f36:	4845      	ldr	r0, [pc, #276]	; (40104c <main+0x268>)
  400f38:	4639      	mov	r1, r7
  400f3a:	47c8      	blx	r9
				SysTick_Config(sysclk_get_cpu_hz() / (ul_freq * SAMPLES));
  400f3c:	2364      	movs	r3, #100	; 0x64
  400f3e:	fb03 f307 	mul.w	r3, r3, r7
  400f42:	fbb8 f3f3 	udiv	r3, r8, r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  400f46:	3b01      	subs	r3, #1
  400f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  400f4c:	d209      	bcs.n	400f62 <main+0x17e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400f4e:	4a38      	ldr	r2, [pc, #224]	; (401030 <main+0x24c>)
  400f50:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400f52:	21f0      	movs	r1, #240	; 0xf0
  400f54:	4b37      	ldr	r3, [pc, #220]	; (401034 <main+0x250>)
  400f56:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400f5a:	2300      	movs	r3, #0
  400f5c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400f5e:	2307      	movs	r3, #7
  400f60:	6013      	str	r3, [r2, #0]
				g_ul_frequency = ul_freq;
  400f62:	4b32      	ldr	r3, [pc, #200]	; (40102c <main+0x248>)
  400f64:	601f      	str	r7, [r3, #0]
  400f66:	e02f      	b.n	400fc8 <main+0x1e4>
			}
			break;

		case '1':
			printf("Amplitude:\t");
  400f68:	4839      	ldr	r0, [pc, #228]	; (401050 <main+0x26c>)
  400f6a:	4f3a      	ldr	r7, [pc, #232]	; (401054 <main+0x270>)
  400f6c:	47b8      	blx	r7
			ul_amp = get_input_value(MIN_AMPLITUDE, MAX_AMPLITUDE);
  400f6e:	2064      	movs	r0, #100	; 0x64
  400f70:	f640 71ff 	movw	r1, #4095	; 0xfff
  400f74:	4b33      	ldr	r3, [pc, #204]	; (401044 <main+0x260>)
  400f76:	4798      	blx	r3
  400f78:	4681      	mov	r9, r0
			printf("\r\n");
  400f7a:	4833      	ldr	r0, [pc, #204]	; (401048 <main+0x264>)
  400f7c:	47b8      	blx	r7
			if (ul_amp != VAL_INVALID) {
  400f7e:	f1b9 3fff 	cmp.w	r9, #4294967295
  400f82:	d021      	beq.n	400fc8 <main+0x1e4>
				printf("Set amplitude to : %lu\n\r", (unsigned long)ul_amp);
  400f84:	4834      	ldr	r0, [pc, #208]	; (401058 <main+0x274>)
  400f86:	4649      	mov	r1, r9
  400f88:	47b8      	blx	r7
				g_l_amplitude = ul_amp;
  400f8a:	4b27      	ldr	r3, [pc, #156]	; (401028 <main+0x244>)
  400f8c:	f8c3 9000 	str.w	r9, [r3]
  400f90:	e01a      	b.n	400fc8 <main+0x1e4>
			}
			break;

		case 'i':
		case 'I':
			printf("-I- Frequency : %lu Hz Amplitude : %ld\n\r",
  400f92:	4832      	ldr	r0, [pc, #200]	; (40105c <main+0x278>)
  400f94:	4b25      	ldr	r3, [pc, #148]	; (40102c <main+0x248>)
  400f96:	6819      	ldr	r1, [r3, #0]
  400f98:	4b23      	ldr	r3, [pc, #140]	; (401028 <main+0x244>)
  400f9a:	681a      	ldr	r2, [r3, #0]
  400f9c:	4b2d      	ldr	r3, [pc, #180]	; (401054 <main+0x270>)
  400f9e:	4798      	blx	r3
				(unsigned long)g_ul_frequency, (long)g_l_amplitude);
			break;
  400fa0:	e012      	b.n	400fc8 <main+0x1e4>

		case 'w':
		case 'W':
			printf("-I- Switch wave to : %s\n\r", g_uc_wave_sel ?
  400fa2:	4b2f      	ldr	r3, [pc, #188]	; (401060 <main+0x27c>)
  400fa4:	7819      	ldrb	r1, [r3, #0]
  400fa6:	482f      	ldr	r0, [pc, #188]	; (401064 <main+0x280>)
  400fa8:	4b2f      	ldr	r3, [pc, #188]	; (401068 <main+0x284>)
  400faa:	4a30      	ldr	r2, [pc, #192]	; (40106c <main+0x288>)
  400fac:	2900      	cmp	r1, #0
  400fae:	bf14      	ite	ne
  400fb0:	4611      	movne	r1, r2
  400fb2:	4619      	moveq	r1, r3
  400fb4:	4b27      	ldr	r3, [pc, #156]	; (401054 <main+0x270>)
  400fb6:	4798      	blx	r3
				"SINE" : "Full Amplitude SQUARE");
			g_uc_wave_sel = (g_uc_wave_sel + 1) & 1;
  400fb8:	4a29      	ldr	r2, [pc, #164]	; (401060 <main+0x27c>)
  400fba:	7813      	ldrb	r3, [r2, #0]
  400fbc:	3301      	adds	r3, #1
  400fbe:	f003 0301 	and.w	r3, r3, #1
  400fc2:	7013      	strb	r3, [r2, #0]
			break;
  400fc4:	e000      	b.n	400fc8 <main+0x1e4>

		case 'm':
		case 'M':
			display_menu();
  400fc6:	47b0      	blx	r6
			break;
		}
		puts("Press \'m\' or \'M\' to display the main menu again!\r");
  400fc8:	4829      	ldr	r0, [pc, #164]	; (401070 <main+0x28c>)
  400fca:	4b0f      	ldr	r3, [pc, #60]	; (401008 <main+0x224>)
  400fcc:	4798      	blx	r3
	}
  400fce:	e772      	b.n	400eb6 <main+0xd2>
  400fd0:	00400129 	.word	0x00400129
  400fd4:	00400219 	.word	0x00400219
  400fd8:	004007a1 	.word	0x004007a1
  400fdc:	400e0600 	.word	0x400e0600
  400fe0:	2000094c 	.word	0x2000094c
  400fe4:	00400bb9 	.word	0x00400bb9
  400fe8:	20000948 	.word	0x20000948
  400fec:	00400c39 	.word	0x00400c39
  400ff0:	20000944 	.word	0x20000944
  400ff4:	07270e00 	.word	0x07270e00
  400ff8:	004007f5 	.word	0x004007f5
  400ffc:	20000430 	.word	0x20000430
  401000:	004011f5 	.word	0x004011f5
  401004:	004042a4 	.word	0x004042a4
  401008:	004011e5 	.word	0x004011e5
  40100c:	4003c000 	.word	0x4003c000
  401010:	0040027d 	.word	0x0040027d
  401014:	00400285 	.word	0x00400285
  401018:	004002cd 	.word	0x004002cd
  40101c:	004002b5 	.word	0x004002b5
  401020:	004002fd 	.word	0x004002fd
  401024:	00400311 	.word	0x00400311
  401028:	20000900 	.word	0x20000900
  40102c:	2000090c 	.word	0x2000090c
  401030:	e000e010 	.word	0xe000e010
  401034:	e000ed00 	.word	0xe000ed00
  401038:	00400b29 	.word	0x00400b29
  40103c:	0040083d 	.word	0x0040083d
  401040:	004042f8 	.word	0x004042f8
  401044:	00400cc1 	.word	0x00400cc1
  401048:	00404304 	.word	0x00404304
  40104c:	00404308 	.word	0x00404308
  401050:	00404324 	.word	0x00404324
  401054:	004010c5 	.word	0x004010c5
  401058:	00404330 	.word	0x00404330
  40105c:	0040434c 	.word	0x0040434c
  401060:	20000908 	.word	0x20000908
  401064:	00404378 	.word	0x00404378
  401068:	0040428c 	.word	0x0040428c
  40106c:	004040a4 	.word	0x004040a4
  401070:	00404394 	.word	0x00404394

00401074 <__libc_init_array>:
  401074:	b570      	push	{r4, r5, r6, lr}
  401076:	4e0f      	ldr	r6, [pc, #60]	; (4010b4 <__libc_init_array+0x40>)
  401078:	4d0f      	ldr	r5, [pc, #60]	; (4010b8 <__libc_init_array+0x44>)
  40107a:	1b76      	subs	r6, r6, r5
  40107c:	10b6      	asrs	r6, r6, #2
  40107e:	bf18      	it	ne
  401080:	2400      	movne	r4, #0
  401082:	d005      	beq.n	401090 <__libc_init_array+0x1c>
  401084:	3401      	adds	r4, #1
  401086:	f855 3b04 	ldr.w	r3, [r5], #4
  40108a:	4798      	blx	r3
  40108c:	42a6      	cmp	r6, r4
  40108e:	d1f9      	bne.n	401084 <__libc_init_array+0x10>
  401090:	4e0a      	ldr	r6, [pc, #40]	; (4010bc <__libc_init_array+0x48>)
  401092:	4d0b      	ldr	r5, [pc, #44]	; (4010c0 <__libc_init_array+0x4c>)
  401094:	1b76      	subs	r6, r6, r5
  401096:	f003 f9c5 	bl	404424 <_init>
  40109a:	10b6      	asrs	r6, r6, #2
  40109c:	bf18      	it	ne
  40109e:	2400      	movne	r4, #0
  4010a0:	d006      	beq.n	4010b0 <__libc_init_array+0x3c>
  4010a2:	3401      	adds	r4, #1
  4010a4:	f855 3b04 	ldr.w	r3, [r5], #4
  4010a8:	4798      	blx	r3
  4010aa:	42a6      	cmp	r6, r4
  4010ac:	d1f9      	bne.n	4010a2 <__libc_init_array+0x2e>
  4010ae:	bd70      	pop	{r4, r5, r6, pc}
  4010b0:	bd70      	pop	{r4, r5, r6, pc}
  4010b2:	bf00      	nop
  4010b4:	00404430 	.word	0x00404430
  4010b8:	00404430 	.word	0x00404430
  4010bc:	00404438 	.word	0x00404438
  4010c0:	00404430 	.word	0x00404430

004010c4 <iprintf>:
  4010c4:	b40f      	push	{r0, r1, r2, r3}
  4010c6:	b500      	push	{lr}
  4010c8:	4907      	ldr	r1, [pc, #28]	; (4010e8 <iprintf+0x24>)
  4010ca:	b083      	sub	sp, #12
  4010cc:	ab04      	add	r3, sp, #16
  4010ce:	6808      	ldr	r0, [r1, #0]
  4010d0:	f853 2b04 	ldr.w	r2, [r3], #4
  4010d4:	6881      	ldr	r1, [r0, #8]
  4010d6:	9301      	str	r3, [sp, #4]
  4010d8:	f000 f97a 	bl	4013d0 <_vfiprintf_r>
  4010dc:	b003      	add	sp, #12
  4010de:	f85d eb04 	ldr.w	lr, [sp], #4
  4010e2:	b004      	add	sp, #16
  4010e4:	4770      	bx	lr
  4010e6:	bf00      	nop
  4010e8:	20000430 	.word	0x20000430

004010ec <memset>:
  4010ec:	b470      	push	{r4, r5, r6}
  4010ee:	0784      	lsls	r4, r0, #30
  4010f0:	d046      	beq.n	401180 <memset+0x94>
  4010f2:	1e54      	subs	r4, r2, #1
  4010f4:	2a00      	cmp	r2, #0
  4010f6:	d041      	beq.n	40117c <memset+0x90>
  4010f8:	b2cd      	uxtb	r5, r1
  4010fa:	4603      	mov	r3, r0
  4010fc:	e002      	b.n	401104 <memset+0x18>
  4010fe:	1e62      	subs	r2, r4, #1
  401100:	b3e4      	cbz	r4, 40117c <memset+0x90>
  401102:	4614      	mov	r4, r2
  401104:	f803 5b01 	strb.w	r5, [r3], #1
  401108:	079a      	lsls	r2, r3, #30
  40110a:	d1f8      	bne.n	4010fe <memset+0x12>
  40110c:	2c03      	cmp	r4, #3
  40110e:	d92e      	bls.n	40116e <memset+0x82>
  401110:	b2cd      	uxtb	r5, r1
  401112:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401116:	2c0f      	cmp	r4, #15
  401118:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40111c:	d919      	bls.n	401152 <memset+0x66>
  40111e:	f103 0210 	add.w	r2, r3, #16
  401122:	4626      	mov	r6, r4
  401124:	3e10      	subs	r6, #16
  401126:	2e0f      	cmp	r6, #15
  401128:	f842 5c10 	str.w	r5, [r2, #-16]
  40112c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401130:	f842 5c08 	str.w	r5, [r2, #-8]
  401134:	f842 5c04 	str.w	r5, [r2, #-4]
  401138:	f102 0210 	add.w	r2, r2, #16
  40113c:	d8f2      	bhi.n	401124 <memset+0x38>
  40113e:	f1a4 0210 	sub.w	r2, r4, #16
  401142:	f022 020f 	bic.w	r2, r2, #15
  401146:	f004 040f 	and.w	r4, r4, #15
  40114a:	3210      	adds	r2, #16
  40114c:	2c03      	cmp	r4, #3
  40114e:	4413      	add	r3, r2
  401150:	d90d      	bls.n	40116e <memset+0x82>
  401152:	461e      	mov	r6, r3
  401154:	4622      	mov	r2, r4
  401156:	3a04      	subs	r2, #4
  401158:	2a03      	cmp	r2, #3
  40115a:	f846 5b04 	str.w	r5, [r6], #4
  40115e:	d8fa      	bhi.n	401156 <memset+0x6a>
  401160:	1f22      	subs	r2, r4, #4
  401162:	f022 0203 	bic.w	r2, r2, #3
  401166:	3204      	adds	r2, #4
  401168:	4413      	add	r3, r2
  40116a:	f004 0403 	and.w	r4, r4, #3
  40116e:	b12c      	cbz	r4, 40117c <memset+0x90>
  401170:	b2c9      	uxtb	r1, r1
  401172:	441c      	add	r4, r3
  401174:	f803 1b01 	strb.w	r1, [r3], #1
  401178:	42a3      	cmp	r3, r4
  40117a:	d1fb      	bne.n	401174 <memset+0x88>
  40117c:	bc70      	pop	{r4, r5, r6}
  40117e:	4770      	bx	lr
  401180:	4614      	mov	r4, r2
  401182:	4603      	mov	r3, r0
  401184:	e7c2      	b.n	40110c <memset+0x20>
  401186:	bf00      	nop

00401188 <_puts_r>:
  401188:	b5f0      	push	{r4, r5, r6, r7, lr}
  40118a:	4604      	mov	r4, r0
  40118c:	b089      	sub	sp, #36	; 0x24
  40118e:	4608      	mov	r0, r1
  401190:	460d      	mov	r5, r1
  401192:	f000 f8b3 	bl	4012fc <strlen>
  401196:	68a3      	ldr	r3, [r4, #8]
  401198:	4f11      	ldr	r7, [pc, #68]	; (4011e0 <_puts_r+0x58>)
  40119a:	899a      	ldrh	r2, [r3, #12]
  40119c:	9504      	str	r5, [sp, #16]
  40119e:	2102      	movs	r1, #2
  4011a0:	f100 0e01 	add.w	lr, r0, #1
  4011a4:	2601      	movs	r6, #1
  4011a6:	ad04      	add	r5, sp, #16
  4011a8:	9102      	str	r1, [sp, #8]
  4011aa:	0491      	lsls	r1, r2, #18
  4011ac:	9005      	str	r0, [sp, #20]
  4011ae:	f8cd e00c 	str.w	lr, [sp, #12]
  4011b2:	9706      	str	r7, [sp, #24]
  4011b4:	9607      	str	r6, [sp, #28]
  4011b6:	9501      	str	r5, [sp, #4]
  4011b8:	d406      	bmi.n	4011c8 <_puts_r+0x40>
  4011ba:	6e59      	ldr	r1, [r3, #100]	; 0x64
  4011bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4011c0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4011c4:	819a      	strh	r2, [r3, #12]
  4011c6:	6659      	str	r1, [r3, #100]	; 0x64
  4011c8:	4620      	mov	r0, r4
  4011ca:	4619      	mov	r1, r3
  4011cc:	aa01      	add	r2, sp, #4
  4011ce:	f001 faa3 	bl	402718 <__sfvwrite_r>
  4011d2:	2800      	cmp	r0, #0
  4011d4:	bf14      	ite	ne
  4011d6:	f04f 30ff 	movne.w	r0, #4294967295
  4011da:	200a      	moveq	r0, #10
  4011dc:	b009      	add	sp, #36	; 0x24
  4011de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4011e0:	004043d0 	.word	0x004043d0

004011e4 <puts>:
  4011e4:	4b02      	ldr	r3, [pc, #8]	; (4011f0 <puts+0xc>)
  4011e6:	4601      	mov	r1, r0
  4011e8:	6818      	ldr	r0, [r3, #0]
  4011ea:	f7ff bfcd 	b.w	401188 <_puts_r>
  4011ee:	bf00      	nop
  4011f0:	20000430 	.word	0x20000430

004011f4 <setbuf>:
  4011f4:	2900      	cmp	r1, #0
  4011f6:	bf0c      	ite	eq
  4011f8:	2202      	moveq	r2, #2
  4011fa:	2200      	movne	r2, #0
  4011fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401200:	f000 b800 	b.w	401204 <setvbuf>

00401204 <setvbuf>:
  401204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401208:	4c3a      	ldr	r4, [pc, #232]	; (4012f4 <setvbuf+0xf0>)
  40120a:	6826      	ldr	r6, [r4, #0]
  40120c:	460d      	mov	r5, r1
  40120e:	4604      	mov	r4, r0
  401210:	4690      	mov	r8, r2
  401212:	461f      	mov	r7, r3
  401214:	b116      	cbz	r6, 40121c <setvbuf+0x18>
  401216:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  401218:	2b00      	cmp	r3, #0
  40121a:	d03c      	beq.n	401296 <setvbuf+0x92>
  40121c:	f1b8 0f02 	cmp.w	r8, #2
  401220:	d82f      	bhi.n	401282 <setvbuf+0x7e>
  401222:	2f00      	cmp	r7, #0
  401224:	db2d      	blt.n	401282 <setvbuf+0x7e>
  401226:	4621      	mov	r1, r4
  401228:	4630      	mov	r0, r6
  40122a:	f001 f831 	bl	402290 <_fflush_r>
  40122e:	89a1      	ldrh	r1, [r4, #12]
  401230:	2300      	movs	r3, #0
  401232:	6063      	str	r3, [r4, #4]
  401234:	61a3      	str	r3, [r4, #24]
  401236:	060b      	lsls	r3, r1, #24
  401238:	d427      	bmi.n	40128a <setvbuf+0x86>
  40123a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  40123e:	b289      	uxth	r1, r1
  401240:	f1b8 0f02 	cmp.w	r8, #2
  401244:	81a1      	strh	r1, [r4, #12]
  401246:	d02a      	beq.n	40129e <setvbuf+0x9a>
  401248:	2d00      	cmp	r5, #0
  40124a:	d036      	beq.n	4012ba <setvbuf+0xb6>
  40124c:	f1b8 0f01 	cmp.w	r8, #1
  401250:	d011      	beq.n	401276 <setvbuf+0x72>
  401252:	b289      	uxth	r1, r1
  401254:	f001 0008 	and.w	r0, r1, #8
  401258:	4b27      	ldr	r3, [pc, #156]	; (4012f8 <setvbuf+0xf4>)
  40125a:	63f3      	str	r3, [r6, #60]	; 0x3c
  40125c:	b280      	uxth	r0, r0
  40125e:	6025      	str	r5, [r4, #0]
  401260:	6125      	str	r5, [r4, #16]
  401262:	6167      	str	r7, [r4, #20]
  401264:	b178      	cbz	r0, 401286 <setvbuf+0x82>
  401266:	f011 0f03 	tst.w	r1, #3
  40126a:	bf18      	it	ne
  40126c:	2700      	movne	r7, #0
  40126e:	60a7      	str	r7, [r4, #8]
  401270:	2000      	movs	r0, #0
  401272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401276:	f041 0101 	orr.w	r1, r1, #1
  40127a:	427b      	negs	r3, r7
  40127c:	81a1      	strh	r1, [r4, #12]
  40127e:	61a3      	str	r3, [r4, #24]
  401280:	e7e7      	b.n	401252 <setvbuf+0x4e>
  401282:	f04f 30ff 	mov.w	r0, #4294967295
  401286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40128a:	6921      	ldr	r1, [r4, #16]
  40128c:	4630      	mov	r0, r6
  40128e:	f001 f96b 	bl	402568 <_free_r>
  401292:	89a1      	ldrh	r1, [r4, #12]
  401294:	e7d1      	b.n	40123a <setvbuf+0x36>
  401296:	4630      	mov	r0, r6
  401298:	f001 f88e 	bl	4023b8 <__sinit>
  40129c:	e7be      	b.n	40121c <setvbuf+0x18>
  40129e:	2000      	movs	r0, #0
  4012a0:	f104 0343 	add.w	r3, r4, #67	; 0x43
  4012a4:	f041 0102 	orr.w	r1, r1, #2
  4012a8:	2500      	movs	r5, #0
  4012aa:	2201      	movs	r2, #1
  4012ac:	81a1      	strh	r1, [r4, #12]
  4012ae:	60a5      	str	r5, [r4, #8]
  4012b0:	6023      	str	r3, [r4, #0]
  4012b2:	6123      	str	r3, [r4, #16]
  4012b4:	6162      	str	r2, [r4, #20]
  4012b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012ba:	2f00      	cmp	r7, #0
  4012bc:	bf08      	it	eq
  4012be:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  4012c2:	4638      	mov	r0, r7
  4012c4:	f001 fc58 	bl	402b78 <malloc>
  4012c8:	4605      	mov	r5, r0
  4012ca:	b128      	cbz	r0, 4012d8 <setvbuf+0xd4>
  4012cc:	89a1      	ldrh	r1, [r4, #12]
  4012ce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4012d2:	b289      	uxth	r1, r1
  4012d4:	81a1      	strh	r1, [r4, #12]
  4012d6:	e7b9      	b.n	40124c <setvbuf+0x48>
  4012d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4012dc:	f001 fc4c 	bl	402b78 <malloc>
  4012e0:	4605      	mov	r5, r0
  4012e2:	b918      	cbnz	r0, 4012ec <setvbuf+0xe8>
  4012e4:	89a1      	ldrh	r1, [r4, #12]
  4012e6:	f04f 30ff 	mov.w	r0, #4294967295
  4012ea:	e7d9      	b.n	4012a0 <setvbuf+0x9c>
  4012ec:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4012f0:	e7ec      	b.n	4012cc <setvbuf+0xc8>
  4012f2:	bf00      	nop
  4012f4:	20000430 	.word	0x20000430
  4012f8:	004022bd 	.word	0x004022bd

004012fc <strlen>:
  4012fc:	f020 0103 	bic.w	r1, r0, #3
  401300:	f010 0003 	ands.w	r0, r0, #3
  401304:	f1c0 0000 	rsb	r0, r0, #0
  401308:	f851 3b04 	ldr.w	r3, [r1], #4
  40130c:	f100 0c04 	add.w	ip, r0, #4
  401310:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  401314:	f06f 0200 	mvn.w	r2, #0
  401318:	bf1c      	itt	ne
  40131a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40131e:	4313      	orrne	r3, r2
  401320:	f04f 0c01 	mov.w	ip, #1
  401324:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  401328:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40132c:	eba3 020c 	sub.w	r2, r3, ip
  401330:	ea22 0203 	bic.w	r2, r2, r3
  401334:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  401338:	bf04      	itt	eq
  40133a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40133e:	3004      	addeq	r0, #4
  401340:	d0f4      	beq.n	40132c <strlen+0x30>
  401342:	f1c2 0100 	rsb	r1, r2, #0
  401346:	ea02 0201 	and.w	r2, r2, r1
  40134a:	fab2 f282 	clz	r2, r2
  40134e:	f1c2 021f 	rsb	r2, r2, #31
  401352:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401356:	4770      	bx	lr

00401358 <__sprint_r.part.0>:
  401358:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40135a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40135e:	049c      	lsls	r4, r3, #18
  401360:	460f      	mov	r7, r1
  401362:	4692      	mov	sl, r2
  401364:	d52b      	bpl.n	4013be <__sprint_r.part.0+0x66>
  401366:	6893      	ldr	r3, [r2, #8]
  401368:	6812      	ldr	r2, [r2, #0]
  40136a:	b333      	cbz	r3, 4013ba <__sprint_r.part.0+0x62>
  40136c:	4680      	mov	r8, r0
  40136e:	f102 0908 	add.w	r9, r2, #8
  401372:	e919 0060 	ldmdb	r9, {r5, r6}
  401376:	08b6      	lsrs	r6, r6, #2
  401378:	d017      	beq.n	4013aa <__sprint_r.part.0+0x52>
  40137a:	3d04      	subs	r5, #4
  40137c:	2400      	movs	r4, #0
  40137e:	e001      	b.n	401384 <__sprint_r.part.0+0x2c>
  401380:	42a6      	cmp	r6, r4
  401382:	d010      	beq.n	4013a6 <__sprint_r.part.0+0x4e>
  401384:	4640      	mov	r0, r8
  401386:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40138a:	463a      	mov	r2, r7
  40138c:	f001 f88c 	bl	4024a8 <_fputwc_r>
  401390:	1c43      	adds	r3, r0, #1
  401392:	f104 0401 	add.w	r4, r4, #1
  401396:	d1f3      	bne.n	401380 <__sprint_r.part.0+0x28>
  401398:	2300      	movs	r3, #0
  40139a:	f8ca 3008 	str.w	r3, [sl, #8]
  40139e:	f8ca 3004 	str.w	r3, [sl, #4]
  4013a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013a6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4013aa:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4013ae:	f8ca 3008 	str.w	r3, [sl, #8]
  4013b2:	f109 0908 	add.w	r9, r9, #8
  4013b6:	2b00      	cmp	r3, #0
  4013b8:	d1db      	bne.n	401372 <__sprint_r.part.0+0x1a>
  4013ba:	2000      	movs	r0, #0
  4013bc:	e7ec      	b.n	401398 <__sprint_r.part.0+0x40>
  4013be:	f001 f9ab 	bl	402718 <__sfvwrite_r>
  4013c2:	2300      	movs	r3, #0
  4013c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4013c8:	f8ca 3004 	str.w	r3, [sl, #4]
  4013cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004013d0 <_vfiprintf_r>:
  4013d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013d4:	b0ab      	sub	sp, #172	; 0xac
  4013d6:	461c      	mov	r4, r3
  4013d8:	9100      	str	r1, [sp, #0]
  4013da:	4693      	mov	fp, r2
  4013dc:	9304      	str	r3, [sp, #16]
  4013de:	9001      	str	r0, [sp, #4]
  4013e0:	b118      	cbz	r0, 4013ea <_vfiprintf_r+0x1a>
  4013e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4013e4:	2b00      	cmp	r3, #0
  4013e6:	f000 80e3 	beq.w	4015b0 <_vfiprintf_r+0x1e0>
  4013ea:	9b00      	ldr	r3, [sp, #0]
  4013ec:	8999      	ldrh	r1, [r3, #12]
  4013ee:	b28a      	uxth	r2, r1
  4013f0:	0490      	lsls	r0, r2, #18
  4013f2:	d408      	bmi.n	401406 <_vfiprintf_r+0x36>
  4013f4:	4618      	mov	r0, r3
  4013f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  4013f8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  4013fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401400:	8182      	strh	r2, [r0, #12]
  401402:	6643      	str	r3, [r0, #100]	; 0x64
  401404:	b292      	uxth	r2, r2
  401406:	0711      	lsls	r1, r2, #28
  401408:	f140 80b2 	bpl.w	401570 <_vfiprintf_r+0x1a0>
  40140c:	9b00      	ldr	r3, [sp, #0]
  40140e:	691b      	ldr	r3, [r3, #16]
  401410:	2b00      	cmp	r3, #0
  401412:	f000 80ad 	beq.w	401570 <_vfiprintf_r+0x1a0>
  401416:	f002 021a 	and.w	r2, r2, #26
  40141a:	2a0a      	cmp	r2, #10
  40141c:	f000 80b4 	beq.w	401588 <_vfiprintf_r+0x1b8>
  401420:	2300      	movs	r3, #0
  401422:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  401426:	9309      	str	r3, [sp, #36]	; 0x24
  401428:	930f      	str	r3, [sp, #60]	; 0x3c
  40142a:	930e      	str	r3, [sp, #56]	; 0x38
  40142c:	9302      	str	r3, [sp, #8]
  40142e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  401432:	4654      	mov	r4, sl
  401434:	f89b 3000 	ldrb.w	r3, [fp]
  401438:	2b00      	cmp	r3, #0
  40143a:	f000 84a3 	beq.w	401d84 <_vfiprintf_r+0x9b4>
  40143e:	2b25      	cmp	r3, #37	; 0x25
  401440:	f000 84a0 	beq.w	401d84 <_vfiprintf_r+0x9b4>
  401444:	465a      	mov	r2, fp
  401446:	e001      	b.n	40144c <_vfiprintf_r+0x7c>
  401448:	2b25      	cmp	r3, #37	; 0x25
  40144a:	d003      	beq.n	401454 <_vfiprintf_r+0x84>
  40144c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  401450:	2b00      	cmp	r3, #0
  401452:	d1f9      	bne.n	401448 <_vfiprintf_r+0x78>
  401454:	ebcb 0602 	rsb	r6, fp, r2
  401458:	4615      	mov	r5, r2
  40145a:	b196      	cbz	r6, 401482 <_vfiprintf_r+0xb2>
  40145c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40145e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401460:	f8c4 b000 	str.w	fp, [r4]
  401464:	3301      	adds	r3, #1
  401466:	4432      	add	r2, r6
  401468:	2b07      	cmp	r3, #7
  40146a:	6066      	str	r6, [r4, #4]
  40146c:	920f      	str	r2, [sp, #60]	; 0x3c
  40146e:	930e      	str	r3, [sp, #56]	; 0x38
  401470:	dd79      	ble.n	401566 <_vfiprintf_r+0x196>
  401472:	2a00      	cmp	r2, #0
  401474:	f040 84af 	bne.w	401dd6 <_vfiprintf_r+0xa06>
  401478:	9b02      	ldr	r3, [sp, #8]
  40147a:	920e      	str	r2, [sp, #56]	; 0x38
  40147c:	4433      	add	r3, r6
  40147e:	4654      	mov	r4, sl
  401480:	9302      	str	r3, [sp, #8]
  401482:	782b      	ldrb	r3, [r5, #0]
  401484:	2b00      	cmp	r3, #0
  401486:	f000 8360 	beq.w	401b4a <_vfiprintf_r+0x77a>
  40148a:	2100      	movs	r1, #0
  40148c:	f04f 0300 	mov.w	r3, #0
  401490:	f04f 3cff 	mov.w	ip, #4294967295
  401494:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401498:	1c68      	adds	r0, r5, #1
  40149a:	786b      	ldrb	r3, [r5, #1]
  40149c:	4688      	mov	r8, r1
  40149e:	460d      	mov	r5, r1
  4014a0:	4666      	mov	r6, ip
  4014a2:	f100 0b01 	add.w	fp, r0, #1
  4014a6:	f1a3 0220 	sub.w	r2, r3, #32
  4014aa:	2a58      	cmp	r2, #88	; 0x58
  4014ac:	f200 82ab 	bhi.w	401a06 <_vfiprintf_r+0x636>
  4014b0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4014b4:	02a9029b 	.word	0x02a9029b
  4014b8:	02a302a9 	.word	0x02a302a9
  4014bc:	02a902a9 	.word	0x02a902a9
  4014c0:	02a902a9 	.word	0x02a902a9
  4014c4:	02a902a9 	.word	0x02a902a9
  4014c8:	02620255 	.word	0x02620255
  4014cc:	010d02a9 	.word	0x010d02a9
  4014d0:	02a9026e 	.word	0x02a9026e
  4014d4:	012f0129 	.word	0x012f0129
  4014d8:	012f012f 	.word	0x012f012f
  4014dc:	012f012f 	.word	0x012f012f
  4014e0:	012f012f 	.word	0x012f012f
  4014e4:	012f012f 	.word	0x012f012f
  4014e8:	02a902a9 	.word	0x02a902a9
  4014ec:	02a902a9 	.word	0x02a902a9
  4014f0:	02a902a9 	.word	0x02a902a9
  4014f4:	02a902a9 	.word	0x02a902a9
  4014f8:	02a902a9 	.word	0x02a902a9
  4014fc:	02a9013d 	.word	0x02a9013d
  401500:	02a902a9 	.word	0x02a902a9
  401504:	02a902a9 	.word	0x02a902a9
  401508:	02a902a9 	.word	0x02a902a9
  40150c:	02a902a9 	.word	0x02a902a9
  401510:	017402a9 	.word	0x017402a9
  401514:	02a902a9 	.word	0x02a902a9
  401518:	02a902a9 	.word	0x02a902a9
  40151c:	018b02a9 	.word	0x018b02a9
  401520:	02a902a9 	.word	0x02a902a9
  401524:	02a901a3 	.word	0x02a901a3
  401528:	02a902a9 	.word	0x02a902a9
  40152c:	02a902a9 	.word	0x02a902a9
  401530:	02a902a9 	.word	0x02a902a9
  401534:	02a902a9 	.word	0x02a902a9
  401538:	01c702a9 	.word	0x01c702a9
  40153c:	02a901da 	.word	0x02a901da
  401540:	02a902a9 	.word	0x02a902a9
  401544:	01da0123 	.word	0x01da0123
  401548:	02a902a9 	.word	0x02a902a9
  40154c:	02a9024c 	.word	0x02a9024c
  401550:	0113028a 	.word	0x0113028a
  401554:	020701f3 	.word	0x020701f3
  401558:	020d02a9 	.word	0x020d02a9
  40155c:	008102a9 	.word	0x008102a9
  401560:	02a902a9 	.word	0x02a902a9
  401564:	0233      	.short	0x0233
  401566:	3408      	adds	r4, #8
  401568:	9b02      	ldr	r3, [sp, #8]
  40156a:	4433      	add	r3, r6
  40156c:	9302      	str	r3, [sp, #8]
  40156e:	e788      	b.n	401482 <_vfiprintf_r+0xb2>
  401570:	9801      	ldr	r0, [sp, #4]
  401572:	9900      	ldr	r1, [sp, #0]
  401574:	f000 fd70 	bl	402058 <__swsetup_r>
  401578:	b9a8      	cbnz	r0, 4015a6 <_vfiprintf_r+0x1d6>
  40157a:	9b00      	ldr	r3, [sp, #0]
  40157c:	899a      	ldrh	r2, [r3, #12]
  40157e:	f002 021a 	and.w	r2, r2, #26
  401582:	2a0a      	cmp	r2, #10
  401584:	f47f af4c 	bne.w	401420 <_vfiprintf_r+0x50>
  401588:	9b00      	ldr	r3, [sp, #0]
  40158a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40158e:	2b00      	cmp	r3, #0
  401590:	f6ff af46 	blt.w	401420 <_vfiprintf_r+0x50>
  401594:	9801      	ldr	r0, [sp, #4]
  401596:	9900      	ldr	r1, [sp, #0]
  401598:	465a      	mov	r2, fp
  40159a:	4623      	mov	r3, r4
  40159c:	f000 fd20 	bl	401fe0 <__sbprintf>
  4015a0:	b02b      	add	sp, #172	; 0xac
  4015a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015a6:	f04f 30ff 	mov.w	r0, #4294967295
  4015aa:	b02b      	add	sp, #172	; 0xac
  4015ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015b0:	f000 ff02 	bl	4023b8 <__sinit>
  4015b4:	e719      	b.n	4013ea <_vfiprintf_r+0x1a>
  4015b6:	f018 0f20 	tst.w	r8, #32
  4015ba:	9503      	str	r5, [sp, #12]
  4015bc:	46b4      	mov	ip, r6
  4015be:	f000 810c 	beq.w	4017da <_vfiprintf_r+0x40a>
  4015c2:	9b04      	ldr	r3, [sp, #16]
  4015c4:	3307      	adds	r3, #7
  4015c6:	f023 0307 	bic.w	r3, r3, #7
  4015ca:	f103 0208 	add.w	r2, r3, #8
  4015ce:	e9d3 6700 	ldrd	r6, r7, [r3]
  4015d2:	9204      	str	r2, [sp, #16]
  4015d4:	2301      	movs	r3, #1
  4015d6:	f04f 0200 	mov.w	r2, #0
  4015da:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4015de:	46e1      	mov	r9, ip
  4015e0:	2500      	movs	r5, #0
  4015e2:	f1bc 0f00 	cmp.w	ip, #0
  4015e6:	bfa8      	it	ge
  4015e8:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  4015ec:	ea56 0207 	orrs.w	r2, r6, r7
  4015f0:	f040 80c4 	bne.w	40177c <_vfiprintf_r+0x3ac>
  4015f4:	f1bc 0f00 	cmp.w	ip, #0
  4015f8:	f000 8381 	beq.w	401cfe <_vfiprintf_r+0x92e>
  4015fc:	2b01      	cmp	r3, #1
  4015fe:	f000 80c5 	beq.w	40178c <_vfiprintf_r+0x3bc>
  401602:	2b02      	cmp	r3, #2
  401604:	f000 8387 	beq.w	401d16 <_vfiprintf_r+0x946>
  401608:	4651      	mov	r1, sl
  40160a:	08f2      	lsrs	r2, r6, #3
  40160c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401610:	08f8      	lsrs	r0, r7, #3
  401612:	f006 0307 	and.w	r3, r6, #7
  401616:	4607      	mov	r7, r0
  401618:	4616      	mov	r6, r2
  40161a:	3330      	adds	r3, #48	; 0x30
  40161c:	ea56 0207 	orrs.w	r2, r6, r7
  401620:	f801 3d01 	strb.w	r3, [r1, #-1]!
  401624:	d1f1      	bne.n	40160a <_vfiprintf_r+0x23a>
  401626:	f018 0f01 	tst.w	r8, #1
  40162a:	9107      	str	r1, [sp, #28]
  40162c:	f040 83fc 	bne.w	401e28 <_vfiprintf_r+0xa58>
  401630:	ebc1 090a 	rsb	r9, r1, sl
  401634:	45e1      	cmp	r9, ip
  401636:	464e      	mov	r6, r9
  401638:	bfb8      	it	lt
  40163a:	4666      	movlt	r6, ip
  40163c:	b105      	cbz	r5, 401640 <_vfiprintf_r+0x270>
  40163e:	3601      	adds	r6, #1
  401640:	f018 0302 	ands.w	r3, r8, #2
  401644:	9305      	str	r3, [sp, #20]
  401646:	bf18      	it	ne
  401648:	3602      	addne	r6, #2
  40164a:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  40164e:	9306      	str	r3, [sp, #24]
  401650:	f040 81fa 	bne.w	401a48 <_vfiprintf_r+0x678>
  401654:	9b03      	ldr	r3, [sp, #12]
  401656:	1b9d      	subs	r5, r3, r6
  401658:	2d00      	cmp	r5, #0
  40165a:	f340 81f5 	ble.w	401a48 <_vfiprintf_r+0x678>
  40165e:	2d10      	cmp	r5, #16
  401660:	f340 848c 	ble.w	401f7c <_vfiprintf_r+0xbac>
  401664:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40166a:	4fc6      	ldr	r7, [pc, #792]	; (401984 <_vfiprintf_r+0x5b4>)
  40166c:	4620      	mov	r0, r4
  40166e:	2310      	movs	r3, #16
  401670:	4664      	mov	r4, ip
  401672:	4671      	mov	r1, lr
  401674:	4684      	mov	ip, r0
  401676:	e007      	b.n	401688 <_vfiprintf_r+0x2b8>
  401678:	f101 0e02 	add.w	lr, r1, #2
  40167c:	f10c 0c08 	add.w	ip, ip, #8
  401680:	4601      	mov	r1, r0
  401682:	3d10      	subs	r5, #16
  401684:	2d10      	cmp	r5, #16
  401686:	dd13      	ble.n	4016b0 <_vfiprintf_r+0x2e0>
  401688:	1c48      	adds	r0, r1, #1
  40168a:	3210      	adds	r2, #16
  40168c:	2807      	cmp	r0, #7
  40168e:	920f      	str	r2, [sp, #60]	; 0x3c
  401690:	f8cc 7000 	str.w	r7, [ip]
  401694:	f8cc 3004 	str.w	r3, [ip, #4]
  401698:	900e      	str	r0, [sp, #56]	; 0x38
  40169a:	dded      	ble.n	401678 <_vfiprintf_r+0x2a8>
  40169c:	2a00      	cmp	r2, #0
  40169e:	f040 81c3 	bne.w	401a28 <_vfiprintf_r+0x658>
  4016a2:	3d10      	subs	r5, #16
  4016a4:	2d10      	cmp	r5, #16
  4016a6:	4611      	mov	r1, r2
  4016a8:	f04f 0e01 	mov.w	lr, #1
  4016ac:	46d4      	mov	ip, sl
  4016ae:	dceb      	bgt.n	401688 <_vfiprintf_r+0x2b8>
  4016b0:	4663      	mov	r3, ip
  4016b2:	4671      	mov	r1, lr
  4016b4:	46a4      	mov	ip, r4
  4016b6:	461c      	mov	r4, r3
  4016b8:	442a      	add	r2, r5
  4016ba:	2907      	cmp	r1, #7
  4016bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4016be:	6027      	str	r7, [r4, #0]
  4016c0:	6065      	str	r5, [r4, #4]
  4016c2:	910e      	str	r1, [sp, #56]	; 0x38
  4016c4:	f300 8346 	bgt.w	401d54 <_vfiprintf_r+0x984>
  4016c8:	3408      	adds	r4, #8
  4016ca:	1c48      	adds	r0, r1, #1
  4016cc:	e1bf      	b.n	401a4e <_vfiprintf_r+0x67e>
  4016ce:	4658      	mov	r0, fp
  4016d0:	f048 0804 	orr.w	r8, r8, #4
  4016d4:	f89b 3000 	ldrb.w	r3, [fp]
  4016d8:	e6e3      	b.n	4014a2 <_vfiprintf_r+0xd2>
  4016da:	f018 0320 	ands.w	r3, r8, #32
  4016de:	9503      	str	r5, [sp, #12]
  4016e0:	46b4      	mov	ip, r6
  4016e2:	d062      	beq.n	4017aa <_vfiprintf_r+0x3da>
  4016e4:	9b04      	ldr	r3, [sp, #16]
  4016e6:	3307      	adds	r3, #7
  4016e8:	f023 0307 	bic.w	r3, r3, #7
  4016ec:	f103 0208 	add.w	r2, r3, #8
  4016f0:	e9d3 6700 	ldrd	r6, r7, [r3]
  4016f4:	9204      	str	r2, [sp, #16]
  4016f6:	2300      	movs	r3, #0
  4016f8:	e76d      	b.n	4015d6 <_vfiprintf_r+0x206>
  4016fa:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  4016fe:	f89b 3000 	ldrb.w	r3, [fp]
  401702:	4658      	mov	r0, fp
  401704:	e6cd      	b.n	4014a2 <_vfiprintf_r+0xd2>
  401706:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  40170a:	f89b 3000 	ldrb.w	r3, [fp]
  40170e:	4658      	mov	r0, fp
  401710:	e6c7      	b.n	4014a2 <_vfiprintf_r+0xd2>
  401712:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401716:	2500      	movs	r5, #0
  401718:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40171c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401720:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  401724:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401728:	2a09      	cmp	r2, #9
  40172a:	d9f5      	bls.n	401718 <_vfiprintf_r+0x348>
  40172c:	e6bb      	b.n	4014a6 <_vfiprintf_r+0xd6>
  40172e:	f048 0810 	orr.w	r8, r8, #16
  401732:	f018 0f20 	tst.w	r8, #32
  401736:	9503      	str	r5, [sp, #12]
  401738:	46b4      	mov	ip, r6
  40173a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40173e:	f000 809b 	beq.w	401878 <_vfiprintf_r+0x4a8>
  401742:	9904      	ldr	r1, [sp, #16]
  401744:	3107      	adds	r1, #7
  401746:	f021 0107 	bic.w	r1, r1, #7
  40174a:	e9d1 2300 	ldrd	r2, r3, [r1]
  40174e:	3108      	adds	r1, #8
  401750:	9104      	str	r1, [sp, #16]
  401752:	4616      	mov	r6, r2
  401754:	461f      	mov	r7, r3
  401756:	2a00      	cmp	r2, #0
  401758:	f173 0300 	sbcs.w	r3, r3, #0
  40175c:	f2c0 83a6 	blt.w	401eac <_vfiprintf_r+0xadc>
  401760:	f1bc 0f00 	cmp.w	ip, #0
  401764:	bfa8      	it	ge
  401766:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40176a:	ea56 0207 	orrs.w	r2, r6, r7
  40176e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401772:	46e1      	mov	r9, ip
  401774:	f04f 0301 	mov.w	r3, #1
  401778:	f43f af3c 	beq.w	4015f4 <_vfiprintf_r+0x224>
  40177c:	2b01      	cmp	r3, #1
  40177e:	f47f af40 	bne.w	401602 <_vfiprintf_r+0x232>
  401782:	2f00      	cmp	r7, #0
  401784:	bf08      	it	eq
  401786:	2e0a      	cmpeq	r6, #10
  401788:	f080 8334 	bcs.w	401df4 <_vfiprintf_r+0xa24>
  40178c:	ab2a      	add	r3, sp, #168	; 0xa8
  40178e:	3630      	adds	r6, #48	; 0x30
  401790:	f803 6d41 	strb.w	r6, [r3, #-65]!
  401794:	ebc3 090a 	rsb	r9, r3, sl
  401798:	9307      	str	r3, [sp, #28]
  40179a:	e74b      	b.n	401634 <_vfiprintf_r+0x264>
  40179c:	f048 0810 	orr.w	r8, r8, #16
  4017a0:	f018 0320 	ands.w	r3, r8, #32
  4017a4:	9503      	str	r5, [sp, #12]
  4017a6:	46b4      	mov	ip, r6
  4017a8:	d19c      	bne.n	4016e4 <_vfiprintf_r+0x314>
  4017aa:	f018 0210 	ands.w	r2, r8, #16
  4017ae:	f040 82f7 	bne.w	401da0 <_vfiprintf_r+0x9d0>
  4017b2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  4017b6:	f000 82f3 	beq.w	401da0 <_vfiprintf_r+0x9d0>
  4017ba:	9904      	ldr	r1, [sp, #16]
  4017bc:	4613      	mov	r3, r2
  4017be:	460a      	mov	r2, r1
  4017c0:	3204      	adds	r2, #4
  4017c2:	880e      	ldrh	r6, [r1, #0]
  4017c4:	9204      	str	r2, [sp, #16]
  4017c6:	2700      	movs	r7, #0
  4017c8:	e705      	b.n	4015d6 <_vfiprintf_r+0x206>
  4017ca:	f048 0810 	orr.w	r8, r8, #16
  4017ce:	f018 0f20 	tst.w	r8, #32
  4017d2:	9503      	str	r5, [sp, #12]
  4017d4:	46b4      	mov	ip, r6
  4017d6:	f47f aef4 	bne.w	4015c2 <_vfiprintf_r+0x1f2>
  4017da:	9a04      	ldr	r2, [sp, #16]
  4017dc:	f018 0f10 	tst.w	r8, #16
  4017e0:	4613      	mov	r3, r2
  4017e2:	f040 82e4 	bne.w	401dae <_vfiprintf_r+0x9de>
  4017e6:	f018 0f40 	tst.w	r8, #64	; 0x40
  4017ea:	f000 82e0 	beq.w	401dae <_vfiprintf_r+0x9de>
  4017ee:	8816      	ldrh	r6, [r2, #0]
  4017f0:	3204      	adds	r2, #4
  4017f2:	2700      	movs	r7, #0
  4017f4:	2301      	movs	r3, #1
  4017f6:	9204      	str	r2, [sp, #16]
  4017f8:	e6ed      	b.n	4015d6 <_vfiprintf_r+0x206>
  4017fa:	4a63      	ldr	r2, [pc, #396]	; (401988 <_vfiprintf_r+0x5b8>)
  4017fc:	9503      	str	r5, [sp, #12]
  4017fe:	f018 0f20 	tst.w	r8, #32
  401802:	46b4      	mov	ip, r6
  401804:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401808:	9209      	str	r2, [sp, #36]	; 0x24
  40180a:	f000 8090 	beq.w	40192e <_vfiprintf_r+0x55e>
  40180e:	9a04      	ldr	r2, [sp, #16]
  401810:	3207      	adds	r2, #7
  401812:	f022 0207 	bic.w	r2, r2, #7
  401816:	e9d2 6700 	ldrd	r6, r7, [r2]
  40181a:	f102 0108 	add.w	r1, r2, #8
  40181e:	9104      	str	r1, [sp, #16]
  401820:	f018 0f01 	tst.w	r8, #1
  401824:	f000 8290 	beq.w	401d48 <_vfiprintf_r+0x978>
  401828:	ea56 0207 	orrs.w	r2, r6, r7
  40182c:	f000 828c 	beq.w	401d48 <_vfiprintf_r+0x978>
  401830:	2230      	movs	r2, #48	; 0x30
  401832:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401836:	f048 0802 	orr.w	r8, r8, #2
  40183a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40183e:	2302      	movs	r3, #2
  401840:	e6c9      	b.n	4015d6 <_vfiprintf_r+0x206>
  401842:	9a04      	ldr	r2, [sp, #16]
  401844:	9503      	str	r5, [sp, #12]
  401846:	6813      	ldr	r3, [r2, #0]
  401848:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40184c:	4613      	mov	r3, r2
  40184e:	3304      	adds	r3, #4
  401850:	2601      	movs	r6, #1
  401852:	f04f 0100 	mov.w	r1, #0
  401856:	9304      	str	r3, [sp, #16]
  401858:	ab10      	add	r3, sp, #64	; 0x40
  40185a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40185e:	46b1      	mov	r9, r6
  401860:	9307      	str	r3, [sp, #28]
  401862:	f04f 0c00 	mov.w	ip, #0
  401866:	e6eb      	b.n	401640 <_vfiprintf_r+0x270>
  401868:	f018 0f20 	tst.w	r8, #32
  40186c:	9503      	str	r5, [sp, #12]
  40186e:	46b4      	mov	ip, r6
  401870:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401874:	f47f af65 	bne.w	401742 <_vfiprintf_r+0x372>
  401878:	f018 0f10 	tst.w	r8, #16
  40187c:	f040 82a2 	bne.w	401dc4 <_vfiprintf_r+0x9f4>
  401880:	f018 0f40 	tst.w	r8, #64	; 0x40
  401884:	f000 829e 	beq.w	401dc4 <_vfiprintf_r+0x9f4>
  401888:	9904      	ldr	r1, [sp, #16]
  40188a:	f9b1 6000 	ldrsh.w	r6, [r1]
  40188e:	3104      	adds	r1, #4
  401890:	17f7      	asrs	r7, r6, #31
  401892:	4632      	mov	r2, r6
  401894:	463b      	mov	r3, r7
  401896:	9104      	str	r1, [sp, #16]
  401898:	e75d      	b.n	401756 <_vfiprintf_r+0x386>
  40189a:	9904      	ldr	r1, [sp, #16]
  40189c:	9503      	str	r5, [sp, #12]
  40189e:	2330      	movs	r3, #48	; 0x30
  4018a0:	460a      	mov	r2, r1
  4018a2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  4018a6:	2378      	movs	r3, #120	; 0x78
  4018a8:	3204      	adds	r2, #4
  4018aa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4018ae:	4b37      	ldr	r3, [pc, #220]	; (40198c <_vfiprintf_r+0x5bc>)
  4018b0:	9309      	str	r3, [sp, #36]	; 0x24
  4018b2:	46b4      	mov	ip, r6
  4018b4:	f048 0802 	orr.w	r8, r8, #2
  4018b8:	680e      	ldr	r6, [r1, #0]
  4018ba:	9204      	str	r2, [sp, #16]
  4018bc:	2700      	movs	r7, #0
  4018be:	2302      	movs	r3, #2
  4018c0:	e689      	b.n	4015d6 <_vfiprintf_r+0x206>
  4018c2:	f048 0820 	orr.w	r8, r8, #32
  4018c6:	f89b 3000 	ldrb.w	r3, [fp]
  4018ca:	4658      	mov	r0, fp
  4018cc:	e5e9      	b.n	4014a2 <_vfiprintf_r+0xd2>
  4018ce:	9a04      	ldr	r2, [sp, #16]
  4018d0:	9503      	str	r5, [sp, #12]
  4018d2:	6813      	ldr	r3, [r2, #0]
  4018d4:	9307      	str	r3, [sp, #28]
  4018d6:	f04f 0100 	mov.w	r1, #0
  4018da:	46b4      	mov	ip, r6
  4018dc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4018e0:	1d16      	adds	r6, r2, #4
  4018e2:	2b00      	cmp	r3, #0
  4018e4:	f000 8350 	beq.w	401f88 <_vfiprintf_r+0xbb8>
  4018e8:	f1bc 0f00 	cmp.w	ip, #0
  4018ec:	f2c0 832a 	blt.w	401f44 <_vfiprintf_r+0xb74>
  4018f0:	9d07      	ldr	r5, [sp, #28]
  4018f2:	f8cd c010 	str.w	ip, [sp, #16]
  4018f6:	4662      	mov	r2, ip
  4018f8:	4628      	mov	r0, r5
  4018fa:	2100      	movs	r1, #0
  4018fc:	f001 fbd6 	bl	4030ac <memchr>
  401900:	f8dd c010 	ldr.w	ip, [sp, #16]
  401904:	2800      	cmp	r0, #0
  401906:	f000 8350 	beq.w	401faa <_vfiprintf_r+0xbda>
  40190a:	ebc5 0900 	rsb	r9, r5, r0
  40190e:	9604      	str	r6, [sp, #16]
  401910:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401914:	f04f 0c00 	mov.w	ip, #0
  401918:	e68c      	b.n	401634 <_vfiprintf_r+0x264>
  40191a:	4a1c      	ldr	r2, [pc, #112]	; (40198c <_vfiprintf_r+0x5bc>)
  40191c:	9503      	str	r5, [sp, #12]
  40191e:	f018 0f20 	tst.w	r8, #32
  401922:	46b4      	mov	ip, r6
  401924:	9209      	str	r2, [sp, #36]	; 0x24
  401926:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40192a:	f47f af70 	bne.w	40180e <_vfiprintf_r+0x43e>
  40192e:	9904      	ldr	r1, [sp, #16]
  401930:	f018 0f10 	tst.w	r8, #16
  401934:	460a      	mov	r2, r1
  401936:	f040 8240 	bne.w	401dba <_vfiprintf_r+0x9ea>
  40193a:	f018 0f40 	tst.w	r8, #64	; 0x40
  40193e:	f000 823c 	beq.w	401dba <_vfiprintf_r+0x9ea>
  401942:	3204      	adds	r2, #4
  401944:	880e      	ldrh	r6, [r1, #0]
  401946:	9204      	str	r2, [sp, #16]
  401948:	2700      	movs	r7, #0
  40194a:	e769      	b.n	401820 <_vfiprintf_r+0x450>
  40194c:	f89b 3000 	ldrb.w	r3, [fp]
  401950:	2b6c      	cmp	r3, #108	; 0x6c
  401952:	f000 82ea 	beq.w	401f2a <_vfiprintf_r+0xb5a>
  401956:	f048 0810 	orr.w	r8, r8, #16
  40195a:	4658      	mov	r0, fp
  40195c:	e5a1      	b.n	4014a2 <_vfiprintf_r+0xd2>
  40195e:	9a04      	ldr	r2, [sp, #16]
  401960:	6815      	ldr	r5, [r2, #0]
  401962:	4613      	mov	r3, r2
  401964:	2d00      	cmp	r5, #0
  401966:	f103 0304 	add.w	r3, r3, #4
  40196a:	f2c0 82e6 	blt.w	401f3a <_vfiprintf_r+0xb6a>
  40196e:	9304      	str	r3, [sp, #16]
  401970:	f89b 3000 	ldrb.w	r3, [fp]
  401974:	4658      	mov	r0, fp
  401976:	e594      	b.n	4014a2 <_vfiprintf_r+0xd2>
  401978:	f89b 3000 	ldrb.w	r3, [fp]
  40197c:	4658      	mov	r0, fp
  40197e:	212b      	movs	r1, #43	; 0x2b
  401980:	e58f      	b.n	4014a2 <_vfiprintf_r+0xd2>
  401982:	bf00      	nop
  401984:	00404414 	.word	0x00404414
  401988:	004043e4 	.word	0x004043e4
  40198c:	004043f8 	.word	0x004043f8
  401990:	f89b 3000 	ldrb.w	r3, [fp]
  401994:	2b2a      	cmp	r3, #42	; 0x2a
  401996:	f10b 0001 	add.w	r0, fp, #1
  40199a:	f000 830f 	beq.w	401fbc <_vfiprintf_r+0xbec>
  40199e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4019a2:	2a09      	cmp	r2, #9
  4019a4:	4683      	mov	fp, r0
  4019a6:	f04f 0600 	mov.w	r6, #0
  4019aa:	f63f ad7c 	bhi.w	4014a6 <_vfiprintf_r+0xd6>
  4019ae:	f81b 3b01 	ldrb.w	r3, [fp], #1
  4019b2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4019b6:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  4019ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4019be:	2a09      	cmp	r2, #9
  4019c0:	d9f5      	bls.n	4019ae <_vfiprintf_r+0x5de>
  4019c2:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  4019c6:	e56e      	b.n	4014a6 <_vfiprintf_r+0xd6>
  4019c8:	f018 0f20 	tst.w	r8, #32
  4019cc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4019d0:	f000 8283 	beq.w	401eda <_vfiprintf_r+0xb0a>
  4019d4:	9a04      	ldr	r2, [sp, #16]
  4019d6:	9902      	ldr	r1, [sp, #8]
  4019d8:	6813      	ldr	r3, [r2, #0]
  4019da:	17cf      	asrs	r7, r1, #31
  4019dc:	4608      	mov	r0, r1
  4019de:	3204      	adds	r2, #4
  4019e0:	4639      	mov	r1, r7
  4019e2:	9204      	str	r2, [sp, #16]
  4019e4:	e9c3 0100 	strd	r0, r1, [r3]
  4019e8:	e524      	b.n	401434 <_vfiprintf_r+0x64>
  4019ea:	4658      	mov	r0, fp
  4019ec:	f89b 3000 	ldrb.w	r3, [fp]
  4019f0:	2900      	cmp	r1, #0
  4019f2:	f47f ad56 	bne.w	4014a2 <_vfiprintf_r+0xd2>
  4019f6:	2120      	movs	r1, #32
  4019f8:	e553      	b.n	4014a2 <_vfiprintf_r+0xd2>
  4019fa:	f048 0801 	orr.w	r8, r8, #1
  4019fe:	4658      	mov	r0, fp
  401a00:	f89b 3000 	ldrb.w	r3, [fp]
  401a04:	e54d      	b.n	4014a2 <_vfiprintf_r+0xd2>
  401a06:	9503      	str	r5, [sp, #12]
  401a08:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401a0c:	2b00      	cmp	r3, #0
  401a0e:	f000 809c 	beq.w	401b4a <_vfiprintf_r+0x77a>
  401a12:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401a16:	f04f 0300 	mov.w	r3, #0
  401a1a:	2601      	movs	r6, #1
  401a1c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401a20:	ab10      	add	r3, sp, #64	; 0x40
  401a22:	46b1      	mov	r9, r6
  401a24:	9307      	str	r3, [sp, #28]
  401a26:	e71c      	b.n	401862 <_vfiprintf_r+0x492>
  401a28:	9801      	ldr	r0, [sp, #4]
  401a2a:	9900      	ldr	r1, [sp, #0]
  401a2c:	9308      	str	r3, [sp, #32]
  401a2e:	aa0d      	add	r2, sp, #52	; 0x34
  401a30:	f7ff fc92 	bl	401358 <__sprint_r.part.0>
  401a34:	2800      	cmp	r0, #0
  401a36:	f040 808f 	bne.w	401b58 <_vfiprintf_r+0x788>
  401a3a:	990e      	ldr	r1, [sp, #56]	; 0x38
  401a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401a3e:	9b08      	ldr	r3, [sp, #32]
  401a40:	f101 0e01 	add.w	lr, r1, #1
  401a44:	46d4      	mov	ip, sl
  401a46:	e61c      	b.n	401682 <_vfiprintf_r+0x2b2>
  401a48:	990e      	ldr	r1, [sp, #56]	; 0x38
  401a4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401a4c:	1c48      	adds	r0, r1, #1
  401a4e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401a52:	b16b      	cbz	r3, 401a70 <_vfiprintf_r+0x6a0>
  401a54:	3201      	adds	r2, #1
  401a56:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  401a5a:	2101      	movs	r1, #1
  401a5c:	2807      	cmp	r0, #7
  401a5e:	920f      	str	r2, [sp, #60]	; 0x3c
  401a60:	900e      	str	r0, [sp, #56]	; 0x38
  401a62:	6023      	str	r3, [r4, #0]
  401a64:	6061      	str	r1, [r4, #4]
  401a66:	f300 8134 	bgt.w	401cd2 <_vfiprintf_r+0x902>
  401a6a:	4601      	mov	r1, r0
  401a6c:	3408      	adds	r4, #8
  401a6e:	3001      	adds	r0, #1
  401a70:	9b05      	ldr	r3, [sp, #20]
  401a72:	b163      	cbz	r3, 401a8e <_vfiprintf_r+0x6be>
  401a74:	3202      	adds	r2, #2
  401a76:	a90c      	add	r1, sp, #48	; 0x30
  401a78:	2302      	movs	r3, #2
  401a7a:	2807      	cmp	r0, #7
  401a7c:	920f      	str	r2, [sp, #60]	; 0x3c
  401a7e:	900e      	str	r0, [sp, #56]	; 0x38
  401a80:	e884 000a 	stmia.w	r4, {r1, r3}
  401a84:	f300 8134 	bgt.w	401cf0 <_vfiprintf_r+0x920>
  401a88:	4601      	mov	r1, r0
  401a8a:	3408      	adds	r4, #8
  401a8c:	3001      	adds	r0, #1
  401a8e:	9b06      	ldr	r3, [sp, #24]
  401a90:	2b80      	cmp	r3, #128	; 0x80
  401a92:	f000 80d4 	beq.w	401c3e <_vfiprintf_r+0x86e>
  401a96:	ebc9 070c 	rsb	r7, r9, ip
  401a9a:	2f00      	cmp	r7, #0
  401a9c:	dd2b      	ble.n	401af6 <_vfiprintf_r+0x726>
  401a9e:	2f10      	cmp	r7, #16
  401aa0:	4daa      	ldr	r5, [pc, #680]	; (401d4c <_vfiprintf_r+0x97c>)
  401aa2:	dd1f      	ble.n	401ae4 <_vfiprintf_r+0x714>
  401aa4:	46a6      	mov	lr, r4
  401aa6:	2310      	movs	r3, #16
  401aa8:	9c01      	ldr	r4, [sp, #4]
  401aaa:	e007      	b.n	401abc <_vfiprintf_r+0x6ec>
  401aac:	f101 0c02 	add.w	ip, r1, #2
  401ab0:	f10e 0e08 	add.w	lr, lr, #8
  401ab4:	4601      	mov	r1, r0
  401ab6:	3f10      	subs	r7, #16
  401ab8:	2f10      	cmp	r7, #16
  401aba:	dd11      	ble.n	401ae0 <_vfiprintf_r+0x710>
  401abc:	1c48      	adds	r0, r1, #1
  401abe:	3210      	adds	r2, #16
  401ac0:	2807      	cmp	r0, #7
  401ac2:	920f      	str	r2, [sp, #60]	; 0x3c
  401ac4:	f8ce 5000 	str.w	r5, [lr]
  401ac8:	f8ce 3004 	str.w	r3, [lr, #4]
  401acc:	900e      	str	r0, [sp, #56]	; 0x38
  401ace:	dded      	ble.n	401aac <_vfiprintf_r+0x6dc>
  401ad0:	bb6a      	cbnz	r2, 401b2e <_vfiprintf_r+0x75e>
  401ad2:	3f10      	subs	r7, #16
  401ad4:	2f10      	cmp	r7, #16
  401ad6:	f04f 0c01 	mov.w	ip, #1
  401ada:	4611      	mov	r1, r2
  401adc:	46d6      	mov	lr, sl
  401ade:	dced      	bgt.n	401abc <_vfiprintf_r+0x6ec>
  401ae0:	4674      	mov	r4, lr
  401ae2:	4660      	mov	r0, ip
  401ae4:	443a      	add	r2, r7
  401ae6:	2807      	cmp	r0, #7
  401ae8:	920f      	str	r2, [sp, #60]	; 0x3c
  401aea:	e884 00a0 	stmia.w	r4, {r5, r7}
  401aee:	900e      	str	r0, [sp, #56]	; 0x38
  401af0:	dc3b      	bgt.n	401b6a <_vfiprintf_r+0x79a>
  401af2:	3408      	adds	r4, #8
  401af4:	3001      	adds	r0, #1
  401af6:	eb02 0309 	add.w	r3, r2, r9
  401afa:	9a07      	ldr	r2, [sp, #28]
  401afc:	930f      	str	r3, [sp, #60]	; 0x3c
  401afe:	2807      	cmp	r0, #7
  401b00:	e884 0204 	stmia.w	r4, {r2, r9}
  401b04:	900e      	str	r0, [sp, #56]	; 0x38
  401b06:	dd3d      	ble.n	401b84 <_vfiprintf_r+0x7b4>
  401b08:	2b00      	cmp	r3, #0
  401b0a:	f040 813e 	bne.w	401d8a <_vfiprintf_r+0x9ba>
  401b0e:	f018 0f04 	tst.w	r8, #4
  401b12:	930e      	str	r3, [sp, #56]	; 0x38
  401b14:	f040 812f 	bne.w	401d76 <_vfiprintf_r+0x9a6>
  401b18:	9b02      	ldr	r3, [sp, #8]
  401b1a:	9a03      	ldr	r2, [sp, #12]
  401b1c:	4296      	cmp	r6, r2
  401b1e:	bfac      	ite	ge
  401b20:	199b      	addge	r3, r3, r6
  401b22:	189b      	addlt	r3, r3, r2
  401b24:	9302      	str	r3, [sp, #8]
  401b26:	2300      	movs	r3, #0
  401b28:	930e      	str	r3, [sp, #56]	; 0x38
  401b2a:	4654      	mov	r4, sl
  401b2c:	e482      	b.n	401434 <_vfiprintf_r+0x64>
  401b2e:	4620      	mov	r0, r4
  401b30:	9900      	ldr	r1, [sp, #0]
  401b32:	9305      	str	r3, [sp, #20]
  401b34:	aa0d      	add	r2, sp, #52	; 0x34
  401b36:	f7ff fc0f 	bl	401358 <__sprint_r.part.0>
  401b3a:	b968      	cbnz	r0, 401b58 <_vfiprintf_r+0x788>
  401b3c:	990e      	ldr	r1, [sp, #56]	; 0x38
  401b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401b40:	9b05      	ldr	r3, [sp, #20]
  401b42:	f101 0c01 	add.w	ip, r1, #1
  401b46:	46d6      	mov	lr, sl
  401b48:	e7b5      	b.n	401ab6 <_vfiprintf_r+0x6e6>
  401b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b4c:	b123      	cbz	r3, 401b58 <_vfiprintf_r+0x788>
  401b4e:	9801      	ldr	r0, [sp, #4]
  401b50:	9900      	ldr	r1, [sp, #0]
  401b52:	aa0d      	add	r2, sp, #52	; 0x34
  401b54:	f7ff fc00 	bl	401358 <__sprint_r.part.0>
  401b58:	9b00      	ldr	r3, [sp, #0]
  401b5a:	899b      	ldrh	r3, [r3, #12]
  401b5c:	065b      	lsls	r3, r3, #25
  401b5e:	f53f ad22 	bmi.w	4015a6 <_vfiprintf_r+0x1d6>
  401b62:	9802      	ldr	r0, [sp, #8]
  401b64:	b02b      	add	sp, #172	; 0xac
  401b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b6a:	2a00      	cmp	r2, #0
  401b6c:	f040 8191 	bne.w	401e92 <_vfiprintf_r+0xac2>
  401b70:	2201      	movs	r2, #1
  401b72:	9907      	ldr	r1, [sp, #28]
  401b74:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  401b78:	464b      	mov	r3, r9
  401b7a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401b7e:	911a      	str	r1, [sp, #104]	; 0x68
  401b80:	920e      	str	r2, [sp, #56]	; 0x38
  401b82:	4654      	mov	r4, sl
  401b84:	f104 0208 	add.w	r2, r4, #8
  401b88:	f018 0f04 	tst.w	r8, #4
  401b8c:	d039      	beq.n	401c02 <_vfiprintf_r+0x832>
  401b8e:	9903      	ldr	r1, [sp, #12]
  401b90:	1b8d      	subs	r5, r1, r6
  401b92:	2d00      	cmp	r5, #0
  401b94:	dd35      	ble.n	401c02 <_vfiprintf_r+0x832>
  401b96:	2d10      	cmp	r5, #16
  401b98:	f340 8202 	ble.w	401fa0 <_vfiprintf_r+0xbd0>
  401b9c:	980e      	ldr	r0, [sp, #56]	; 0x38
  401b9e:	4f6c      	ldr	r7, [pc, #432]	; (401d50 <_vfiprintf_r+0x980>)
  401ba0:	f8dd 8004 	ldr.w	r8, [sp, #4]
  401ba4:	f8dd 9000 	ldr.w	r9, [sp]
  401ba8:	2410      	movs	r4, #16
  401baa:	e006      	b.n	401bba <_vfiprintf_r+0x7ea>
  401bac:	f100 0e02 	add.w	lr, r0, #2
  401bb0:	3208      	adds	r2, #8
  401bb2:	4608      	mov	r0, r1
  401bb4:	3d10      	subs	r5, #16
  401bb6:	2d10      	cmp	r5, #16
  401bb8:	dd10      	ble.n	401bdc <_vfiprintf_r+0x80c>
  401bba:	1c41      	adds	r1, r0, #1
  401bbc:	3310      	adds	r3, #16
  401bbe:	2907      	cmp	r1, #7
  401bc0:	930f      	str	r3, [sp, #60]	; 0x3c
  401bc2:	6017      	str	r7, [r2, #0]
  401bc4:	6054      	str	r4, [r2, #4]
  401bc6:	910e      	str	r1, [sp, #56]	; 0x38
  401bc8:	ddf0      	ble.n	401bac <_vfiprintf_r+0x7dc>
  401bca:	2b00      	cmp	r3, #0
  401bcc:	d12a      	bne.n	401c24 <_vfiprintf_r+0x854>
  401bce:	3d10      	subs	r5, #16
  401bd0:	2d10      	cmp	r5, #16
  401bd2:	f04f 0e01 	mov.w	lr, #1
  401bd6:	4618      	mov	r0, r3
  401bd8:	4652      	mov	r2, sl
  401bda:	dcee      	bgt.n	401bba <_vfiprintf_r+0x7ea>
  401bdc:	442b      	add	r3, r5
  401bde:	f1be 0f07 	cmp.w	lr, #7
  401be2:	930f      	str	r3, [sp, #60]	; 0x3c
  401be4:	6017      	str	r7, [r2, #0]
  401be6:	6055      	str	r5, [r2, #4]
  401be8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401bec:	dd09      	ble.n	401c02 <_vfiprintf_r+0x832>
  401bee:	2b00      	cmp	r3, #0
  401bf0:	d092      	beq.n	401b18 <_vfiprintf_r+0x748>
  401bf2:	9801      	ldr	r0, [sp, #4]
  401bf4:	9900      	ldr	r1, [sp, #0]
  401bf6:	aa0d      	add	r2, sp, #52	; 0x34
  401bf8:	f7ff fbae 	bl	401358 <__sprint_r.part.0>
  401bfc:	2800      	cmp	r0, #0
  401bfe:	d1ab      	bne.n	401b58 <_vfiprintf_r+0x788>
  401c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c02:	9a02      	ldr	r2, [sp, #8]
  401c04:	9903      	ldr	r1, [sp, #12]
  401c06:	428e      	cmp	r6, r1
  401c08:	bfac      	ite	ge
  401c0a:	1992      	addge	r2, r2, r6
  401c0c:	1852      	addlt	r2, r2, r1
  401c0e:	9202      	str	r2, [sp, #8]
  401c10:	2b00      	cmp	r3, #0
  401c12:	d088      	beq.n	401b26 <_vfiprintf_r+0x756>
  401c14:	9801      	ldr	r0, [sp, #4]
  401c16:	9900      	ldr	r1, [sp, #0]
  401c18:	aa0d      	add	r2, sp, #52	; 0x34
  401c1a:	f7ff fb9d 	bl	401358 <__sprint_r.part.0>
  401c1e:	2800      	cmp	r0, #0
  401c20:	d081      	beq.n	401b26 <_vfiprintf_r+0x756>
  401c22:	e799      	b.n	401b58 <_vfiprintf_r+0x788>
  401c24:	4640      	mov	r0, r8
  401c26:	4649      	mov	r1, r9
  401c28:	aa0d      	add	r2, sp, #52	; 0x34
  401c2a:	f7ff fb95 	bl	401358 <__sprint_r.part.0>
  401c2e:	2800      	cmp	r0, #0
  401c30:	d192      	bne.n	401b58 <_vfiprintf_r+0x788>
  401c32:	980e      	ldr	r0, [sp, #56]	; 0x38
  401c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c36:	f100 0e01 	add.w	lr, r0, #1
  401c3a:	4652      	mov	r2, sl
  401c3c:	e7ba      	b.n	401bb4 <_vfiprintf_r+0x7e4>
  401c3e:	9b03      	ldr	r3, [sp, #12]
  401c40:	1b9f      	subs	r7, r3, r6
  401c42:	2f00      	cmp	r7, #0
  401c44:	f77f af27 	ble.w	401a96 <_vfiprintf_r+0x6c6>
  401c48:	2f10      	cmp	r7, #16
  401c4a:	4d40      	ldr	r5, [pc, #256]	; (401d4c <_vfiprintf_r+0x97c>)
  401c4c:	f340 81b4 	ble.w	401fb8 <_vfiprintf_r+0xbe8>
  401c50:	4620      	mov	r0, r4
  401c52:	2310      	movs	r3, #16
  401c54:	4664      	mov	r4, ip
  401c56:	4684      	mov	ip, r0
  401c58:	e007      	b.n	401c6a <_vfiprintf_r+0x89a>
  401c5a:	f101 0e02 	add.w	lr, r1, #2
  401c5e:	f10c 0c08 	add.w	ip, ip, #8
  401c62:	4601      	mov	r1, r0
  401c64:	3f10      	subs	r7, #16
  401c66:	2f10      	cmp	r7, #16
  401c68:	dd11      	ble.n	401c8e <_vfiprintf_r+0x8be>
  401c6a:	1c48      	adds	r0, r1, #1
  401c6c:	3210      	adds	r2, #16
  401c6e:	2807      	cmp	r0, #7
  401c70:	920f      	str	r2, [sp, #60]	; 0x3c
  401c72:	f8cc 5000 	str.w	r5, [ip]
  401c76:	f8cc 3004 	str.w	r3, [ip, #4]
  401c7a:	900e      	str	r0, [sp, #56]	; 0x38
  401c7c:	dded      	ble.n	401c5a <_vfiprintf_r+0x88a>
  401c7e:	b9c2      	cbnz	r2, 401cb2 <_vfiprintf_r+0x8e2>
  401c80:	3f10      	subs	r7, #16
  401c82:	2f10      	cmp	r7, #16
  401c84:	f04f 0e01 	mov.w	lr, #1
  401c88:	4611      	mov	r1, r2
  401c8a:	46d4      	mov	ip, sl
  401c8c:	dced      	bgt.n	401c6a <_vfiprintf_r+0x89a>
  401c8e:	4663      	mov	r3, ip
  401c90:	46a4      	mov	ip, r4
  401c92:	461c      	mov	r4, r3
  401c94:	443a      	add	r2, r7
  401c96:	f1be 0f07 	cmp.w	lr, #7
  401c9a:	920f      	str	r2, [sp, #60]	; 0x3c
  401c9c:	e884 00a0 	stmia.w	r4, {r5, r7}
  401ca0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401ca4:	f300 80ef 	bgt.w	401e86 <_vfiprintf_r+0xab6>
  401ca8:	3408      	adds	r4, #8
  401caa:	f10e 0001 	add.w	r0, lr, #1
  401cae:	4671      	mov	r1, lr
  401cb0:	e6f1      	b.n	401a96 <_vfiprintf_r+0x6c6>
  401cb2:	9801      	ldr	r0, [sp, #4]
  401cb4:	9900      	ldr	r1, [sp, #0]
  401cb6:	9305      	str	r3, [sp, #20]
  401cb8:	aa0d      	add	r2, sp, #52	; 0x34
  401cba:	f7ff fb4d 	bl	401358 <__sprint_r.part.0>
  401cbe:	2800      	cmp	r0, #0
  401cc0:	f47f af4a 	bne.w	401b58 <_vfiprintf_r+0x788>
  401cc4:	990e      	ldr	r1, [sp, #56]	; 0x38
  401cc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401cc8:	9b05      	ldr	r3, [sp, #20]
  401cca:	f101 0e01 	add.w	lr, r1, #1
  401cce:	46d4      	mov	ip, sl
  401cd0:	e7c8      	b.n	401c64 <_vfiprintf_r+0x894>
  401cd2:	2a00      	cmp	r2, #0
  401cd4:	f040 80c6 	bne.w	401e64 <_vfiprintf_r+0xa94>
  401cd8:	9b05      	ldr	r3, [sp, #20]
  401cda:	2b00      	cmp	r3, #0
  401cdc:	f000 8086 	beq.w	401dec <_vfiprintf_r+0xa1c>
  401ce0:	aa0c      	add	r2, sp, #48	; 0x30
  401ce2:	2302      	movs	r3, #2
  401ce4:	921a      	str	r2, [sp, #104]	; 0x68
  401ce6:	4608      	mov	r0, r1
  401ce8:	931b      	str	r3, [sp, #108]	; 0x6c
  401cea:	461a      	mov	r2, r3
  401cec:	4654      	mov	r4, sl
  401cee:	e6cb      	b.n	401a88 <_vfiprintf_r+0x6b8>
  401cf0:	2a00      	cmp	r2, #0
  401cf2:	f040 80a6 	bne.w	401e42 <_vfiprintf_r+0xa72>
  401cf6:	2001      	movs	r0, #1
  401cf8:	4611      	mov	r1, r2
  401cfa:	4654      	mov	r4, sl
  401cfc:	e6c7      	b.n	401a8e <_vfiprintf_r+0x6be>
  401cfe:	bb03      	cbnz	r3, 401d42 <_vfiprintf_r+0x972>
  401d00:	f018 0f01 	tst.w	r8, #1
  401d04:	d01d      	beq.n	401d42 <_vfiprintf_r+0x972>
  401d06:	ab2a      	add	r3, sp, #168	; 0xa8
  401d08:	2230      	movs	r2, #48	; 0x30
  401d0a:	f803 2d41 	strb.w	r2, [r3, #-65]!
  401d0e:	ebc3 090a 	rsb	r9, r3, sl
  401d12:	9307      	str	r3, [sp, #28]
  401d14:	e48e      	b.n	401634 <_vfiprintf_r+0x264>
  401d16:	9809      	ldr	r0, [sp, #36]	; 0x24
  401d18:	46d1      	mov	r9, sl
  401d1a:	0933      	lsrs	r3, r6, #4
  401d1c:	f006 010f 	and.w	r1, r6, #15
  401d20:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401d24:	093a      	lsrs	r2, r7, #4
  401d26:	461e      	mov	r6, r3
  401d28:	4617      	mov	r7, r2
  401d2a:	5c43      	ldrb	r3, [r0, r1]
  401d2c:	f809 3d01 	strb.w	r3, [r9, #-1]!
  401d30:	ea56 0307 	orrs.w	r3, r6, r7
  401d34:	d1f1      	bne.n	401d1a <_vfiprintf_r+0x94a>
  401d36:	464b      	mov	r3, r9
  401d38:	f8cd 901c 	str.w	r9, [sp, #28]
  401d3c:	ebc3 090a 	rsb	r9, r3, sl
  401d40:	e478      	b.n	401634 <_vfiprintf_r+0x264>
  401d42:	f8cd a01c 	str.w	sl, [sp, #28]
  401d46:	e475      	b.n	401634 <_vfiprintf_r+0x264>
  401d48:	2302      	movs	r3, #2
  401d4a:	e444      	b.n	4015d6 <_vfiprintf_r+0x206>
  401d4c:	004043d4 	.word	0x004043d4
  401d50:	00404414 	.word	0x00404414
  401d54:	2a00      	cmp	r2, #0
  401d56:	f040 80d7 	bne.w	401f08 <_vfiprintf_r+0xb38>
  401d5a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401d5e:	2b00      	cmp	r3, #0
  401d60:	f000 80ae 	beq.w	401ec0 <_vfiprintf_r+0xaf0>
  401d64:	2301      	movs	r3, #1
  401d66:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401d6a:	4618      	mov	r0, r3
  401d6c:	931b      	str	r3, [sp, #108]	; 0x6c
  401d6e:	461a      	mov	r2, r3
  401d70:	911a      	str	r1, [sp, #104]	; 0x68
  401d72:	4654      	mov	r4, sl
  401d74:	e679      	b.n	401a6a <_vfiprintf_r+0x69a>
  401d76:	9a03      	ldr	r2, [sp, #12]
  401d78:	1b95      	subs	r5, r2, r6
  401d7a:	2d00      	cmp	r5, #0
  401d7c:	4652      	mov	r2, sl
  401d7e:	f73f af0a 	bgt.w	401b96 <_vfiprintf_r+0x7c6>
  401d82:	e6c9      	b.n	401b18 <_vfiprintf_r+0x748>
  401d84:	465d      	mov	r5, fp
  401d86:	f7ff bb7c 	b.w	401482 <_vfiprintf_r+0xb2>
  401d8a:	9801      	ldr	r0, [sp, #4]
  401d8c:	9900      	ldr	r1, [sp, #0]
  401d8e:	aa0d      	add	r2, sp, #52	; 0x34
  401d90:	f7ff fae2 	bl	401358 <__sprint_r.part.0>
  401d94:	2800      	cmp	r0, #0
  401d96:	f47f aedf 	bne.w	401b58 <_vfiprintf_r+0x788>
  401d9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401d9c:	4652      	mov	r2, sl
  401d9e:	e6f3      	b.n	401b88 <_vfiprintf_r+0x7b8>
  401da0:	9904      	ldr	r1, [sp, #16]
  401da2:	460a      	mov	r2, r1
  401da4:	3204      	adds	r2, #4
  401da6:	680e      	ldr	r6, [r1, #0]
  401da8:	9204      	str	r2, [sp, #16]
  401daa:	2700      	movs	r7, #0
  401dac:	e413      	b.n	4015d6 <_vfiprintf_r+0x206>
  401dae:	3204      	adds	r2, #4
  401db0:	681e      	ldr	r6, [r3, #0]
  401db2:	9204      	str	r2, [sp, #16]
  401db4:	2301      	movs	r3, #1
  401db6:	2700      	movs	r7, #0
  401db8:	e40d      	b.n	4015d6 <_vfiprintf_r+0x206>
  401dba:	6816      	ldr	r6, [r2, #0]
  401dbc:	3204      	adds	r2, #4
  401dbe:	9204      	str	r2, [sp, #16]
  401dc0:	2700      	movs	r7, #0
  401dc2:	e52d      	b.n	401820 <_vfiprintf_r+0x450>
  401dc4:	9a04      	ldr	r2, [sp, #16]
  401dc6:	6816      	ldr	r6, [r2, #0]
  401dc8:	4613      	mov	r3, r2
  401dca:	3304      	adds	r3, #4
  401dcc:	17f7      	asrs	r7, r6, #31
  401dce:	9304      	str	r3, [sp, #16]
  401dd0:	4632      	mov	r2, r6
  401dd2:	463b      	mov	r3, r7
  401dd4:	e4bf      	b.n	401756 <_vfiprintf_r+0x386>
  401dd6:	9801      	ldr	r0, [sp, #4]
  401dd8:	9900      	ldr	r1, [sp, #0]
  401dda:	aa0d      	add	r2, sp, #52	; 0x34
  401ddc:	f7ff fabc 	bl	401358 <__sprint_r.part.0>
  401de0:	2800      	cmp	r0, #0
  401de2:	f47f aeb9 	bne.w	401b58 <_vfiprintf_r+0x788>
  401de6:	4654      	mov	r4, sl
  401de8:	f7ff bbbe 	b.w	401568 <_vfiprintf_r+0x198>
  401dec:	4608      	mov	r0, r1
  401dee:	4654      	mov	r4, sl
  401df0:	4611      	mov	r1, r2
  401df2:	e64c      	b.n	401a8e <_vfiprintf_r+0x6be>
  401df4:	46d1      	mov	r9, sl
  401df6:	f8cd c014 	str.w	ip, [sp, #20]
  401dfa:	4630      	mov	r0, r6
  401dfc:	4639      	mov	r1, r7
  401dfe:	220a      	movs	r2, #10
  401e00:	2300      	movs	r3, #0
  401e02:	f001 fe7d 	bl	403b00 <__aeabi_uldivmod>
  401e06:	3230      	adds	r2, #48	; 0x30
  401e08:	4630      	mov	r0, r6
  401e0a:	4639      	mov	r1, r7
  401e0c:	f809 2d01 	strb.w	r2, [r9, #-1]!
  401e10:	2300      	movs	r3, #0
  401e12:	220a      	movs	r2, #10
  401e14:	f001 fe74 	bl	403b00 <__aeabi_uldivmod>
  401e18:	4606      	mov	r6, r0
  401e1a:	460f      	mov	r7, r1
  401e1c:	ea56 0307 	orrs.w	r3, r6, r7
  401e20:	d1eb      	bne.n	401dfa <_vfiprintf_r+0xa2a>
  401e22:	f8dd c014 	ldr.w	ip, [sp, #20]
  401e26:	e786      	b.n	401d36 <_vfiprintf_r+0x966>
  401e28:	2b30      	cmp	r3, #48	; 0x30
  401e2a:	9b07      	ldr	r3, [sp, #28]
  401e2c:	d086      	beq.n	401d3c <_vfiprintf_r+0x96c>
  401e2e:	3b01      	subs	r3, #1
  401e30:	461a      	mov	r2, r3
  401e32:	9307      	str	r3, [sp, #28]
  401e34:	2330      	movs	r3, #48	; 0x30
  401e36:	ebc2 090a 	rsb	r9, r2, sl
  401e3a:	f801 3c01 	strb.w	r3, [r1, #-1]
  401e3e:	f7ff bbf9 	b.w	401634 <_vfiprintf_r+0x264>
  401e42:	9801      	ldr	r0, [sp, #4]
  401e44:	9900      	ldr	r1, [sp, #0]
  401e46:	f8cd c014 	str.w	ip, [sp, #20]
  401e4a:	aa0d      	add	r2, sp, #52	; 0x34
  401e4c:	f7ff fa84 	bl	401358 <__sprint_r.part.0>
  401e50:	2800      	cmp	r0, #0
  401e52:	f47f ae81 	bne.w	401b58 <_vfiprintf_r+0x788>
  401e56:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e5a:	f8dd c014 	ldr.w	ip, [sp, #20]
  401e5e:	1c48      	adds	r0, r1, #1
  401e60:	4654      	mov	r4, sl
  401e62:	e614      	b.n	401a8e <_vfiprintf_r+0x6be>
  401e64:	9801      	ldr	r0, [sp, #4]
  401e66:	9900      	ldr	r1, [sp, #0]
  401e68:	f8cd c020 	str.w	ip, [sp, #32]
  401e6c:	aa0d      	add	r2, sp, #52	; 0x34
  401e6e:	f7ff fa73 	bl	401358 <__sprint_r.part.0>
  401e72:	2800      	cmp	r0, #0
  401e74:	f47f ae70 	bne.w	401b58 <_vfiprintf_r+0x788>
  401e78:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e7c:	f8dd c020 	ldr.w	ip, [sp, #32]
  401e80:	1c48      	adds	r0, r1, #1
  401e82:	4654      	mov	r4, sl
  401e84:	e5f4      	b.n	401a70 <_vfiprintf_r+0x6a0>
  401e86:	2a00      	cmp	r2, #0
  401e88:	d167      	bne.n	401f5a <_vfiprintf_r+0xb8a>
  401e8a:	2001      	movs	r0, #1
  401e8c:	4611      	mov	r1, r2
  401e8e:	4654      	mov	r4, sl
  401e90:	e601      	b.n	401a96 <_vfiprintf_r+0x6c6>
  401e92:	9801      	ldr	r0, [sp, #4]
  401e94:	9900      	ldr	r1, [sp, #0]
  401e96:	aa0d      	add	r2, sp, #52	; 0x34
  401e98:	f7ff fa5e 	bl	401358 <__sprint_r.part.0>
  401e9c:	2800      	cmp	r0, #0
  401e9e:	f47f ae5b 	bne.w	401b58 <_vfiprintf_r+0x788>
  401ea2:	980e      	ldr	r0, [sp, #56]	; 0x38
  401ea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401ea6:	3001      	adds	r0, #1
  401ea8:	4654      	mov	r4, sl
  401eaa:	e624      	b.n	401af6 <_vfiprintf_r+0x726>
  401eac:	252d      	movs	r5, #45	; 0x2d
  401eae:	4276      	negs	r6, r6
  401eb0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401eb4:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  401eb8:	46e1      	mov	r9, ip
  401eba:	2301      	movs	r3, #1
  401ebc:	f7ff bb91 	b.w	4015e2 <_vfiprintf_r+0x212>
  401ec0:	9b05      	ldr	r3, [sp, #20]
  401ec2:	4611      	mov	r1, r2
  401ec4:	2001      	movs	r0, #1
  401ec6:	4654      	mov	r4, sl
  401ec8:	2b00      	cmp	r3, #0
  401eca:	f43f ade4 	beq.w	401a96 <_vfiprintf_r+0x6c6>
  401ece:	aa0c      	add	r2, sp, #48	; 0x30
  401ed0:	2302      	movs	r3, #2
  401ed2:	e88a 000c 	stmia.w	sl, {r2, r3}
  401ed6:	461a      	mov	r2, r3
  401ed8:	e5d6      	b.n	401a88 <_vfiprintf_r+0x6b8>
  401eda:	f018 0f10 	tst.w	r8, #16
  401ede:	d10b      	bne.n	401ef8 <_vfiprintf_r+0xb28>
  401ee0:	f018 0f40 	tst.w	r8, #64	; 0x40
  401ee4:	d008      	beq.n	401ef8 <_vfiprintf_r+0xb28>
  401ee6:	9a04      	ldr	r2, [sp, #16]
  401ee8:	6813      	ldr	r3, [r2, #0]
  401eea:	3204      	adds	r2, #4
  401eec:	9204      	str	r2, [sp, #16]
  401eee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  401ef2:	801a      	strh	r2, [r3, #0]
  401ef4:	f7ff ba9e 	b.w	401434 <_vfiprintf_r+0x64>
  401ef8:	9a04      	ldr	r2, [sp, #16]
  401efa:	6813      	ldr	r3, [r2, #0]
  401efc:	3204      	adds	r2, #4
  401efe:	9204      	str	r2, [sp, #16]
  401f00:	9a02      	ldr	r2, [sp, #8]
  401f02:	601a      	str	r2, [r3, #0]
  401f04:	f7ff ba96 	b.w	401434 <_vfiprintf_r+0x64>
  401f08:	9801      	ldr	r0, [sp, #4]
  401f0a:	9900      	ldr	r1, [sp, #0]
  401f0c:	f8cd c020 	str.w	ip, [sp, #32]
  401f10:	aa0d      	add	r2, sp, #52	; 0x34
  401f12:	f7ff fa21 	bl	401358 <__sprint_r.part.0>
  401f16:	2800      	cmp	r0, #0
  401f18:	f47f ae1e 	bne.w	401b58 <_vfiprintf_r+0x788>
  401f1c:	990e      	ldr	r1, [sp, #56]	; 0x38
  401f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f20:	f8dd c020 	ldr.w	ip, [sp, #32]
  401f24:	1c48      	adds	r0, r1, #1
  401f26:	4654      	mov	r4, sl
  401f28:	e591      	b.n	401a4e <_vfiprintf_r+0x67e>
  401f2a:	f048 0820 	orr.w	r8, r8, #32
  401f2e:	f10b 0001 	add.w	r0, fp, #1
  401f32:	f89b 3001 	ldrb.w	r3, [fp, #1]
  401f36:	f7ff bab4 	b.w	4014a2 <_vfiprintf_r+0xd2>
  401f3a:	426d      	negs	r5, r5
  401f3c:	9304      	str	r3, [sp, #16]
  401f3e:	4658      	mov	r0, fp
  401f40:	f7ff bbc6 	b.w	4016d0 <_vfiprintf_r+0x300>
  401f44:	9807      	ldr	r0, [sp, #28]
  401f46:	9604      	str	r6, [sp, #16]
  401f48:	f7ff f9d8 	bl	4012fc <strlen>
  401f4c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401f50:	4681      	mov	r9, r0
  401f52:	f04f 0c00 	mov.w	ip, #0
  401f56:	f7ff bb6d 	b.w	401634 <_vfiprintf_r+0x264>
  401f5a:	9801      	ldr	r0, [sp, #4]
  401f5c:	9900      	ldr	r1, [sp, #0]
  401f5e:	f8cd c014 	str.w	ip, [sp, #20]
  401f62:	aa0d      	add	r2, sp, #52	; 0x34
  401f64:	f7ff f9f8 	bl	401358 <__sprint_r.part.0>
  401f68:	2800      	cmp	r0, #0
  401f6a:	f47f adf5 	bne.w	401b58 <_vfiprintf_r+0x788>
  401f6e:	990e      	ldr	r1, [sp, #56]	; 0x38
  401f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f72:	f8dd c014 	ldr.w	ip, [sp, #20]
  401f76:	1c48      	adds	r0, r1, #1
  401f78:	4654      	mov	r4, sl
  401f7a:	e58c      	b.n	401a96 <_vfiprintf_r+0x6c6>
  401f7c:	990e      	ldr	r1, [sp, #56]	; 0x38
  401f7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f80:	4f15      	ldr	r7, [pc, #84]	; (401fd8 <_vfiprintf_r+0xc08>)
  401f82:	3101      	adds	r1, #1
  401f84:	f7ff bb98 	b.w	4016b8 <_vfiprintf_r+0x2e8>
  401f88:	f1bc 0f06 	cmp.w	ip, #6
  401f8c:	bf28      	it	cs
  401f8e:	f04f 0c06 	movcs.w	ip, #6
  401f92:	4b12      	ldr	r3, [pc, #72]	; (401fdc <_vfiprintf_r+0xc0c>)
  401f94:	9604      	str	r6, [sp, #16]
  401f96:	46e1      	mov	r9, ip
  401f98:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  401f9c:	9307      	str	r3, [sp, #28]
  401f9e:	e460      	b.n	401862 <_vfiprintf_r+0x492>
  401fa0:	990e      	ldr	r1, [sp, #56]	; 0x38
  401fa2:	4f0d      	ldr	r7, [pc, #52]	; (401fd8 <_vfiprintf_r+0xc08>)
  401fa4:	f101 0e01 	add.w	lr, r1, #1
  401fa8:	e618      	b.n	401bdc <_vfiprintf_r+0x80c>
  401faa:	46e1      	mov	r9, ip
  401fac:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401fb0:	9604      	str	r6, [sp, #16]
  401fb2:	4684      	mov	ip, r0
  401fb4:	f7ff bb3e 	b.w	401634 <_vfiprintf_r+0x264>
  401fb8:	4686      	mov	lr, r0
  401fba:	e66b      	b.n	401c94 <_vfiprintf_r+0x8c4>
  401fbc:	9a04      	ldr	r2, [sp, #16]
  401fbe:	f89b 3001 	ldrb.w	r3, [fp, #1]
  401fc2:	6816      	ldr	r6, [r2, #0]
  401fc4:	3204      	adds	r2, #4
  401fc6:	2e00      	cmp	r6, #0
  401fc8:	9204      	str	r2, [sp, #16]
  401fca:	f6bf aa6a 	bge.w	4014a2 <_vfiprintf_r+0xd2>
  401fce:	f04f 36ff 	mov.w	r6, #4294967295
  401fd2:	f7ff ba66 	b.w	4014a2 <_vfiprintf_r+0xd2>
  401fd6:	bf00      	nop
  401fd8:	00404414 	.word	0x00404414
  401fdc:	0040440c 	.word	0x0040440c

00401fe0 <__sbprintf>:
  401fe0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  401fe4:	460c      	mov	r4, r1
  401fe6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401fea:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  401fee:	69e7      	ldr	r7, [r4, #28]
  401ff0:	6e49      	ldr	r1, [r1, #100]	; 0x64
  401ff2:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  401ff6:	9119      	str	r1, [sp, #100]	; 0x64
  401ff8:	ad1a      	add	r5, sp, #104	; 0x68
  401ffa:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401ffe:	f02e 0e02 	bic.w	lr, lr, #2
  402002:	f04f 0c00 	mov.w	ip, #0
  402006:	9707      	str	r7, [sp, #28]
  402008:	4669      	mov	r1, sp
  40200a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40200c:	9500      	str	r5, [sp, #0]
  40200e:	9504      	str	r5, [sp, #16]
  402010:	9602      	str	r6, [sp, #8]
  402012:	9605      	str	r6, [sp, #20]
  402014:	f8ad e00c 	strh.w	lr, [sp, #12]
  402018:	f8ad 900e 	strh.w	r9, [sp, #14]
  40201c:	9709      	str	r7, [sp, #36]	; 0x24
  40201e:	f8cd c018 	str.w	ip, [sp, #24]
  402022:	4606      	mov	r6, r0
  402024:	f7ff f9d4 	bl	4013d0 <_vfiprintf_r>
  402028:	1e05      	subs	r5, r0, #0
  40202a:	db07      	blt.n	40203c <__sbprintf+0x5c>
  40202c:	4630      	mov	r0, r6
  40202e:	4669      	mov	r1, sp
  402030:	f000 f92e 	bl	402290 <_fflush_r>
  402034:	2800      	cmp	r0, #0
  402036:	bf18      	it	ne
  402038:	f04f 35ff 	movne.w	r5, #4294967295
  40203c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402040:	065b      	lsls	r3, r3, #25
  402042:	d503      	bpl.n	40204c <__sbprintf+0x6c>
  402044:	89a3      	ldrh	r3, [r4, #12]
  402046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40204a:	81a3      	strh	r3, [r4, #12]
  40204c:	4628      	mov	r0, r5
  40204e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402052:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  402056:	bf00      	nop

00402058 <__swsetup_r>:
  402058:	b538      	push	{r3, r4, r5, lr}
  40205a:	4b2f      	ldr	r3, [pc, #188]	; (402118 <__swsetup_r+0xc0>)
  40205c:	681b      	ldr	r3, [r3, #0]
  40205e:	4605      	mov	r5, r0
  402060:	460c      	mov	r4, r1
  402062:	b113      	cbz	r3, 40206a <__swsetup_r+0x12>
  402064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402066:	2a00      	cmp	r2, #0
  402068:	d036      	beq.n	4020d8 <__swsetup_r+0x80>
  40206a:	89a2      	ldrh	r2, [r4, #12]
  40206c:	b293      	uxth	r3, r2
  40206e:	0718      	lsls	r0, r3, #28
  402070:	d50c      	bpl.n	40208c <__swsetup_r+0x34>
  402072:	6920      	ldr	r0, [r4, #16]
  402074:	b1a8      	cbz	r0, 4020a2 <__swsetup_r+0x4a>
  402076:	f013 0201 	ands.w	r2, r3, #1
  40207a:	d01e      	beq.n	4020ba <__swsetup_r+0x62>
  40207c:	6963      	ldr	r3, [r4, #20]
  40207e:	2200      	movs	r2, #0
  402080:	425b      	negs	r3, r3
  402082:	61a3      	str	r3, [r4, #24]
  402084:	60a2      	str	r2, [r4, #8]
  402086:	b1f0      	cbz	r0, 4020c6 <__swsetup_r+0x6e>
  402088:	2000      	movs	r0, #0
  40208a:	bd38      	pop	{r3, r4, r5, pc}
  40208c:	06d9      	lsls	r1, r3, #27
  40208e:	d53b      	bpl.n	402108 <__swsetup_r+0xb0>
  402090:	0758      	lsls	r0, r3, #29
  402092:	d425      	bmi.n	4020e0 <__swsetup_r+0x88>
  402094:	6920      	ldr	r0, [r4, #16]
  402096:	f042 0308 	orr.w	r3, r2, #8
  40209a:	81a3      	strh	r3, [r4, #12]
  40209c:	b29b      	uxth	r3, r3
  40209e:	2800      	cmp	r0, #0
  4020a0:	d1e9      	bne.n	402076 <__swsetup_r+0x1e>
  4020a2:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4020a6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4020aa:	d0e4      	beq.n	402076 <__swsetup_r+0x1e>
  4020ac:	4628      	mov	r0, r5
  4020ae:	4621      	mov	r1, r4
  4020b0:	f000 fcf2 	bl	402a98 <__smakebuf_r>
  4020b4:	89a3      	ldrh	r3, [r4, #12]
  4020b6:	6920      	ldr	r0, [r4, #16]
  4020b8:	e7dd      	b.n	402076 <__swsetup_r+0x1e>
  4020ba:	0799      	lsls	r1, r3, #30
  4020bc:	bf58      	it	pl
  4020be:	6962      	ldrpl	r2, [r4, #20]
  4020c0:	60a2      	str	r2, [r4, #8]
  4020c2:	2800      	cmp	r0, #0
  4020c4:	d1e0      	bne.n	402088 <__swsetup_r+0x30>
  4020c6:	89a3      	ldrh	r3, [r4, #12]
  4020c8:	061a      	lsls	r2, r3, #24
  4020ca:	d5de      	bpl.n	40208a <__swsetup_r+0x32>
  4020cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4020d0:	81a3      	strh	r3, [r4, #12]
  4020d2:	f04f 30ff 	mov.w	r0, #4294967295
  4020d6:	bd38      	pop	{r3, r4, r5, pc}
  4020d8:	4618      	mov	r0, r3
  4020da:	f000 f96d 	bl	4023b8 <__sinit>
  4020de:	e7c4      	b.n	40206a <__swsetup_r+0x12>
  4020e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4020e2:	b149      	cbz	r1, 4020f8 <__swsetup_r+0xa0>
  4020e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4020e8:	4299      	cmp	r1, r3
  4020ea:	d003      	beq.n	4020f4 <__swsetup_r+0x9c>
  4020ec:	4628      	mov	r0, r5
  4020ee:	f000 fa3b 	bl	402568 <_free_r>
  4020f2:	89a2      	ldrh	r2, [r4, #12]
  4020f4:	2300      	movs	r3, #0
  4020f6:	6323      	str	r3, [r4, #48]	; 0x30
  4020f8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4020fc:	2300      	movs	r3, #0
  4020fe:	6920      	ldr	r0, [r4, #16]
  402100:	6063      	str	r3, [r4, #4]
  402102:	b292      	uxth	r2, r2
  402104:	6020      	str	r0, [r4, #0]
  402106:	e7c6      	b.n	402096 <__swsetup_r+0x3e>
  402108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40210c:	2309      	movs	r3, #9
  40210e:	602b      	str	r3, [r5, #0]
  402110:	f04f 30ff 	mov.w	r0, #4294967295
  402114:	81a2      	strh	r2, [r4, #12]
  402116:	bd38      	pop	{r3, r4, r5, pc}
  402118:	20000430 	.word	0x20000430

0040211c <register_fini>:
  40211c:	4b02      	ldr	r3, [pc, #8]	; (402128 <register_fini+0xc>)
  40211e:	b113      	cbz	r3, 402126 <register_fini+0xa>
  402120:	4802      	ldr	r0, [pc, #8]	; (40212c <register_fini+0x10>)
  402122:	f000 b805 	b.w	402130 <atexit>
  402126:	4770      	bx	lr
  402128:	00000000 	.word	0x00000000
  40212c:	004023cd 	.word	0x004023cd

00402130 <atexit>:
  402130:	4601      	mov	r1, r0
  402132:	2000      	movs	r0, #0
  402134:	4602      	mov	r2, r0
  402136:	4603      	mov	r3, r0
  402138:	f001 bbee 	b.w	403918 <__register_exitproc>

0040213c <__sflush_r>:
  40213c:	898b      	ldrh	r3, [r1, #12]
  40213e:	b29a      	uxth	r2, r3
  402140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402144:	460d      	mov	r5, r1
  402146:	0711      	lsls	r1, r2, #28
  402148:	4680      	mov	r8, r0
  40214a:	d43c      	bmi.n	4021c6 <__sflush_r+0x8a>
  40214c:	686a      	ldr	r2, [r5, #4]
  40214e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402152:	2a00      	cmp	r2, #0
  402154:	81ab      	strh	r3, [r5, #12]
  402156:	dd65      	ble.n	402224 <__sflush_r+0xe8>
  402158:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40215a:	2e00      	cmp	r6, #0
  40215c:	d04b      	beq.n	4021f6 <__sflush_r+0xba>
  40215e:	b29b      	uxth	r3, r3
  402160:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402164:	2100      	movs	r1, #0
  402166:	b292      	uxth	r2, r2
  402168:	f8d8 4000 	ldr.w	r4, [r8]
  40216c:	f8c8 1000 	str.w	r1, [r8]
  402170:	2a00      	cmp	r2, #0
  402172:	d05b      	beq.n	40222c <__sflush_r+0xf0>
  402174:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402176:	075f      	lsls	r7, r3, #29
  402178:	d505      	bpl.n	402186 <__sflush_r+0x4a>
  40217a:	6869      	ldr	r1, [r5, #4]
  40217c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40217e:	1a52      	subs	r2, r2, r1
  402180:	b10b      	cbz	r3, 402186 <__sflush_r+0x4a>
  402182:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402184:	1ad2      	subs	r2, r2, r3
  402186:	4640      	mov	r0, r8
  402188:	69e9      	ldr	r1, [r5, #28]
  40218a:	2300      	movs	r3, #0
  40218c:	47b0      	blx	r6
  40218e:	1c46      	adds	r6, r0, #1
  402190:	d056      	beq.n	402240 <__sflush_r+0x104>
  402192:	89ab      	ldrh	r3, [r5, #12]
  402194:	692a      	ldr	r2, [r5, #16]
  402196:	602a      	str	r2, [r5, #0]
  402198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40219c:	b29b      	uxth	r3, r3
  40219e:	2200      	movs	r2, #0
  4021a0:	606a      	str	r2, [r5, #4]
  4021a2:	04da      	lsls	r2, r3, #19
  4021a4:	81ab      	strh	r3, [r5, #12]
  4021a6:	d43b      	bmi.n	402220 <__sflush_r+0xe4>
  4021a8:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4021aa:	f8c8 4000 	str.w	r4, [r8]
  4021ae:	b311      	cbz	r1, 4021f6 <__sflush_r+0xba>
  4021b0:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4021b4:	4299      	cmp	r1, r3
  4021b6:	d002      	beq.n	4021be <__sflush_r+0x82>
  4021b8:	4640      	mov	r0, r8
  4021ba:	f000 f9d5 	bl	402568 <_free_r>
  4021be:	2000      	movs	r0, #0
  4021c0:	6328      	str	r0, [r5, #48]	; 0x30
  4021c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021c6:	692e      	ldr	r6, [r5, #16]
  4021c8:	b1ae      	cbz	r6, 4021f6 <__sflush_r+0xba>
  4021ca:	682c      	ldr	r4, [r5, #0]
  4021cc:	602e      	str	r6, [r5, #0]
  4021ce:	0791      	lsls	r1, r2, #30
  4021d0:	bf0c      	ite	eq
  4021d2:	696b      	ldreq	r3, [r5, #20]
  4021d4:	2300      	movne	r3, #0
  4021d6:	1ba4      	subs	r4, r4, r6
  4021d8:	60ab      	str	r3, [r5, #8]
  4021da:	e00a      	b.n	4021f2 <__sflush_r+0xb6>
  4021dc:	4632      	mov	r2, r6
  4021de:	4623      	mov	r3, r4
  4021e0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4021e2:	69e9      	ldr	r1, [r5, #28]
  4021e4:	4640      	mov	r0, r8
  4021e6:	47b8      	blx	r7
  4021e8:	2800      	cmp	r0, #0
  4021ea:	eba4 0400 	sub.w	r4, r4, r0
  4021ee:	4406      	add	r6, r0
  4021f0:	dd04      	ble.n	4021fc <__sflush_r+0xc0>
  4021f2:	2c00      	cmp	r4, #0
  4021f4:	dcf2      	bgt.n	4021dc <__sflush_r+0xa0>
  4021f6:	2000      	movs	r0, #0
  4021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021fc:	89ab      	ldrh	r3, [r5, #12]
  4021fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402202:	81ab      	strh	r3, [r5, #12]
  402204:	f04f 30ff 	mov.w	r0, #4294967295
  402208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40220c:	89ab      	ldrh	r3, [r5, #12]
  40220e:	692a      	ldr	r2, [r5, #16]
  402210:	6069      	str	r1, [r5, #4]
  402212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402216:	b29b      	uxth	r3, r3
  402218:	81ab      	strh	r3, [r5, #12]
  40221a:	04db      	lsls	r3, r3, #19
  40221c:	602a      	str	r2, [r5, #0]
  40221e:	d5c3      	bpl.n	4021a8 <__sflush_r+0x6c>
  402220:	6528      	str	r0, [r5, #80]	; 0x50
  402222:	e7c1      	b.n	4021a8 <__sflush_r+0x6c>
  402224:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402226:	2a00      	cmp	r2, #0
  402228:	dc96      	bgt.n	402158 <__sflush_r+0x1c>
  40222a:	e7e4      	b.n	4021f6 <__sflush_r+0xba>
  40222c:	2301      	movs	r3, #1
  40222e:	4640      	mov	r0, r8
  402230:	69e9      	ldr	r1, [r5, #28]
  402232:	47b0      	blx	r6
  402234:	1c43      	adds	r3, r0, #1
  402236:	4602      	mov	r2, r0
  402238:	d019      	beq.n	40226e <__sflush_r+0x132>
  40223a:	89ab      	ldrh	r3, [r5, #12]
  40223c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40223e:	e79a      	b.n	402176 <__sflush_r+0x3a>
  402240:	f8d8 1000 	ldr.w	r1, [r8]
  402244:	2900      	cmp	r1, #0
  402246:	d0e1      	beq.n	40220c <__sflush_r+0xd0>
  402248:	291d      	cmp	r1, #29
  40224a:	d007      	beq.n	40225c <__sflush_r+0x120>
  40224c:	2916      	cmp	r1, #22
  40224e:	d005      	beq.n	40225c <__sflush_r+0x120>
  402250:	89ab      	ldrh	r3, [r5, #12]
  402252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402256:	81ab      	strh	r3, [r5, #12]
  402258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40225c:	89ab      	ldrh	r3, [r5, #12]
  40225e:	692a      	ldr	r2, [r5, #16]
  402260:	602a      	str	r2, [r5, #0]
  402262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402266:	2200      	movs	r2, #0
  402268:	81ab      	strh	r3, [r5, #12]
  40226a:	606a      	str	r2, [r5, #4]
  40226c:	e79c      	b.n	4021a8 <__sflush_r+0x6c>
  40226e:	f8d8 3000 	ldr.w	r3, [r8]
  402272:	2b00      	cmp	r3, #0
  402274:	d0e1      	beq.n	40223a <__sflush_r+0xfe>
  402276:	2b1d      	cmp	r3, #29
  402278:	d007      	beq.n	40228a <__sflush_r+0x14e>
  40227a:	2b16      	cmp	r3, #22
  40227c:	d005      	beq.n	40228a <__sflush_r+0x14e>
  40227e:	89ab      	ldrh	r3, [r5, #12]
  402280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402284:	81ab      	strh	r3, [r5, #12]
  402286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40228a:	f8c8 4000 	str.w	r4, [r8]
  40228e:	e7b2      	b.n	4021f6 <__sflush_r+0xba>

00402290 <_fflush_r>:
  402290:	b510      	push	{r4, lr}
  402292:	4604      	mov	r4, r0
  402294:	b082      	sub	sp, #8
  402296:	b108      	cbz	r0, 40229c <_fflush_r+0xc>
  402298:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40229a:	b153      	cbz	r3, 4022b2 <_fflush_r+0x22>
  40229c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4022a0:	b908      	cbnz	r0, 4022a6 <_fflush_r+0x16>
  4022a2:	b002      	add	sp, #8
  4022a4:	bd10      	pop	{r4, pc}
  4022a6:	4620      	mov	r0, r4
  4022a8:	b002      	add	sp, #8
  4022aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4022ae:	f7ff bf45 	b.w	40213c <__sflush_r>
  4022b2:	9101      	str	r1, [sp, #4]
  4022b4:	f000 f880 	bl	4023b8 <__sinit>
  4022b8:	9901      	ldr	r1, [sp, #4]
  4022ba:	e7ef      	b.n	40229c <_fflush_r+0xc>

004022bc <_cleanup_r>:
  4022bc:	4901      	ldr	r1, [pc, #4]	; (4022c4 <_cleanup_r+0x8>)
  4022be:	f000 bbb7 	b.w	402a30 <_fwalk_reent>
  4022c2:	bf00      	nop
  4022c4:	004039e1 	.word	0x004039e1

004022c8 <__sinit.part.1>:
  4022c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022cc:	4b35      	ldr	r3, [pc, #212]	; (4023a4 <__sinit.part.1+0xdc>)
  4022ce:	6845      	ldr	r5, [r0, #4]
  4022d0:	63c3      	str	r3, [r0, #60]	; 0x3c
  4022d2:	2400      	movs	r4, #0
  4022d4:	4607      	mov	r7, r0
  4022d6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4022da:	2304      	movs	r3, #4
  4022dc:	2103      	movs	r1, #3
  4022de:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4022e2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4022e6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4022ea:	b083      	sub	sp, #12
  4022ec:	602c      	str	r4, [r5, #0]
  4022ee:	606c      	str	r4, [r5, #4]
  4022f0:	60ac      	str	r4, [r5, #8]
  4022f2:	666c      	str	r4, [r5, #100]	; 0x64
  4022f4:	81ec      	strh	r4, [r5, #14]
  4022f6:	612c      	str	r4, [r5, #16]
  4022f8:	616c      	str	r4, [r5, #20]
  4022fa:	61ac      	str	r4, [r5, #24]
  4022fc:	81ab      	strh	r3, [r5, #12]
  4022fe:	4621      	mov	r1, r4
  402300:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402304:	2208      	movs	r2, #8
  402306:	f7fe fef1 	bl	4010ec <memset>
  40230a:	68be      	ldr	r6, [r7, #8]
  40230c:	f8df b098 	ldr.w	fp, [pc, #152]	; 4023a8 <__sinit.part.1+0xe0>
  402310:	f8df a098 	ldr.w	sl, [pc, #152]	; 4023ac <__sinit.part.1+0xe4>
  402314:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4023b0 <__sinit.part.1+0xe8>
  402318:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4023b4 <__sinit.part.1+0xec>
  40231c:	f8c5 b020 	str.w	fp, [r5, #32]
  402320:	2301      	movs	r3, #1
  402322:	2209      	movs	r2, #9
  402324:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402328:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40232c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402330:	61ed      	str	r5, [r5, #28]
  402332:	4621      	mov	r1, r4
  402334:	81f3      	strh	r3, [r6, #14]
  402336:	81b2      	strh	r2, [r6, #12]
  402338:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40233c:	6034      	str	r4, [r6, #0]
  40233e:	6074      	str	r4, [r6, #4]
  402340:	60b4      	str	r4, [r6, #8]
  402342:	6674      	str	r4, [r6, #100]	; 0x64
  402344:	6134      	str	r4, [r6, #16]
  402346:	6174      	str	r4, [r6, #20]
  402348:	61b4      	str	r4, [r6, #24]
  40234a:	2208      	movs	r2, #8
  40234c:	9301      	str	r3, [sp, #4]
  40234e:	f7fe fecd 	bl	4010ec <memset>
  402352:	68fd      	ldr	r5, [r7, #12]
  402354:	61f6      	str	r6, [r6, #28]
  402356:	2012      	movs	r0, #18
  402358:	2202      	movs	r2, #2
  40235a:	f8c6 b020 	str.w	fp, [r6, #32]
  40235e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402362:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402366:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40236a:	4621      	mov	r1, r4
  40236c:	81a8      	strh	r0, [r5, #12]
  40236e:	81ea      	strh	r2, [r5, #14]
  402370:	602c      	str	r4, [r5, #0]
  402372:	606c      	str	r4, [r5, #4]
  402374:	60ac      	str	r4, [r5, #8]
  402376:	666c      	str	r4, [r5, #100]	; 0x64
  402378:	612c      	str	r4, [r5, #16]
  40237a:	616c      	str	r4, [r5, #20]
  40237c:	61ac      	str	r4, [r5, #24]
  40237e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402382:	2208      	movs	r2, #8
  402384:	f7fe feb2 	bl	4010ec <memset>
  402388:	9b01      	ldr	r3, [sp, #4]
  40238a:	61ed      	str	r5, [r5, #28]
  40238c:	f8c5 b020 	str.w	fp, [r5, #32]
  402390:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402394:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402398:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40239c:	63bb      	str	r3, [r7, #56]	; 0x38
  40239e:	b003      	add	sp, #12
  4023a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023a4:	004022bd 	.word	0x004022bd
  4023a8:	00403755 	.word	0x00403755
  4023ac:	00403779 	.word	0x00403779
  4023b0:	004037b1 	.word	0x004037b1
  4023b4:	004037d1 	.word	0x004037d1

004023b8 <__sinit>:
  4023b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4023ba:	b103      	cbz	r3, 4023be <__sinit+0x6>
  4023bc:	4770      	bx	lr
  4023be:	f7ff bf83 	b.w	4022c8 <__sinit.part.1>
  4023c2:	bf00      	nop

004023c4 <__sfp_lock_acquire>:
  4023c4:	4770      	bx	lr
  4023c6:	bf00      	nop

004023c8 <__sfp_lock_release>:
  4023c8:	4770      	bx	lr
  4023ca:	bf00      	nop

004023cc <__libc_fini_array>:
  4023cc:	b538      	push	{r3, r4, r5, lr}
  4023ce:	4b08      	ldr	r3, [pc, #32]	; (4023f0 <__libc_fini_array+0x24>)
  4023d0:	4d08      	ldr	r5, [pc, #32]	; (4023f4 <__libc_fini_array+0x28>)
  4023d2:	1aed      	subs	r5, r5, r3
  4023d4:	10ac      	asrs	r4, r5, #2
  4023d6:	bf18      	it	ne
  4023d8:	18ed      	addne	r5, r5, r3
  4023da:	d005      	beq.n	4023e8 <__libc_fini_array+0x1c>
  4023dc:	3c01      	subs	r4, #1
  4023de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4023e2:	4798      	blx	r3
  4023e4:	2c00      	cmp	r4, #0
  4023e6:	d1f9      	bne.n	4023dc <__libc_fini_array+0x10>
  4023e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4023ec:	f002 b824 	b.w	404438 <_fini>
  4023f0:	00404444 	.word	0x00404444
  4023f4:	00404448 	.word	0x00404448

004023f8 <__fputwc>:
  4023f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4023fc:	b082      	sub	sp, #8
  4023fe:	4607      	mov	r7, r0
  402400:	460e      	mov	r6, r1
  402402:	4614      	mov	r4, r2
  402404:	f000 fb42 	bl	402a8c <__locale_mb_cur_max>
  402408:	2801      	cmp	r0, #1
  40240a:	d041      	beq.n	402490 <__fputwc+0x98>
  40240c:	4638      	mov	r0, r7
  40240e:	a901      	add	r1, sp, #4
  402410:	4632      	mov	r2, r6
  402412:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402416:	f001 fa33 	bl	403880 <_wcrtomb_r>
  40241a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40241e:	4680      	mov	r8, r0
  402420:	d02f      	beq.n	402482 <__fputwc+0x8a>
  402422:	2800      	cmp	r0, #0
  402424:	d03c      	beq.n	4024a0 <__fputwc+0xa8>
  402426:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40242a:	2500      	movs	r5, #0
  40242c:	e009      	b.n	402442 <__fputwc+0x4a>
  40242e:	6823      	ldr	r3, [r4, #0]
  402430:	7019      	strb	r1, [r3, #0]
  402432:	6823      	ldr	r3, [r4, #0]
  402434:	3301      	adds	r3, #1
  402436:	6023      	str	r3, [r4, #0]
  402438:	3501      	adds	r5, #1
  40243a:	45a8      	cmp	r8, r5
  40243c:	d930      	bls.n	4024a0 <__fputwc+0xa8>
  40243e:	ab01      	add	r3, sp, #4
  402440:	5d59      	ldrb	r1, [r3, r5]
  402442:	68a3      	ldr	r3, [r4, #8]
  402444:	3b01      	subs	r3, #1
  402446:	2b00      	cmp	r3, #0
  402448:	60a3      	str	r3, [r4, #8]
  40244a:	daf0      	bge.n	40242e <__fputwc+0x36>
  40244c:	69a2      	ldr	r2, [r4, #24]
  40244e:	4293      	cmp	r3, r2
  402450:	db07      	blt.n	402462 <__fputwc+0x6a>
  402452:	6823      	ldr	r3, [r4, #0]
  402454:	7019      	strb	r1, [r3, #0]
  402456:	6823      	ldr	r3, [r4, #0]
  402458:	7819      	ldrb	r1, [r3, #0]
  40245a:	290a      	cmp	r1, #10
  40245c:	f103 0301 	add.w	r3, r3, #1
  402460:	d1e9      	bne.n	402436 <__fputwc+0x3e>
  402462:	4638      	mov	r0, r7
  402464:	4622      	mov	r2, r4
  402466:	f001 f9b7 	bl	4037d8 <__swbuf_r>
  40246a:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40246e:	fab0 f080 	clz	r0, r0
  402472:	0940      	lsrs	r0, r0, #5
  402474:	2800      	cmp	r0, #0
  402476:	d0df      	beq.n	402438 <__fputwc+0x40>
  402478:	f04f 30ff 	mov.w	r0, #4294967295
  40247c:	b002      	add	sp, #8
  40247e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402482:	89a3      	ldrh	r3, [r4, #12]
  402484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402488:	81a3      	strh	r3, [r4, #12]
  40248a:	b002      	add	sp, #8
  40248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402490:	1e73      	subs	r3, r6, #1
  402492:	2bfe      	cmp	r3, #254	; 0xfe
  402494:	d8ba      	bhi.n	40240c <__fputwc+0x14>
  402496:	b2f1      	uxtb	r1, r6
  402498:	4680      	mov	r8, r0
  40249a:	f88d 1004 	strb.w	r1, [sp, #4]
  40249e:	e7c4      	b.n	40242a <__fputwc+0x32>
  4024a0:	4630      	mov	r0, r6
  4024a2:	b002      	add	sp, #8
  4024a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004024a8 <_fputwc_r>:
  4024a8:	8993      	ldrh	r3, [r2, #12]
  4024aa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4024ae:	d10b      	bne.n	4024c8 <_fputwc_r+0x20>
  4024b0:	b410      	push	{r4}
  4024b2:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4024b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4024b8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4024bc:	6654      	str	r4, [r2, #100]	; 0x64
  4024be:	8193      	strh	r3, [r2, #12]
  4024c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4024c4:	f7ff bf98 	b.w	4023f8 <__fputwc>
  4024c8:	f7ff bf96 	b.w	4023f8 <__fputwc>

004024cc <_malloc_trim_r>:
  4024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4024ce:	4f23      	ldr	r7, [pc, #140]	; (40255c <_malloc_trim_r+0x90>)
  4024d0:	460c      	mov	r4, r1
  4024d2:	4606      	mov	r6, r0
  4024d4:	f000 ff32 	bl	40333c <__malloc_lock>
  4024d8:	68bb      	ldr	r3, [r7, #8]
  4024da:	685d      	ldr	r5, [r3, #4]
  4024dc:	f025 0503 	bic.w	r5, r5, #3
  4024e0:	1b29      	subs	r1, r5, r4
  4024e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4024e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4024ea:	f021 010f 	bic.w	r1, r1, #15
  4024ee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4024f2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4024f6:	db07      	blt.n	402508 <_malloc_trim_r+0x3c>
  4024f8:	4630      	mov	r0, r6
  4024fa:	2100      	movs	r1, #0
  4024fc:	f001 f918 	bl	403730 <_sbrk_r>
  402500:	68bb      	ldr	r3, [r7, #8]
  402502:	442b      	add	r3, r5
  402504:	4298      	cmp	r0, r3
  402506:	d004      	beq.n	402512 <_malloc_trim_r+0x46>
  402508:	4630      	mov	r0, r6
  40250a:	f000 ff19 	bl	403340 <__malloc_unlock>
  40250e:	2000      	movs	r0, #0
  402510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402512:	4630      	mov	r0, r6
  402514:	4261      	negs	r1, r4
  402516:	f001 f90b 	bl	403730 <_sbrk_r>
  40251a:	3001      	adds	r0, #1
  40251c:	d00d      	beq.n	40253a <_malloc_trim_r+0x6e>
  40251e:	4b10      	ldr	r3, [pc, #64]	; (402560 <_malloc_trim_r+0x94>)
  402520:	68ba      	ldr	r2, [r7, #8]
  402522:	6819      	ldr	r1, [r3, #0]
  402524:	1b2d      	subs	r5, r5, r4
  402526:	f045 0501 	orr.w	r5, r5, #1
  40252a:	4630      	mov	r0, r6
  40252c:	1b09      	subs	r1, r1, r4
  40252e:	6055      	str	r5, [r2, #4]
  402530:	6019      	str	r1, [r3, #0]
  402532:	f000 ff05 	bl	403340 <__malloc_unlock>
  402536:	2001      	movs	r0, #1
  402538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40253a:	4630      	mov	r0, r6
  40253c:	2100      	movs	r1, #0
  40253e:	f001 f8f7 	bl	403730 <_sbrk_r>
  402542:	68ba      	ldr	r2, [r7, #8]
  402544:	1a83      	subs	r3, r0, r2
  402546:	2b0f      	cmp	r3, #15
  402548:	ddde      	ble.n	402508 <_malloc_trim_r+0x3c>
  40254a:	4c06      	ldr	r4, [pc, #24]	; (402564 <_malloc_trim_r+0x98>)
  40254c:	4904      	ldr	r1, [pc, #16]	; (402560 <_malloc_trim_r+0x94>)
  40254e:	6824      	ldr	r4, [r4, #0]
  402550:	f043 0301 	orr.w	r3, r3, #1
  402554:	1b00      	subs	r0, r0, r4
  402556:	6053      	str	r3, [r2, #4]
  402558:	6008      	str	r0, [r1, #0]
  40255a:	e7d5      	b.n	402508 <_malloc_trim_r+0x3c>
  40255c:	20000458 	.word	0x20000458
  402560:	2000091c 	.word	0x2000091c
  402564:	20000864 	.word	0x20000864

00402568 <_free_r>:
  402568:	2900      	cmp	r1, #0
  40256a:	d04e      	beq.n	40260a <_free_r+0xa2>
  40256c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402570:	460c      	mov	r4, r1
  402572:	4680      	mov	r8, r0
  402574:	f000 fee2 	bl	40333c <__malloc_lock>
  402578:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40257c:	4962      	ldr	r1, [pc, #392]	; (402708 <_free_r+0x1a0>)
  40257e:	f027 0201 	bic.w	r2, r7, #1
  402582:	f1a4 0508 	sub.w	r5, r4, #8
  402586:	18ab      	adds	r3, r5, r2
  402588:	688e      	ldr	r6, [r1, #8]
  40258a:	6858      	ldr	r0, [r3, #4]
  40258c:	429e      	cmp	r6, r3
  40258e:	f020 0003 	bic.w	r0, r0, #3
  402592:	d05a      	beq.n	40264a <_free_r+0xe2>
  402594:	07fe      	lsls	r6, r7, #31
  402596:	6058      	str	r0, [r3, #4]
  402598:	d40b      	bmi.n	4025b2 <_free_r+0x4a>
  40259a:	f854 7c08 	ldr.w	r7, [r4, #-8]
  40259e:	1bed      	subs	r5, r5, r7
  4025a0:	f101 0e08 	add.w	lr, r1, #8
  4025a4:	68ac      	ldr	r4, [r5, #8]
  4025a6:	4574      	cmp	r4, lr
  4025a8:	443a      	add	r2, r7
  4025aa:	d067      	beq.n	40267c <_free_r+0x114>
  4025ac:	68ef      	ldr	r7, [r5, #12]
  4025ae:	60e7      	str	r7, [r4, #12]
  4025b0:	60bc      	str	r4, [r7, #8]
  4025b2:	181c      	adds	r4, r3, r0
  4025b4:	6864      	ldr	r4, [r4, #4]
  4025b6:	07e4      	lsls	r4, r4, #31
  4025b8:	d40c      	bmi.n	4025d4 <_free_r+0x6c>
  4025ba:	4f54      	ldr	r7, [pc, #336]	; (40270c <_free_r+0x1a4>)
  4025bc:	689c      	ldr	r4, [r3, #8]
  4025be:	42bc      	cmp	r4, r7
  4025c0:	4402      	add	r2, r0
  4025c2:	d07c      	beq.n	4026be <_free_r+0x156>
  4025c4:	68d8      	ldr	r0, [r3, #12]
  4025c6:	60e0      	str	r0, [r4, #12]
  4025c8:	f042 0301 	orr.w	r3, r2, #1
  4025cc:	6084      	str	r4, [r0, #8]
  4025ce:	606b      	str	r3, [r5, #4]
  4025d0:	50aa      	str	r2, [r5, r2]
  4025d2:	e003      	b.n	4025dc <_free_r+0x74>
  4025d4:	f042 0301 	orr.w	r3, r2, #1
  4025d8:	606b      	str	r3, [r5, #4]
  4025da:	50aa      	str	r2, [r5, r2]
  4025dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4025e0:	d214      	bcs.n	40260c <_free_r+0xa4>
  4025e2:	08d2      	lsrs	r2, r2, #3
  4025e4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  4025e8:	6848      	ldr	r0, [r1, #4]
  4025ea:	689f      	ldr	r7, [r3, #8]
  4025ec:	60af      	str	r7, [r5, #8]
  4025ee:	1092      	asrs	r2, r2, #2
  4025f0:	2401      	movs	r4, #1
  4025f2:	fa04 f202 	lsl.w	r2, r4, r2
  4025f6:	4310      	orrs	r0, r2
  4025f8:	60eb      	str	r3, [r5, #12]
  4025fa:	6048      	str	r0, [r1, #4]
  4025fc:	609d      	str	r5, [r3, #8]
  4025fe:	60fd      	str	r5, [r7, #12]
  402600:	4640      	mov	r0, r8
  402602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402606:	f000 be9b 	b.w	403340 <__malloc_unlock>
  40260a:	4770      	bx	lr
  40260c:	0a53      	lsrs	r3, r2, #9
  40260e:	2b04      	cmp	r3, #4
  402610:	d847      	bhi.n	4026a2 <_free_r+0x13a>
  402612:	0993      	lsrs	r3, r2, #6
  402614:	f103 0438 	add.w	r4, r3, #56	; 0x38
  402618:	0060      	lsls	r0, r4, #1
  40261a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40261e:	493a      	ldr	r1, [pc, #232]	; (402708 <_free_r+0x1a0>)
  402620:	6883      	ldr	r3, [r0, #8]
  402622:	4283      	cmp	r3, r0
  402624:	d043      	beq.n	4026ae <_free_r+0x146>
  402626:	6859      	ldr	r1, [r3, #4]
  402628:	f021 0103 	bic.w	r1, r1, #3
  40262c:	4291      	cmp	r1, r2
  40262e:	d902      	bls.n	402636 <_free_r+0xce>
  402630:	689b      	ldr	r3, [r3, #8]
  402632:	4298      	cmp	r0, r3
  402634:	d1f7      	bne.n	402626 <_free_r+0xbe>
  402636:	68da      	ldr	r2, [r3, #12]
  402638:	60ea      	str	r2, [r5, #12]
  40263a:	60ab      	str	r3, [r5, #8]
  40263c:	4640      	mov	r0, r8
  40263e:	6095      	str	r5, [r2, #8]
  402640:	60dd      	str	r5, [r3, #12]
  402642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402646:	f000 be7b 	b.w	403340 <__malloc_unlock>
  40264a:	07ff      	lsls	r7, r7, #31
  40264c:	4402      	add	r2, r0
  40264e:	d407      	bmi.n	402660 <_free_r+0xf8>
  402650:	f854 3c08 	ldr.w	r3, [r4, #-8]
  402654:	1aed      	subs	r5, r5, r3
  402656:	441a      	add	r2, r3
  402658:	68a8      	ldr	r0, [r5, #8]
  40265a:	68eb      	ldr	r3, [r5, #12]
  40265c:	60c3      	str	r3, [r0, #12]
  40265e:	6098      	str	r0, [r3, #8]
  402660:	4b2b      	ldr	r3, [pc, #172]	; (402710 <_free_r+0x1a8>)
  402662:	681b      	ldr	r3, [r3, #0]
  402664:	f042 0001 	orr.w	r0, r2, #1
  402668:	429a      	cmp	r2, r3
  40266a:	6068      	str	r0, [r5, #4]
  40266c:	608d      	str	r5, [r1, #8]
  40266e:	d3c7      	bcc.n	402600 <_free_r+0x98>
  402670:	4b28      	ldr	r3, [pc, #160]	; (402714 <_free_r+0x1ac>)
  402672:	4640      	mov	r0, r8
  402674:	6819      	ldr	r1, [r3, #0]
  402676:	f7ff ff29 	bl	4024cc <_malloc_trim_r>
  40267a:	e7c1      	b.n	402600 <_free_r+0x98>
  40267c:	1819      	adds	r1, r3, r0
  40267e:	6849      	ldr	r1, [r1, #4]
  402680:	07c9      	lsls	r1, r1, #31
  402682:	d409      	bmi.n	402698 <_free_r+0x130>
  402684:	68d9      	ldr	r1, [r3, #12]
  402686:	689b      	ldr	r3, [r3, #8]
  402688:	4402      	add	r2, r0
  40268a:	f042 0001 	orr.w	r0, r2, #1
  40268e:	60d9      	str	r1, [r3, #12]
  402690:	608b      	str	r3, [r1, #8]
  402692:	6068      	str	r0, [r5, #4]
  402694:	50aa      	str	r2, [r5, r2]
  402696:	e7b3      	b.n	402600 <_free_r+0x98>
  402698:	f042 0301 	orr.w	r3, r2, #1
  40269c:	606b      	str	r3, [r5, #4]
  40269e:	50aa      	str	r2, [r5, r2]
  4026a0:	e7ae      	b.n	402600 <_free_r+0x98>
  4026a2:	2b14      	cmp	r3, #20
  4026a4:	d814      	bhi.n	4026d0 <_free_r+0x168>
  4026a6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  4026aa:	0060      	lsls	r0, r4, #1
  4026ac:	e7b5      	b.n	40261a <_free_r+0xb2>
  4026ae:	684a      	ldr	r2, [r1, #4]
  4026b0:	10a4      	asrs	r4, r4, #2
  4026b2:	2001      	movs	r0, #1
  4026b4:	40a0      	lsls	r0, r4
  4026b6:	4302      	orrs	r2, r0
  4026b8:	604a      	str	r2, [r1, #4]
  4026ba:	461a      	mov	r2, r3
  4026bc:	e7bc      	b.n	402638 <_free_r+0xd0>
  4026be:	f042 0301 	orr.w	r3, r2, #1
  4026c2:	614d      	str	r5, [r1, #20]
  4026c4:	610d      	str	r5, [r1, #16]
  4026c6:	60ec      	str	r4, [r5, #12]
  4026c8:	60ac      	str	r4, [r5, #8]
  4026ca:	606b      	str	r3, [r5, #4]
  4026cc:	50aa      	str	r2, [r5, r2]
  4026ce:	e797      	b.n	402600 <_free_r+0x98>
  4026d0:	2b54      	cmp	r3, #84	; 0x54
  4026d2:	d804      	bhi.n	4026de <_free_r+0x176>
  4026d4:	0b13      	lsrs	r3, r2, #12
  4026d6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  4026da:	0060      	lsls	r0, r4, #1
  4026dc:	e79d      	b.n	40261a <_free_r+0xb2>
  4026de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4026e2:	d804      	bhi.n	4026ee <_free_r+0x186>
  4026e4:	0bd3      	lsrs	r3, r2, #15
  4026e6:	f103 0477 	add.w	r4, r3, #119	; 0x77
  4026ea:	0060      	lsls	r0, r4, #1
  4026ec:	e795      	b.n	40261a <_free_r+0xb2>
  4026ee:	f240 5054 	movw	r0, #1364	; 0x554
  4026f2:	4283      	cmp	r3, r0
  4026f4:	d804      	bhi.n	402700 <_free_r+0x198>
  4026f6:	0c93      	lsrs	r3, r2, #18
  4026f8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  4026fc:	0060      	lsls	r0, r4, #1
  4026fe:	e78c      	b.n	40261a <_free_r+0xb2>
  402700:	20fc      	movs	r0, #252	; 0xfc
  402702:	247e      	movs	r4, #126	; 0x7e
  402704:	e789      	b.n	40261a <_free_r+0xb2>
  402706:	bf00      	nop
  402708:	20000458 	.word	0x20000458
  40270c:	20000460 	.word	0x20000460
  402710:	20000860 	.word	0x20000860
  402714:	20000918 	.word	0x20000918

00402718 <__sfvwrite_r>:
  402718:	6893      	ldr	r3, [r2, #8]
  40271a:	2b00      	cmp	r3, #0
  40271c:	d07a      	beq.n	402814 <__sfvwrite_r+0xfc>
  40271e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402722:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  402726:	f01e 0f08 	tst.w	lr, #8
  40272a:	b083      	sub	sp, #12
  40272c:	460c      	mov	r4, r1
  40272e:	4681      	mov	r9, r0
  402730:	4616      	mov	r6, r2
  402732:	d026      	beq.n	402782 <__sfvwrite_r+0x6a>
  402734:	690b      	ldr	r3, [r1, #16]
  402736:	b323      	cbz	r3, 402782 <__sfvwrite_r+0x6a>
  402738:	f00e 0802 	and.w	r8, lr, #2
  40273c:	fa1f f088 	uxth.w	r0, r8
  402740:	6835      	ldr	r5, [r6, #0]
  402742:	b370      	cbz	r0, 4027a2 <__sfvwrite_r+0x8a>
  402744:	f04f 0a00 	mov.w	sl, #0
  402748:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 402a2c <__sfvwrite_r+0x314>
  40274c:	46d0      	mov	r8, sl
  40274e:	45d8      	cmp	r8, fp
  402750:	4643      	mov	r3, r8
  402752:	4652      	mov	r2, sl
  402754:	bf28      	it	cs
  402756:	465b      	movcs	r3, fp
  402758:	4648      	mov	r0, r9
  40275a:	f1b8 0f00 	cmp.w	r8, #0
  40275e:	d053      	beq.n	402808 <__sfvwrite_r+0xf0>
  402760:	69e1      	ldr	r1, [r4, #28]
  402762:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402764:	47b8      	blx	r7
  402766:	2800      	cmp	r0, #0
  402768:	dd73      	ble.n	402852 <__sfvwrite_r+0x13a>
  40276a:	68b3      	ldr	r3, [r6, #8]
  40276c:	1a1b      	subs	r3, r3, r0
  40276e:	4482      	add	sl, r0
  402770:	ebc0 0808 	rsb	r8, r0, r8
  402774:	60b3      	str	r3, [r6, #8]
  402776:	2b00      	cmp	r3, #0
  402778:	d1e9      	bne.n	40274e <__sfvwrite_r+0x36>
  40277a:	2000      	movs	r0, #0
  40277c:	b003      	add	sp, #12
  40277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402782:	4648      	mov	r0, r9
  402784:	4621      	mov	r1, r4
  402786:	f7ff fc67 	bl	402058 <__swsetup_r>
  40278a:	2800      	cmp	r0, #0
  40278c:	f040 8145 	bne.w	402a1a <__sfvwrite_r+0x302>
  402790:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402794:	6835      	ldr	r5, [r6, #0]
  402796:	f00e 0802 	and.w	r8, lr, #2
  40279a:	fa1f f088 	uxth.w	r0, r8
  40279e:	2800      	cmp	r0, #0
  4027a0:	d1d0      	bne.n	402744 <__sfvwrite_r+0x2c>
  4027a2:	f01e 0b01 	ands.w	fp, lr, #1
  4027a6:	d15d      	bne.n	402864 <__sfvwrite_r+0x14c>
  4027a8:	46d8      	mov	r8, fp
  4027aa:	f1b8 0f00 	cmp.w	r8, #0
  4027ae:	d025      	beq.n	4027fc <__sfvwrite_r+0xe4>
  4027b0:	f41e 7f00 	tst.w	lr, #512	; 0x200
  4027b4:	68a7      	ldr	r7, [r4, #8]
  4027b6:	d02f      	beq.n	402818 <__sfvwrite_r+0x100>
  4027b8:	45b8      	cmp	r8, r7
  4027ba:	46ba      	mov	sl, r7
  4027bc:	f0c0 80a9 	bcc.w	402912 <__sfvwrite_r+0x1fa>
  4027c0:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4027c4:	f040 80b6 	bne.w	402934 <__sfvwrite_r+0x21c>
  4027c8:	6820      	ldr	r0, [r4, #0]
  4027ca:	4652      	mov	r2, sl
  4027cc:	4659      	mov	r1, fp
  4027ce:	f000 fd51 	bl	403274 <memmove>
  4027d2:	68a0      	ldr	r0, [r4, #8]
  4027d4:	6822      	ldr	r2, [r4, #0]
  4027d6:	1bc0      	subs	r0, r0, r7
  4027d8:	eb02 030a 	add.w	r3, r2, sl
  4027dc:	60a0      	str	r0, [r4, #8]
  4027de:	6023      	str	r3, [r4, #0]
  4027e0:	4640      	mov	r0, r8
  4027e2:	68b3      	ldr	r3, [r6, #8]
  4027e4:	1a1b      	subs	r3, r3, r0
  4027e6:	4483      	add	fp, r0
  4027e8:	ebc0 0808 	rsb	r8, r0, r8
  4027ec:	60b3      	str	r3, [r6, #8]
  4027ee:	2b00      	cmp	r3, #0
  4027f0:	d0c3      	beq.n	40277a <__sfvwrite_r+0x62>
  4027f2:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4027f6:	f1b8 0f00 	cmp.w	r8, #0
  4027fa:	d1d9      	bne.n	4027b0 <__sfvwrite_r+0x98>
  4027fc:	f8d5 b000 	ldr.w	fp, [r5]
  402800:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402804:	3508      	adds	r5, #8
  402806:	e7d0      	b.n	4027aa <__sfvwrite_r+0x92>
  402808:	f8d5 a000 	ldr.w	sl, [r5]
  40280c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402810:	3508      	adds	r5, #8
  402812:	e79c      	b.n	40274e <__sfvwrite_r+0x36>
  402814:	2000      	movs	r0, #0
  402816:	4770      	bx	lr
  402818:	6820      	ldr	r0, [r4, #0]
  40281a:	6923      	ldr	r3, [r4, #16]
  40281c:	4298      	cmp	r0, r3
  40281e:	d803      	bhi.n	402828 <__sfvwrite_r+0x110>
  402820:	6962      	ldr	r2, [r4, #20]
  402822:	4590      	cmp	r8, r2
  402824:	f080 80b9 	bcs.w	40299a <__sfvwrite_r+0x282>
  402828:	4547      	cmp	r7, r8
  40282a:	bf28      	it	cs
  40282c:	4647      	movcs	r7, r8
  40282e:	463a      	mov	r2, r7
  402830:	4659      	mov	r1, fp
  402832:	f000 fd1f 	bl	403274 <memmove>
  402836:	68a3      	ldr	r3, [r4, #8]
  402838:	6822      	ldr	r2, [r4, #0]
  40283a:	1bdb      	subs	r3, r3, r7
  40283c:	443a      	add	r2, r7
  40283e:	60a3      	str	r3, [r4, #8]
  402840:	6022      	str	r2, [r4, #0]
  402842:	2b00      	cmp	r3, #0
  402844:	d14a      	bne.n	4028dc <__sfvwrite_r+0x1c4>
  402846:	4648      	mov	r0, r9
  402848:	4621      	mov	r1, r4
  40284a:	f7ff fd21 	bl	402290 <_fflush_r>
  40284e:	2800      	cmp	r0, #0
  402850:	d044      	beq.n	4028dc <__sfvwrite_r+0x1c4>
  402852:	89a3      	ldrh	r3, [r4, #12]
  402854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402858:	f04f 30ff 	mov.w	r0, #4294967295
  40285c:	81a3      	strh	r3, [r4, #12]
  40285e:	b003      	add	sp, #12
  402860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402864:	4680      	mov	r8, r0
  402866:	9000      	str	r0, [sp, #0]
  402868:	4683      	mov	fp, r0
  40286a:	4682      	mov	sl, r0
  40286c:	f1ba 0f00 	cmp.w	sl, #0
  402870:	d02c      	beq.n	4028cc <__sfvwrite_r+0x1b4>
  402872:	9b00      	ldr	r3, [sp, #0]
  402874:	2b00      	cmp	r3, #0
  402876:	d050      	beq.n	40291a <__sfvwrite_r+0x202>
  402878:	6820      	ldr	r0, [r4, #0]
  40287a:	6921      	ldr	r1, [r4, #16]
  40287c:	f8d4 e008 	ldr.w	lr, [r4, #8]
  402880:	6962      	ldr	r2, [r4, #20]
  402882:	45d0      	cmp	r8, sl
  402884:	4643      	mov	r3, r8
  402886:	bf28      	it	cs
  402888:	4653      	movcs	r3, sl
  40288a:	4288      	cmp	r0, r1
  40288c:	461f      	mov	r7, r3
  40288e:	d904      	bls.n	40289a <__sfvwrite_r+0x182>
  402890:	eb0e 0c02 	add.w	ip, lr, r2
  402894:	4563      	cmp	r3, ip
  402896:	f300 8092 	bgt.w	4029be <__sfvwrite_r+0x2a6>
  40289a:	4293      	cmp	r3, r2
  40289c:	db20      	blt.n	4028e0 <__sfvwrite_r+0x1c8>
  40289e:	4613      	mov	r3, r2
  4028a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4028a2:	69e1      	ldr	r1, [r4, #28]
  4028a4:	4648      	mov	r0, r9
  4028a6:	465a      	mov	r2, fp
  4028a8:	47b8      	blx	r7
  4028aa:	1e07      	subs	r7, r0, #0
  4028ac:	ddd1      	ble.n	402852 <__sfvwrite_r+0x13a>
  4028ae:	ebb8 0807 	subs.w	r8, r8, r7
  4028b2:	d025      	beq.n	402900 <__sfvwrite_r+0x1e8>
  4028b4:	68b3      	ldr	r3, [r6, #8]
  4028b6:	1bdb      	subs	r3, r3, r7
  4028b8:	44bb      	add	fp, r7
  4028ba:	ebc7 0a0a 	rsb	sl, r7, sl
  4028be:	60b3      	str	r3, [r6, #8]
  4028c0:	2b00      	cmp	r3, #0
  4028c2:	f43f af5a 	beq.w	40277a <__sfvwrite_r+0x62>
  4028c6:	f1ba 0f00 	cmp.w	sl, #0
  4028ca:	d1d2      	bne.n	402872 <__sfvwrite_r+0x15a>
  4028cc:	2300      	movs	r3, #0
  4028ce:	f8d5 b000 	ldr.w	fp, [r5]
  4028d2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  4028d6:	9300      	str	r3, [sp, #0]
  4028d8:	3508      	adds	r5, #8
  4028da:	e7c7      	b.n	40286c <__sfvwrite_r+0x154>
  4028dc:	4638      	mov	r0, r7
  4028de:	e780      	b.n	4027e2 <__sfvwrite_r+0xca>
  4028e0:	461a      	mov	r2, r3
  4028e2:	4659      	mov	r1, fp
  4028e4:	9301      	str	r3, [sp, #4]
  4028e6:	f000 fcc5 	bl	403274 <memmove>
  4028ea:	68a2      	ldr	r2, [r4, #8]
  4028ec:	6821      	ldr	r1, [r4, #0]
  4028ee:	9b01      	ldr	r3, [sp, #4]
  4028f0:	ebb8 0807 	subs.w	r8, r8, r7
  4028f4:	eba2 0203 	sub.w	r2, r2, r3
  4028f8:	440b      	add	r3, r1
  4028fa:	60a2      	str	r2, [r4, #8]
  4028fc:	6023      	str	r3, [r4, #0]
  4028fe:	d1d9      	bne.n	4028b4 <__sfvwrite_r+0x19c>
  402900:	4648      	mov	r0, r9
  402902:	4621      	mov	r1, r4
  402904:	f7ff fcc4 	bl	402290 <_fflush_r>
  402908:	2800      	cmp	r0, #0
  40290a:	d1a2      	bne.n	402852 <__sfvwrite_r+0x13a>
  40290c:	f8cd 8000 	str.w	r8, [sp]
  402910:	e7d0      	b.n	4028b4 <__sfvwrite_r+0x19c>
  402912:	6820      	ldr	r0, [r4, #0]
  402914:	4647      	mov	r7, r8
  402916:	46c2      	mov	sl, r8
  402918:	e757      	b.n	4027ca <__sfvwrite_r+0xb2>
  40291a:	4658      	mov	r0, fp
  40291c:	210a      	movs	r1, #10
  40291e:	4652      	mov	r2, sl
  402920:	f000 fbc4 	bl	4030ac <memchr>
  402924:	2800      	cmp	r0, #0
  402926:	d073      	beq.n	402a10 <__sfvwrite_r+0x2f8>
  402928:	3001      	adds	r0, #1
  40292a:	2301      	movs	r3, #1
  40292c:	ebcb 0800 	rsb	r8, fp, r0
  402930:	9300      	str	r3, [sp, #0]
  402932:	e7a1      	b.n	402878 <__sfvwrite_r+0x160>
  402934:	6967      	ldr	r7, [r4, #20]
  402936:	6921      	ldr	r1, [r4, #16]
  402938:	6823      	ldr	r3, [r4, #0]
  40293a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40293e:	1a5b      	subs	r3, r3, r1
  402940:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  402944:	1c58      	adds	r0, r3, #1
  402946:	107f      	asrs	r7, r7, #1
  402948:	4440      	add	r0, r8
  40294a:	4287      	cmp	r7, r0
  40294c:	463a      	mov	r2, r7
  40294e:	bf3c      	itt	cc
  402950:	4607      	movcc	r7, r0
  402952:	463a      	movcc	r2, r7
  402954:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  402958:	9300      	str	r3, [sp, #0]
  40295a:	d046      	beq.n	4029ea <__sfvwrite_r+0x2d2>
  40295c:	4611      	mov	r1, r2
  40295e:	4648      	mov	r0, r9
  402960:	f000 f912 	bl	402b88 <_malloc_r>
  402964:	9b00      	ldr	r3, [sp, #0]
  402966:	4682      	mov	sl, r0
  402968:	2800      	cmp	r0, #0
  40296a:	d059      	beq.n	402a20 <__sfvwrite_r+0x308>
  40296c:	461a      	mov	r2, r3
  40296e:	6921      	ldr	r1, [r4, #16]
  402970:	9300      	str	r3, [sp, #0]
  402972:	f000 fbe5 	bl	403140 <memcpy>
  402976:	89a2      	ldrh	r2, [r4, #12]
  402978:	9b00      	ldr	r3, [sp, #0]
  40297a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40297e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402982:	81a2      	strh	r2, [r4, #12]
  402984:	eb0a 0003 	add.w	r0, sl, r3
  402988:	1afb      	subs	r3, r7, r3
  40298a:	f8c4 a010 	str.w	sl, [r4, #16]
  40298e:	6167      	str	r7, [r4, #20]
  402990:	6020      	str	r0, [r4, #0]
  402992:	60a3      	str	r3, [r4, #8]
  402994:	4647      	mov	r7, r8
  402996:	46c2      	mov	sl, r8
  402998:	e717      	b.n	4027ca <__sfvwrite_r+0xb2>
  40299a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40299e:	4543      	cmp	r3, r8
  4029a0:	bf28      	it	cs
  4029a2:	4643      	movcs	r3, r8
  4029a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4029a6:	fb93 f3f2 	sdiv	r3, r3, r2
  4029aa:	4648      	mov	r0, r9
  4029ac:	fb03 f302 	mul.w	r3, r3, r2
  4029b0:	69e1      	ldr	r1, [r4, #28]
  4029b2:	465a      	mov	r2, fp
  4029b4:	47b8      	blx	r7
  4029b6:	2800      	cmp	r0, #0
  4029b8:	f73f af13 	bgt.w	4027e2 <__sfvwrite_r+0xca>
  4029bc:	e749      	b.n	402852 <__sfvwrite_r+0x13a>
  4029be:	4662      	mov	r2, ip
  4029c0:	4659      	mov	r1, fp
  4029c2:	f8cd c004 	str.w	ip, [sp, #4]
  4029c6:	f000 fc55 	bl	403274 <memmove>
  4029ca:	6823      	ldr	r3, [r4, #0]
  4029cc:	f8dd c004 	ldr.w	ip, [sp, #4]
  4029d0:	4463      	add	r3, ip
  4029d2:	6023      	str	r3, [r4, #0]
  4029d4:	4648      	mov	r0, r9
  4029d6:	4621      	mov	r1, r4
  4029d8:	f7ff fc5a 	bl	402290 <_fflush_r>
  4029dc:	f8dd c004 	ldr.w	ip, [sp, #4]
  4029e0:	2800      	cmp	r0, #0
  4029e2:	f47f af36 	bne.w	402852 <__sfvwrite_r+0x13a>
  4029e6:	4667      	mov	r7, ip
  4029e8:	e761      	b.n	4028ae <__sfvwrite_r+0x196>
  4029ea:	4648      	mov	r0, r9
  4029ec:	f000 fcaa 	bl	403344 <_realloc_r>
  4029f0:	9b00      	ldr	r3, [sp, #0]
  4029f2:	4682      	mov	sl, r0
  4029f4:	2800      	cmp	r0, #0
  4029f6:	d1c5      	bne.n	402984 <__sfvwrite_r+0x26c>
  4029f8:	4648      	mov	r0, r9
  4029fa:	6921      	ldr	r1, [r4, #16]
  4029fc:	f7ff fdb4 	bl	402568 <_free_r>
  402a00:	89a3      	ldrh	r3, [r4, #12]
  402a02:	220c      	movs	r2, #12
  402a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402a08:	b29b      	uxth	r3, r3
  402a0a:	f8c9 2000 	str.w	r2, [r9]
  402a0e:	e721      	b.n	402854 <__sfvwrite_r+0x13c>
  402a10:	2301      	movs	r3, #1
  402a12:	f10a 0801 	add.w	r8, sl, #1
  402a16:	9300      	str	r3, [sp, #0]
  402a18:	e72e      	b.n	402878 <__sfvwrite_r+0x160>
  402a1a:	f04f 30ff 	mov.w	r0, #4294967295
  402a1e:	e6ad      	b.n	40277c <__sfvwrite_r+0x64>
  402a20:	230c      	movs	r3, #12
  402a22:	f8c9 3000 	str.w	r3, [r9]
  402a26:	89a3      	ldrh	r3, [r4, #12]
  402a28:	e714      	b.n	402854 <__sfvwrite_r+0x13c>
  402a2a:	bf00      	nop
  402a2c:	7ffffc00 	.word	0x7ffffc00

00402a30 <_fwalk_reent>:
  402a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a34:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402a38:	d01f      	beq.n	402a7a <_fwalk_reent+0x4a>
  402a3a:	4688      	mov	r8, r1
  402a3c:	4606      	mov	r6, r0
  402a3e:	f04f 0900 	mov.w	r9, #0
  402a42:	687d      	ldr	r5, [r7, #4]
  402a44:	68bc      	ldr	r4, [r7, #8]
  402a46:	3d01      	subs	r5, #1
  402a48:	d411      	bmi.n	402a6e <_fwalk_reent+0x3e>
  402a4a:	89a3      	ldrh	r3, [r4, #12]
  402a4c:	2b01      	cmp	r3, #1
  402a4e:	f105 35ff 	add.w	r5, r5, #4294967295
  402a52:	d908      	bls.n	402a66 <_fwalk_reent+0x36>
  402a54:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402a58:	3301      	adds	r3, #1
  402a5a:	4621      	mov	r1, r4
  402a5c:	4630      	mov	r0, r6
  402a5e:	d002      	beq.n	402a66 <_fwalk_reent+0x36>
  402a60:	47c0      	blx	r8
  402a62:	ea49 0900 	orr.w	r9, r9, r0
  402a66:	1c6b      	adds	r3, r5, #1
  402a68:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402a6c:	d1ed      	bne.n	402a4a <_fwalk_reent+0x1a>
  402a6e:	683f      	ldr	r7, [r7, #0]
  402a70:	2f00      	cmp	r7, #0
  402a72:	d1e6      	bne.n	402a42 <_fwalk_reent+0x12>
  402a74:	4648      	mov	r0, r9
  402a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a7a:	46b9      	mov	r9, r7
  402a7c:	4648      	mov	r0, r9
  402a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a82:	bf00      	nop

00402a84 <__locale_charset>:
  402a84:	4800      	ldr	r0, [pc, #0]	; (402a88 <__locale_charset+0x4>)
  402a86:	4770      	bx	lr
  402a88:	20000434 	.word	0x20000434

00402a8c <__locale_mb_cur_max>:
  402a8c:	4b01      	ldr	r3, [pc, #4]	; (402a94 <__locale_mb_cur_max+0x8>)
  402a8e:	6818      	ldr	r0, [r3, #0]
  402a90:	4770      	bx	lr
  402a92:	bf00      	nop
  402a94:	20000454 	.word	0x20000454

00402a98 <__smakebuf_r>:
  402a98:	898b      	ldrh	r3, [r1, #12]
  402a9a:	b29a      	uxth	r2, r3
  402a9c:	f012 0f02 	tst.w	r2, #2
  402aa0:	d13c      	bne.n	402b1c <__smakebuf_r+0x84>
  402aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
  402aa4:	460c      	mov	r4, r1
  402aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402aaa:	2900      	cmp	r1, #0
  402aac:	b091      	sub	sp, #68	; 0x44
  402aae:	4605      	mov	r5, r0
  402ab0:	db19      	blt.n	402ae6 <__smakebuf_r+0x4e>
  402ab2:	aa01      	add	r2, sp, #4
  402ab4:	f000 ffd6 	bl	403a64 <_fstat_r>
  402ab8:	2800      	cmp	r0, #0
  402aba:	db12      	blt.n	402ae2 <__smakebuf_r+0x4a>
  402abc:	9b02      	ldr	r3, [sp, #8]
  402abe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  402ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  402ac6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  402aca:	fab7 f787 	clz	r7, r7
  402ace:	ea4f 1757 	mov.w	r7, r7, lsr #5
  402ad2:	d02a      	beq.n	402b2a <__smakebuf_r+0x92>
  402ad4:	89a3      	ldrh	r3, [r4, #12]
  402ad6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402ada:	81a3      	strh	r3, [r4, #12]
  402adc:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402ae0:	e00b      	b.n	402afa <__smakebuf_r+0x62>
  402ae2:	89a3      	ldrh	r3, [r4, #12]
  402ae4:	b29a      	uxth	r2, r3
  402ae6:	f012 0f80 	tst.w	r2, #128	; 0x80
  402aea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402aee:	81a3      	strh	r3, [r4, #12]
  402af0:	bf0c      	ite	eq
  402af2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  402af6:	2640      	movne	r6, #64	; 0x40
  402af8:	2700      	movs	r7, #0
  402afa:	4628      	mov	r0, r5
  402afc:	4631      	mov	r1, r6
  402afe:	f000 f843 	bl	402b88 <_malloc_r>
  402b02:	89a3      	ldrh	r3, [r4, #12]
  402b04:	b340      	cbz	r0, 402b58 <__smakebuf_r+0xc0>
  402b06:	4a1a      	ldr	r2, [pc, #104]	; (402b70 <__smakebuf_r+0xd8>)
  402b08:	63ea      	str	r2, [r5, #60]	; 0x3c
  402b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b0e:	81a3      	strh	r3, [r4, #12]
  402b10:	6020      	str	r0, [r4, #0]
  402b12:	6120      	str	r0, [r4, #16]
  402b14:	6166      	str	r6, [r4, #20]
  402b16:	b99f      	cbnz	r7, 402b40 <__smakebuf_r+0xa8>
  402b18:	b011      	add	sp, #68	; 0x44
  402b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b1c:	f101 0343 	add.w	r3, r1, #67	; 0x43
  402b20:	2201      	movs	r2, #1
  402b22:	600b      	str	r3, [r1, #0]
  402b24:	610b      	str	r3, [r1, #16]
  402b26:	614a      	str	r2, [r1, #20]
  402b28:	4770      	bx	lr
  402b2a:	4b12      	ldr	r3, [pc, #72]	; (402b74 <__smakebuf_r+0xdc>)
  402b2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  402b2e:	429a      	cmp	r2, r3
  402b30:	d1d0      	bne.n	402ad4 <__smakebuf_r+0x3c>
  402b32:	89a3      	ldrh	r3, [r4, #12]
  402b34:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402b38:	4333      	orrs	r3, r6
  402b3a:	81a3      	strh	r3, [r4, #12]
  402b3c:	64e6      	str	r6, [r4, #76]	; 0x4c
  402b3e:	e7dc      	b.n	402afa <__smakebuf_r+0x62>
  402b40:	4628      	mov	r0, r5
  402b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402b46:	f000 ffa1 	bl	403a8c <_isatty_r>
  402b4a:	2800      	cmp	r0, #0
  402b4c:	d0e4      	beq.n	402b18 <__smakebuf_r+0x80>
  402b4e:	89a3      	ldrh	r3, [r4, #12]
  402b50:	f043 0301 	orr.w	r3, r3, #1
  402b54:	81a3      	strh	r3, [r4, #12]
  402b56:	e7df      	b.n	402b18 <__smakebuf_r+0x80>
  402b58:	059a      	lsls	r2, r3, #22
  402b5a:	d4dd      	bmi.n	402b18 <__smakebuf_r+0x80>
  402b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402b60:	f043 0302 	orr.w	r3, r3, #2
  402b64:	2101      	movs	r1, #1
  402b66:	81a3      	strh	r3, [r4, #12]
  402b68:	6022      	str	r2, [r4, #0]
  402b6a:	6122      	str	r2, [r4, #16]
  402b6c:	6161      	str	r1, [r4, #20]
  402b6e:	e7d3      	b.n	402b18 <__smakebuf_r+0x80>
  402b70:	004022bd 	.word	0x004022bd
  402b74:	004037b1 	.word	0x004037b1

00402b78 <malloc>:
  402b78:	4b02      	ldr	r3, [pc, #8]	; (402b84 <malloc+0xc>)
  402b7a:	4601      	mov	r1, r0
  402b7c:	6818      	ldr	r0, [r3, #0]
  402b7e:	f000 b803 	b.w	402b88 <_malloc_r>
  402b82:	bf00      	nop
  402b84:	20000430 	.word	0x20000430

00402b88 <_malloc_r>:
  402b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b8c:	f101 050b 	add.w	r5, r1, #11
  402b90:	2d16      	cmp	r5, #22
  402b92:	b083      	sub	sp, #12
  402b94:	4606      	mov	r6, r0
  402b96:	d927      	bls.n	402be8 <_malloc_r+0x60>
  402b98:	f035 0507 	bics.w	r5, r5, #7
  402b9c:	f100 80b6 	bmi.w	402d0c <_malloc_r+0x184>
  402ba0:	42a9      	cmp	r1, r5
  402ba2:	f200 80b3 	bhi.w	402d0c <_malloc_r+0x184>
  402ba6:	f000 fbc9 	bl	40333c <__malloc_lock>
  402baa:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402bae:	d222      	bcs.n	402bf6 <_malloc_r+0x6e>
  402bb0:	4fc2      	ldr	r7, [pc, #776]	; (402ebc <_malloc_r+0x334>)
  402bb2:	08e8      	lsrs	r0, r5, #3
  402bb4:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  402bb8:	68dc      	ldr	r4, [r3, #12]
  402bba:	429c      	cmp	r4, r3
  402bbc:	f000 81c8 	beq.w	402f50 <_malloc_r+0x3c8>
  402bc0:	6863      	ldr	r3, [r4, #4]
  402bc2:	68e1      	ldr	r1, [r4, #12]
  402bc4:	68a5      	ldr	r5, [r4, #8]
  402bc6:	f023 0303 	bic.w	r3, r3, #3
  402bca:	4423      	add	r3, r4
  402bcc:	4630      	mov	r0, r6
  402bce:	685a      	ldr	r2, [r3, #4]
  402bd0:	60e9      	str	r1, [r5, #12]
  402bd2:	f042 0201 	orr.w	r2, r2, #1
  402bd6:	608d      	str	r5, [r1, #8]
  402bd8:	605a      	str	r2, [r3, #4]
  402bda:	f000 fbb1 	bl	403340 <__malloc_unlock>
  402bde:	3408      	adds	r4, #8
  402be0:	4620      	mov	r0, r4
  402be2:	b003      	add	sp, #12
  402be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402be8:	2910      	cmp	r1, #16
  402bea:	f200 808f 	bhi.w	402d0c <_malloc_r+0x184>
  402bee:	f000 fba5 	bl	40333c <__malloc_lock>
  402bf2:	2510      	movs	r5, #16
  402bf4:	e7dc      	b.n	402bb0 <_malloc_r+0x28>
  402bf6:	0a68      	lsrs	r0, r5, #9
  402bf8:	f000 808f 	beq.w	402d1a <_malloc_r+0x192>
  402bfc:	2804      	cmp	r0, #4
  402bfe:	f200 8154 	bhi.w	402eaa <_malloc_r+0x322>
  402c02:	09a8      	lsrs	r0, r5, #6
  402c04:	3038      	adds	r0, #56	; 0x38
  402c06:	0041      	lsls	r1, r0, #1
  402c08:	4fac      	ldr	r7, [pc, #688]	; (402ebc <_malloc_r+0x334>)
  402c0a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  402c0e:	68cc      	ldr	r4, [r1, #12]
  402c10:	42a1      	cmp	r1, r4
  402c12:	d106      	bne.n	402c22 <_malloc_r+0x9a>
  402c14:	e00c      	b.n	402c30 <_malloc_r+0xa8>
  402c16:	2a00      	cmp	r2, #0
  402c18:	f280 8082 	bge.w	402d20 <_malloc_r+0x198>
  402c1c:	68e4      	ldr	r4, [r4, #12]
  402c1e:	42a1      	cmp	r1, r4
  402c20:	d006      	beq.n	402c30 <_malloc_r+0xa8>
  402c22:	6863      	ldr	r3, [r4, #4]
  402c24:	f023 0303 	bic.w	r3, r3, #3
  402c28:	1b5a      	subs	r2, r3, r5
  402c2a:	2a0f      	cmp	r2, #15
  402c2c:	ddf3      	ble.n	402c16 <_malloc_r+0x8e>
  402c2e:	3801      	subs	r0, #1
  402c30:	3001      	adds	r0, #1
  402c32:	49a2      	ldr	r1, [pc, #648]	; (402ebc <_malloc_r+0x334>)
  402c34:	693c      	ldr	r4, [r7, #16]
  402c36:	f101 0e08 	add.w	lr, r1, #8
  402c3a:	4574      	cmp	r4, lr
  402c3c:	f000 817d 	beq.w	402f3a <_malloc_r+0x3b2>
  402c40:	6863      	ldr	r3, [r4, #4]
  402c42:	f023 0303 	bic.w	r3, r3, #3
  402c46:	1b5a      	subs	r2, r3, r5
  402c48:	2a0f      	cmp	r2, #15
  402c4a:	f300 8163 	bgt.w	402f14 <_malloc_r+0x38c>
  402c4e:	2a00      	cmp	r2, #0
  402c50:	f8c1 e014 	str.w	lr, [r1, #20]
  402c54:	f8c1 e010 	str.w	lr, [r1, #16]
  402c58:	da73      	bge.n	402d42 <_malloc_r+0x1ba>
  402c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c5e:	f080 8139 	bcs.w	402ed4 <_malloc_r+0x34c>
  402c62:	08db      	lsrs	r3, r3, #3
  402c64:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  402c68:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  402c6c:	684a      	ldr	r2, [r1, #4]
  402c6e:	f8d8 9008 	ldr.w	r9, [r8, #8]
  402c72:	f8c4 9008 	str.w	r9, [r4, #8]
  402c76:	2301      	movs	r3, #1
  402c78:	fa03 f30c 	lsl.w	r3, r3, ip
  402c7c:	4313      	orrs	r3, r2
  402c7e:	f8c4 800c 	str.w	r8, [r4, #12]
  402c82:	604b      	str	r3, [r1, #4]
  402c84:	f8c8 4008 	str.w	r4, [r8, #8]
  402c88:	f8c9 400c 	str.w	r4, [r9, #12]
  402c8c:	1082      	asrs	r2, r0, #2
  402c8e:	2401      	movs	r4, #1
  402c90:	4094      	lsls	r4, r2
  402c92:	429c      	cmp	r4, r3
  402c94:	d862      	bhi.n	402d5c <_malloc_r+0x1d4>
  402c96:	4223      	tst	r3, r4
  402c98:	d106      	bne.n	402ca8 <_malloc_r+0x120>
  402c9a:	f020 0003 	bic.w	r0, r0, #3
  402c9e:	0064      	lsls	r4, r4, #1
  402ca0:	4223      	tst	r3, r4
  402ca2:	f100 0004 	add.w	r0, r0, #4
  402ca6:	d0fa      	beq.n	402c9e <_malloc_r+0x116>
  402ca8:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  402cac:	46c4      	mov	ip, r8
  402cae:	4681      	mov	r9, r0
  402cb0:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402cb4:	459c      	cmp	ip, r3
  402cb6:	d107      	bne.n	402cc8 <_malloc_r+0x140>
  402cb8:	e141      	b.n	402f3e <_malloc_r+0x3b6>
  402cba:	2900      	cmp	r1, #0
  402cbc:	f280 8151 	bge.w	402f62 <_malloc_r+0x3da>
  402cc0:	68db      	ldr	r3, [r3, #12]
  402cc2:	459c      	cmp	ip, r3
  402cc4:	f000 813b 	beq.w	402f3e <_malloc_r+0x3b6>
  402cc8:	685a      	ldr	r2, [r3, #4]
  402cca:	f022 0203 	bic.w	r2, r2, #3
  402cce:	1b51      	subs	r1, r2, r5
  402cd0:	290f      	cmp	r1, #15
  402cd2:	ddf2      	ble.n	402cba <_malloc_r+0x132>
  402cd4:	461c      	mov	r4, r3
  402cd6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402cda:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402cde:	195a      	adds	r2, r3, r5
  402ce0:	f045 0901 	orr.w	r9, r5, #1
  402ce4:	f041 0501 	orr.w	r5, r1, #1
  402ce8:	f8c3 9004 	str.w	r9, [r3, #4]
  402cec:	4630      	mov	r0, r6
  402cee:	f8c8 c00c 	str.w	ip, [r8, #12]
  402cf2:	f8cc 8008 	str.w	r8, [ip, #8]
  402cf6:	617a      	str	r2, [r7, #20]
  402cf8:	613a      	str	r2, [r7, #16]
  402cfa:	f8c2 e00c 	str.w	lr, [r2, #12]
  402cfe:	f8c2 e008 	str.w	lr, [r2, #8]
  402d02:	6055      	str	r5, [r2, #4]
  402d04:	5051      	str	r1, [r2, r1]
  402d06:	f000 fb1b 	bl	403340 <__malloc_unlock>
  402d0a:	e769      	b.n	402be0 <_malloc_r+0x58>
  402d0c:	2400      	movs	r4, #0
  402d0e:	230c      	movs	r3, #12
  402d10:	4620      	mov	r0, r4
  402d12:	6033      	str	r3, [r6, #0]
  402d14:	b003      	add	sp, #12
  402d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d1a:	217e      	movs	r1, #126	; 0x7e
  402d1c:	203f      	movs	r0, #63	; 0x3f
  402d1e:	e773      	b.n	402c08 <_malloc_r+0x80>
  402d20:	4423      	add	r3, r4
  402d22:	68e1      	ldr	r1, [r4, #12]
  402d24:	685a      	ldr	r2, [r3, #4]
  402d26:	68a5      	ldr	r5, [r4, #8]
  402d28:	f042 0201 	orr.w	r2, r2, #1
  402d2c:	60e9      	str	r1, [r5, #12]
  402d2e:	4630      	mov	r0, r6
  402d30:	608d      	str	r5, [r1, #8]
  402d32:	605a      	str	r2, [r3, #4]
  402d34:	f000 fb04 	bl	403340 <__malloc_unlock>
  402d38:	3408      	adds	r4, #8
  402d3a:	4620      	mov	r0, r4
  402d3c:	b003      	add	sp, #12
  402d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d42:	4423      	add	r3, r4
  402d44:	4630      	mov	r0, r6
  402d46:	685a      	ldr	r2, [r3, #4]
  402d48:	f042 0201 	orr.w	r2, r2, #1
  402d4c:	605a      	str	r2, [r3, #4]
  402d4e:	f000 faf7 	bl	403340 <__malloc_unlock>
  402d52:	3408      	adds	r4, #8
  402d54:	4620      	mov	r0, r4
  402d56:	b003      	add	sp, #12
  402d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d5c:	68bc      	ldr	r4, [r7, #8]
  402d5e:	6863      	ldr	r3, [r4, #4]
  402d60:	f023 0803 	bic.w	r8, r3, #3
  402d64:	4545      	cmp	r5, r8
  402d66:	d804      	bhi.n	402d72 <_malloc_r+0x1ea>
  402d68:	ebc5 0308 	rsb	r3, r5, r8
  402d6c:	2b0f      	cmp	r3, #15
  402d6e:	f300 808c 	bgt.w	402e8a <_malloc_r+0x302>
  402d72:	4b53      	ldr	r3, [pc, #332]	; (402ec0 <_malloc_r+0x338>)
  402d74:	f8df a158 	ldr.w	sl, [pc, #344]	; 402ed0 <_malloc_r+0x348>
  402d78:	681a      	ldr	r2, [r3, #0]
  402d7a:	f8da 3000 	ldr.w	r3, [sl]
  402d7e:	3301      	adds	r3, #1
  402d80:	442a      	add	r2, r5
  402d82:	eb04 0b08 	add.w	fp, r4, r8
  402d86:	f000 8150 	beq.w	40302a <_malloc_r+0x4a2>
  402d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402d8e:	320f      	adds	r2, #15
  402d90:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402d94:	f022 020f 	bic.w	r2, r2, #15
  402d98:	4611      	mov	r1, r2
  402d9a:	4630      	mov	r0, r6
  402d9c:	9201      	str	r2, [sp, #4]
  402d9e:	f000 fcc7 	bl	403730 <_sbrk_r>
  402da2:	f1b0 3fff 	cmp.w	r0, #4294967295
  402da6:	4681      	mov	r9, r0
  402da8:	9a01      	ldr	r2, [sp, #4]
  402daa:	f000 8147 	beq.w	40303c <_malloc_r+0x4b4>
  402dae:	4583      	cmp	fp, r0
  402db0:	f200 80ee 	bhi.w	402f90 <_malloc_r+0x408>
  402db4:	4b43      	ldr	r3, [pc, #268]	; (402ec4 <_malloc_r+0x33c>)
  402db6:	6819      	ldr	r1, [r3, #0]
  402db8:	45cb      	cmp	fp, r9
  402dba:	4411      	add	r1, r2
  402dbc:	6019      	str	r1, [r3, #0]
  402dbe:	f000 8142 	beq.w	403046 <_malloc_r+0x4be>
  402dc2:	f8da 0000 	ldr.w	r0, [sl]
  402dc6:	f8df e108 	ldr.w	lr, [pc, #264]	; 402ed0 <_malloc_r+0x348>
  402dca:	3001      	adds	r0, #1
  402dcc:	bf1b      	ittet	ne
  402dce:	ebcb 0b09 	rsbne	fp, fp, r9
  402dd2:	4459      	addne	r1, fp
  402dd4:	f8ce 9000 	streq.w	r9, [lr]
  402dd8:	6019      	strne	r1, [r3, #0]
  402dda:	f019 0107 	ands.w	r1, r9, #7
  402dde:	f000 8107 	beq.w	402ff0 <_malloc_r+0x468>
  402de2:	f1c1 0008 	rsb	r0, r1, #8
  402de6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402dea:	4481      	add	r9, r0
  402dec:	3108      	adds	r1, #8
  402dee:	444a      	add	r2, r9
  402df0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402df4:	ebc2 0a01 	rsb	sl, r2, r1
  402df8:	4651      	mov	r1, sl
  402dfa:	4630      	mov	r0, r6
  402dfc:	9301      	str	r3, [sp, #4]
  402dfe:	f000 fc97 	bl	403730 <_sbrk_r>
  402e02:	1c43      	adds	r3, r0, #1
  402e04:	9b01      	ldr	r3, [sp, #4]
  402e06:	f000 812c 	beq.w	403062 <_malloc_r+0x4da>
  402e0a:	ebc9 0200 	rsb	r2, r9, r0
  402e0e:	4452      	add	r2, sl
  402e10:	f042 0201 	orr.w	r2, r2, #1
  402e14:	6819      	ldr	r1, [r3, #0]
  402e16:	f8c7 9008 	str.w	r9, [r7, #8]
  402e1a:	4451      	add	r1, sl
  402e1c:	42bc      	cmp	r4, r7
  402e1e:	f8c9 2004 	str.w	r2, [r9, #4]
  402e22:	6019      	str	r1, [r3, #0]
  402e24:	f8df a09c 	ldr.w	sl, [pc, #156]	; 402ec4 <_malloc_r+0x33c>
  402e28:	d016      	beq.n	402e58 <_malloc_r+0x2d0>
  402e2a:	f1b8 0f0f 	cmp.w	r8, #15
  402e2e:	f240 80ee 	bls.w	40300e <_malloc_r+0x486>
  402e32:	6862      	ldr	r2, [r4, #4]
  402e34:	f1a8 030c 	sub.w	r3, r8, #12
  402e38:	f023 0307 	bic.w	r3, r3, #7
  402e3c:	18e0      	adds	r0, r4, r3
  402e3e:	f002 0201 	and.w	r2, r2, #1
  402e42:	f04f 0e05 	mov.w	lr, #5
  402e46:	431a      	orrs	r2, r3
  402e48:	2b0f      	cmp	r3, #15
  402e4a:	6062      	str	r2, [r4, #4]
  402e4c:	f8c0 e004 	str.w	lr, [r0, #4]
  402e50:	f8c0 e008 	str.w	lr, [r0, #8]
  402e54:	f200 8109 	bhi.w	40306a <_malloc_r+0x4e2>
  402e58:	4b1b      	ldr	r3, [pc, #108]	; (402ec8 <_malloc_r+0x340>)
  402e5a:	68bc      	ldr	r4, [r7, #8]
  402e5c:	681a      	ldr	r2, [r3, #0]
  402e5e:	4291      	cmp	r1, r2
  402e60:	bf88      	it	hi
  402e62:	6019      	strhi	r1, [r3, #0]
  402e64:	4b19      	ldr	r3, [pc, #100]	; (402ecc <_malloc_r+0x344>)
  402e66:	681a      	ldr	r2, [r3, #0]
  402e68:	4291      	cmp	r1, r2
  402e6a:	6862      	ldr	r2, [r4, #4]
  402e6c:	bf88      	it	hi
  402e6e:	6019      	strhi	r1, [r3, #0]
  402e70:	f022 0203 	bic.w	r2, r2, #3
  402e74:	4295      	cmp	r5, r2
  402e76:	eba2 0305 	sub.w	r3, r2, r5
  402e7a:	d801      	bhi.n	402e80 <_malloc_r+0x2f8>
  402e7c:	2b0f      	cmp	r3, #15
  402e7e:	dc04      	bgt.n	402e8a <_malloc_r+0x302>
  402e80:	4630      	mov	r0, r6
  402e82:	f000 fa5d 	bl	403340 <__malloc_unlock>
  402e86:	2400      	movs	r4, #0
  402e88:	e6aa      	b.n	402be0 <_malloc_r+0x58>
  402e8a:	1962      	adds	r2, r4, r5
  402e8c:	f043 0301 	orr.w	r3, r3, #1
  402e90:	f045 0501 	orr.w	r5, r5, #1
  402e94:	6065      	str	r5, [r4, #4]
  402e96:	4630      	mov	r0, r6
  402e98:	60ba      	str	r2, [r7, #8]
  402e9a:	6053      	str	r3, [r2, #4]
  402e9c:	f000 fa50 	bl	403340 <__malloc_unlock>
  402ea0:	3408      	adds	r4, #8
  402ea2:	4620      	mov	r0, r4
  402ea4:	b003      	add	sp, #12
  402ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402eaa:	2814      	cmp	r0, #20
  402eac:	d968      	bls.n	402f80 <_malloc_r+0x3f8>
  402eae:	2854      	cmp	r0, #84	; 0x54
  402eb0:	f200 8097 	bhi.w	402fe2 <_malloc_r+0x45a>
  402eb4:	0b28      	lsrs	r0, r5, #12
  402eb6:	306e      	adds	r0, #110	; 0x6e
  402eb8:	0041      	lsls	r1, r0, #1
  402eba:	e6a5      	b.n	402c08 <_malloc_r+0x80>
  402ebc:	20000458 	.word	0x20000458
  402ec0:	20000918 	.word	0x20000918
  402ec4:	2000091c 	.word	0x2000091c
  402ec8:	20000914 	.word	0x20000914
  402ecc:	20000910 	.word	0x20000910
  402ed0:	20000864 	.word	0x20000864
  402ed4:	0a5a      	lsrs	r2, r3, #9
  402ed6:	2a04      	cmp	r2, #4
  402ed8:	d955      	bls.n	402f86 <_malloc_r+0x3fe>
  402eda:	2a14      	cmp	r2, #20
  402edc:	f200 80a7 	bhi.w	40302e <_malloc_r+0x4a6>
  402ee0:	325b      	adds	r2, #91	; 0x5b
  402ee2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402ee6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  402eea:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4030a8 <_malloc_r+0x520>
  402eee:	f8dc 1008 	ldr.w	r1, [ip, #8]
  402ef2:	4561      	cmp	r1, ip
  402ef4:	d07f      	beq.n	402ff6 <_malloc_r+0x46e>
  402ef6:	684a      	ldr	r2, [r1, #4]
  402ef8:	f022 0203 	bic.w	r2, r2, #3
  402efc:	4293      	cmp	r3, r2
  402efe:	d202      	bcs.n	402f06 <_malloc_r+0x37e>
  402f00:	6889      	ldr	r1, [r1, #8]
  402f02:	458c      	cmp	ip, r1
  402f04:	d1f7      	bne.n	402ef6 <_malloc_r+0x36e>
  402f06:	68ca      	ldr	r2, [r1, #12]
  402f08:	687b      	ldr	r3, [r7, #4]
  402f0a:	60e2      	str	r2, [r4, #12]
  402f0c:	60a1      	str	r1, [r4, #8]
  402f0e:	6094      	str	r4, [r2, #8]
  402f10:	60cc      	str	r4, [r1, #12]
  402f12:	e6bb      	b.n	402c8c <_malloc_r+0x104>
  402f14:	1963      	adds	r3, r4, r5
  402f16:	f042 0701 	orr.w	r7, r2, #1
  402f1a:	f045 0501 	orr.w	r5, r5, #1
  402f1e:	6065      	str	r5, [r4, #4]
  402f20:	4630      	mov	r0, r6
  402f22:	614b      	str	r3, [r1, #20]
  402f24:	610b      	str	r3, [r1, #16]
  402f26:	f8c3 e00c 	str.w	lr, [r3, #12]
  402f2a:	f8c3 e008 	str.w	lr, [r3, #8]
  402f2e:	605f      	str	r7, [r3, #4]
  402f30:	509a      	str	r2, [r3, r2]
  402f32:	3408      	adds	r4, #8
  402f34:	f000 fa04 	bl	403340 <__malloc_unlock>
  402f38:	e652      	b.n	402be0 <_malloc_r+0x58>
  402f3a:	684b      	ldr	r3, [r1, #4]
  402f3c:	e6a6      	b.n	402c8c <_malloc_r+0x104>
  402f3e:	f109 0901 	add.w	r9, r9, #1
  402f42:	f019 0f03 	tst.w	r9, #3
  402f46:	f10c 0c08 	add.w	ip, ip, #8
  402f4a:	f47f aeb1 	bne.w	402cb0 <_malloc_r+0x128>
  402f4e:	e02c      	b.n	402faa <_malloc_r+0x422>
  402f50:	f104 0308 	add.w	r3, r4, #8
  402f54:	6964      	ldr	r4, [r4, #20]
  402f56:	42a3      	cmp	r3, r4
  402f58:	bf08      	it	eq
  402f5a:	3002      	addeq	r0, #2
  402f5c:	f43f ae69 	beq.w	402c32 <_malloc_r+0xaa>
  402f60:	e62e      	b.n	402bc0 <_malloc_r+0x38>
  402f62:	441a      	add	r2, r3
  402f64:	461c      	mov	r4, r3
  402f66:	6851      	ldr	r1, [r2, #4]
  402f68:	68db      	ldr	r3, [r3, #12]
  402f6a:	f854 5f08 	ldr.w	r5, [r4, #8]!
  402f6e:	f041 0101 	orr.w	r1, r1, #1
  402f72:	6051      	str	r1, [r2, #4]
  402f74:	4630      	mov	r0, r6
  402f76:	60eb      	str	r3, [r5, #12]
  402f78:	609d      	str	r5, [r3, #8]
  402f7a:	f000 f9e1 	bl	403340 <__malloc_unlock>
  402f7e:	e62f      	b.n	402be0 <_malloc_r+0x58>
  402f80:	305b      	adds	r0, #91	; 0x5b
  402f82:	0041      	lsls	r1, r0, #1
  402f84:	e640      	b.n	402c08 <_malloc_r+0x80>
  402f86:	099a      	lsrs	r2, r3, #6
  402f88:	3238      	adds	r2, #56	; 0x38
  402f8a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402f8e:	e7aa      	b.n	402ee6 <_malloc_r+0x35e>
  402f90:	42bc      	cmp	r4, r7
  402f92:	4b45      	ldr	r3, [pc, #276]	; (4030a8 <_malloc_r+0x520>)
  402f94:	f43f af0e 	beq.w	402db4 <_malloc_r+0x22c>
  402f98:	689c      	ldr	r4, [r3, #8]
  402f9a:	6862      	ldr	r2, [r4, #4]
  402f9c:	f022 0203 	bic.w	r2, r2, #3
  402fa0:	e768      	b.n	402e74 <_malloc_r+0x2ec>
  402fa2:	f8d8 8000 	ldr.w	r8, [r8]
  402fa6:	4598      	cmp	r8, r3
  402fa8:	d17c      	bne.n	4030a4 <_malloc_r+0x51c>
  402faa:	f010 0f03 	tst.w	r0, #3
  402fae:	f1a8 0308 	sub.w	r3, r8, #8
  402fb2:	f100 30ff 	add.w	r0, r0, #4294967295
  402fb6:	d1f4      	bne.n	402fa2 <_malloc_r+0x41a>
  402fb8:	687b      	ldr	r3, [r7, #4]
  402fba:	ea23 0304 	bic.w	r3, r3, r4
  402fbe:	607b      	str	r3, [r7, #4]
  402fc0:	0064      	lsls	r4, r4, #1
  402fc2:	429c      	cmp	r4, r3
  402fc4:	f63f aeca 	bhi.w	402d5c <_malloc_r+0x1d4>
  402fc8:	2c00      	cmp	r4, #0
  402fca:	f43f aec7 	beq.w	402d5c <_malloc_r+0x1d4>
  402fce:	4223      	tst	r3, r4
  402fd0:	4648      	mov	r0, r9
  402fd2:	f47f ae69 	bne.w	402ca8 <_malloc_r+0x120>
  402fd6:	0064      	lsls	r4, r4, #1
  402fd8:	4223      	tst	r3, r4
  402fda:	f100 0004 	add.w	r0, r0, #4
  402fde:	d0fa      	beq.n	402fd6 <_malloc_r+0x44e>
  402fe0:	e662      	b.n	402ca8 <_malloc_r+0x120>
  402fe2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  402fe6:	d818      	bhi.n	40301a <_malloc_r+0x492>
  402fe8:	0be8      	lsrs	r0, r5, #15
  402fea:	3077      	adds	r0, #119	; 0x77
  402fec:	0041      	lsls	r1, r0, #1
  402fee:	e60b      	b.n	402c08 <_malloc_r+0x80>
  402ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402ff4:	e6fb      	b.n	402dee <_malloc_r+0x266>
  402ff6:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402ffa:	1092      	asrs	r2, r2, #2
  402ffc:	f04f 0c01 	mov.w	ip, #1
  403000:	fa0c f202 	lsl.w	r2, ip, r2
  403004:	4313      	orrs	r3, r2
  403006:	f8c8 3004 	str.w	r3, [r8, #4]
  40300a:	460a      	mov	r2, r1
  40300c:	e77d      	b.n	402f0a <_malloc_r+0x382>
  40300e:	2301      	movs	r3, #1
  403010:	f8c9 3004 	str.w	r3, [r9, #4]
  403014:	464c      	mov	r4, r9
  403016:	2200      	movs	r2, #0
  403018:	e72c      	b.n	402e74 <_malloc_r+0x2ec>
  40301a:	f240 5354 	movw	r3, #1364	; 0x554
  40301e:	4298      	cmp	r0, r3
  403020:	d81c      	bhi.n	40305c <_malloc_r+0x4d4>
  403022:	0ca8      	lsrs	r0, r5, #18
  403024:	307c      	adds	r0, #124	; 0x7c
  403026:	0041      	lsls	r1, r0, #1
  403028:	e5ee      	b.n	402c08 <_malloc_r+0x80>
  40302a:	3210      	adds	r2, #16
  40302c:	e6b4      	b.n	402d98 <_malloc_r+0x210>
  40302e:	2a54      	cmp	r2, #84	; 0x54
  403030:	d823      	bhi.n	40307a <_malloc_r+0x4f2>
  403032:	0b1a      	lsrs	r2, r3, #12
  403034:	326e      	adds	r2, #110	; 0x6e
  403036:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40303a:	e754      	b.n	402ee6 <_malloc_r+0x35e>
  40303c:	68bc      	ldr	r4, [r7, #8]
  40303e:	6862      	ldr	r2, [r4, #4]
  403040:	f022 0203 	bic.w	r2, r2, #3
  403044:	e716      	b.n	402e74 <_malloc_r+0x2ec>
  403046:	f3cb 000b 	ubfx	r0, fp, #0, #12
  40304a:	2800      	cmp	r0, #0
  40304c:	f47f aeb9 	bne.w	402dc2 <_malloc_r+0x23a>
  403050:	4442      	add	r2, r8
  403052:	68bb      	ldr	r3, [r7, #8]
  403054:	f042 0201 	orr.w	r2, r2, #1
  403058:	605a      	str	r2, [r3, #4]
  40305a:	e6fd      	b.n	402e58 <_malloc_r+0x2d0>
  40305c:	21fc      	movs	r1, #252	; 0xfc
  40305e:	207e      	movs	r0, #126	; 0x7e
  403060:	e5d2      	b.n	402c08 <_malloc_r+0x80>
  403062:	2201      	movs	r2, #1
  403064:	f04f 0a00 	mov.w	sl, #0
  403068:	e6d4      	b.n	402e14 <_malloc_r+0x28c>
  40306a:	f104 0108 	add.w	r1, r4, #8
  40306e:	4630      	mov	r0, r6
  403070:	f7ff fa7a 	bl	402568 <_free_r>
  403074:	f8da 1000 	ldr.w	r1, [sl]
  403078:	e6ee      	b.n	402e58 <_malloc_r+0x2d0>
  40307a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40307e:	d804      	bhi.n	40308a <_malloc_r+0x502>
  403080:	0bda      	lsrs	r2, r3, #15
  403082:	3277      	adds	r2, #119	; 0x77
  403084:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  403088:	e72d      	b.n	402ee6 <_malloc_r+0x35e>
  40308a:	f240 5154 	movw	r1, #1364	; 0x554
  40308e:	428a      	cmp	r2, r1
  403090:	d804      	bhi.n	40309c <_malloc_r+0x514>
  403092:	0c9a      	lsrs	r2, r3, #18
  403094:	327c      	adds	r2, #124	; 0x7c
  403096:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40309a:	e724      	b.n	402ee6 <_malloc_r+0x35e>
  40309c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4030a0:	227e      	movs	r2, #126	; 0x7e
  4030a2:	e720      	b.n	402ee6 <_malloc_r+0x35e>
  4030a4:	687b      	ldr	r3, [r7, #4]
  4030a6:	e78b      	b.n	402fc0 <_malloc_r+0x438>
  4030a8:	20000458 	.word	0x20000458

004030ac <memchr>:
  4030ac:	0783      	lsls	r3, r0, #30
  4030ae:	b470      	push	{r4, r5, r6}
  4030b0:	b2c9      	uxtb	r1, r1
  4030b2:	d040      	beq.n	403136 <memchr+0x8a>
  4030b4:	1e54      	subs	r4, r2, #1
  4030b6:	2a00      	cmp	r2, #0
  4030b8:	d03f      	beq.n	40313a <memchr+0x8e>
  4030ba:	7803      	ldrb	r3, [r0, #0]
  4030bc:	428b      	cmp	r3, r1
  4030be:	bf18      	it	ne
  4030c0:	1c43      	addne	r3, r0, #1
  4030c2:	d106      	bne.n	4030d2 <memchr+0x26>
  4030c4:	e01d      	b.n	403102 <memchr+0x56>
  4030c6:	b1f4      	cbz	r4, 403106 <memchr+0x5a>
  4030c8:	7802      	ldrb	r2, [r0, #0]
  4030ca:	428a      	cmp	r2, r1
  4030cc:	f104 34ff 	add.w	r4, r4, #4294967295
  4030d0:	d017      	beq.n	403102 <memchr+0x56>
  4030d2:	f013 0f03 	tst.w	r3, #3
  4030d6:	4618      	mov	r0, r3
  4030d8:	f103 0301 	add.w	r3, r3, #1
  4030dc:	d1f3      	bne.n	4030c6 <memchr+0x1a>
  4030de:	2c03      	cmp	r4, #3
  4030e0:	d814      	bhi.n	40310c <memchr+0x60>
  4030e2:	b184      	cbz	r4, 403106 <memchr+0x5a>
  4030e4:	7803      	ldrb	r3, [r0, #0]
  4030e6:	428b      	cmp	r3, r1
  4030e8:	d00b      	beq.n	403102 <memchr+0x56>
  4030ea:	1905      	adds	r5, r0, r4
  4030ec:	1c43      	adds	r3, r0, #1
  4030ee:	e002      	b.n	4030f6 <memchr+0x4a>
  4030f0:	7802      	ldrb	r2, [r0, #0]
  4030f2:	428a      	cmp	r2, r1
  4030f4:	d005      	beq.n	403102 <memchr+0x56>
  4030f6:	42ab      	cmp	r3, r5
  4030f8:	4618      	mov	r0, r3
  4030fa:	f103 0301 	add.w	r3, r3, #1
  4030fe:	d1f7      	bne.n	4030f0 <memchr+0x44>
  403100:	2000      	movs	r0, #0
  403102:	bc70      	pop	{r4, r5, r6}
  403104:	4770      	bx	lr
  403106:	4620      	mov	r0, r4
  403108:	bc70      	pop	{r4, r5, r6}
  40310a:	4770      	bx	lr
  40310c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  403110:	4602      	mov	r2, r0
  403112:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  403116:	4610      	mov	r0, r2
  403118:	3204      	adds	r2, #4
  40311a:	6803      	ldr	r3, [r0, #0]
  40311c:	4073      	eors	r3, r6
  40311e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  403122:	ea25 0303 	bic.w	r3, r5, r3
  403126:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40312a:	d1da      	bne.n	4030e2 <memchr+0x36>
  40312c:	3c04      	subs	r4, #4
  40312e:	2c03      	cmp	r4, #3
  403130:	4610      	mov	r0, r2
  403132:	d8f0      	bhi.n	403116 <memchr+0x6a>
  403134:	e7d5      	b.n	4030e2 <memchr+0x36>
  403136:	4614      	mov	r4, r2
  403138:	e7d1      	b.n	4030de <memchr+0x32>
  40313a:	4610      	mov	r0, r2
  40313c:	e7e1      	b.n	403102 <memchr+0x56>
  40313e:	bf00      	nop

00403140 <memcpy>:
  403140:	4684      	mov	ip, r0
  403142:	ea41 0300 	orr.w	r3, r1, r0
  403146:	f013 0303 	ands.w	r3, r3, #3
  40314a:	d16d      	bne.n	403228 <memcpy+0xe8>
  40314c:	3a40      	subs	r2, #64	; 0x40
  40314e:	d341      	bcc.n	4031d4 <memcpy+0x94>
  403150:	f851 3b04 	ldr.w	r3, [r1], #4
  403154:	f840 3b04 	str.w	r3, [r0], #4
  403158:	f851 3b04 	ldr.w	r3, [r1], #4
  40315c:	f840 3b04 	str.w	r3, [r0], #4
  403160:	f851 3b04 	ldr.w	r3, [r1], #4
  403164:	f840 3b04 	str.w	r3, [r0], #4
  403168:	f851 3b04 	ldr.w	r3, [r1], #4
  40316c:	f840 3b04 	str.w	r3, [r0], #4
  403170:	f851 3b04 	ldr.w	r3, [r1], #4
  403174:	f840 3b04 	str.w	r3, [r0], #4
  403178:	f851 3b04 	ldr.w	r3, [r1], #4
  40317c:	f840 3b04 	str.w	r3, [r0], #4
  403180:	f851 3b04 	ldr.w	r3, [r1], #4
  403184:	f840 3b04 	str.w	r3, [r0], #4
  403188:	f851 3b04 	ldr.w	r3, [r1], #4
  40318c:	f840 3b04 	str.w	r3, [r0], #4
  403190:	f851 3b04 	ldr.w	r3, [r1], #4
  403194:	f840 3b04 	str.w	r3, [r0], #4
  403198:	f851 3b04 	ldr.w	r3, [r1], #4
  40319c:	f840 3b04 	str.w	r3, [r0], #4
  4031a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a4:	f840 3b04 	str.w	r3, [r0], #4
  4031a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ac:	f840 3b04 	str.w	r3, [r0], #4
  4031b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031b4:	f840 3b04 	str.w	r3, [r0], #4
  4031b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031bc:	f840 3b04 	str.w	r3, [r0], #4
  4031c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031c4:	f840 3b04 	str.w	r3, [r0], #4
  4031c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031cc:	f840 3b04 	str.w	r3, [r0], #4
  4031d0:	3a40      	subs	r2, #64	; 0x40
  4031d2:	d2bd      	bcs.n	403150 <memcpy+0x10>
  4031d4:	3230      	adds	r2, #48	; 0x30
  4031d6:	d311      	bcc.n	4031fc <memcpy+0xbc>
  4031d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031dc:	f840 3b04 	str.w	r3, [r0], #4
  4031e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031e4:	f840 3b04 	str.w	r3, [r0], #4
  4031e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ec:	f840 3b04 	str.w	r3, [r0], #4
  4031f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031f4:	f840 3b04 	str.w	r3, [r0], #4
  4031f8:	3a10      	subs	r2, #16
  4031fa:	d2ed      	bcs.n	4031d8 <memcpy+0x98>
  4031fc:	320c      	adds	r2, #12
  4031fe:	d305      	bcc.n	40320c <memcpy+0xcc>
  403200:	f851 3b04 	ldr.w	r3, [r1], #4
  403204:	f840 3b04 	str.w	r3, [r0], #4
  403208:	3a04      	subs	r2, #4
  40320a:	d2f9      	bcs.n	403200 <memcpy+0xc0>
  40320c:	3204      	adds	r2, #4
  40320e:	d008      	beq.n	403222 <memcpy+0xe2>
  403210:	07d2      	lsls	r2, r2, #31
  403212:	bf1c      	itt	ne
  403214:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403218:	f800 3b01 	strbne.w	r3, [r0], #1
  40321c:	d301      	bcc.n	403222 <memcpy+0xe2>
  40321e:	880b      	ldrh	r3, [r1, #0]
  403220:	8003      	strh	r3, [r0, #0]
  403222:	4660      	mov	r0, ip
  403224:	4770      	bx	lr
  403226:	bf00      	nop
  403228:	2a08      	cmp	r2, #8
  40322a:	d313      	bcc.n	403254 <memcpy+0x114>
  40322c:	078b      	lsls	r3, r1, #30
  40322e:	d08d      	beq.n	40314c <memcpy+0xc>
  403230:	f010 0303 	ands.w	r3, r0, #3
  403234:	d08a      	beq.n	40314c <memcpy+0xc>
  403236:	f1c3 0304 	rsb	r3, r3, #4
  40323a:	1ad2      	subs	r2, r2, r3
  40323c:	07db      	lsls	r3, r3, #31
  40323e:	bf1c      	itt	ne
  403240:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403244:	f800 3b01 	strbne.w	r3, [r0], #1
  403248:	d380      	bcc.n	40314c <memcpy+0xc>
  40324a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40324e:	f820 3b02 	strh.w	r3, [r0], #2
  403252:	e77b      	b.n	40314c <memcpy+0xc>
  403254:	3a04      	subs	r2, #4
  403256:	d3d9      	bcc.n	40320c <memcpy+0xcc>
  403258:	3a01      	subs	r2, #1
  40325a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40325e:	f800 3b01 	strb.w	r3, [r0], #1
  403262:	d2f9      	bcs.n	403258 <memcpy+0x118>
  403264:	780b      	ldrb	r3, [r1, #0]
  403266:	7003      	strb	r3, [r0, #0]
  403268:	784b      	ldrb	r3, [r1, #1]
  40326a:	7043      	strb	r3, [r0, #1]
  40326c:	788b      	ldrb	r3, [r1, #2]
  40326e:	7083      	strb	r3, [r0, #2]
  403270:	4660      	mov	r0, ip
  403272:	4770      	bx	lr

00403274 <memmove>:
  403274:	4288      	cmp	r0, r1
  403276:	b5f0      	push	{r4, r5, r6, r7, lr}
  403278:	d90d      	bls.n	403296 <memmove+0x22>
  40327a:	188b      	adds	r3, r1, r2
  40327c:	4298      	cmp	r0, r3
  40327e:	d20a      	bcs.n	403296 <memmove+0x22>
  403280:	1881      	adds	r1, r0, r2
  403282:	2a00      	cmp	r2, #0
  403284:	d054      	beq.n	403330 <memmove+0xbc>
  403286:	1a9a      	subs	r2, r3, r2
  403288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40328c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  403290:	4293      	cmp	r3, r2
  403292:	d1f9      	bne.n	403288 <memmove+0x14>
  403294:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403296:	2a0f      	cmp	r2, #15
  403298:	d948      	bls.n	40332c <memmove+0xb8>
  40329a:	ea40 0301 	orr.w	r3, r0, r1
  40329e:	079b      	lsls	r3, r3, #30
  4032a0:	d147      	bne.n	403332 <memmove+0xbe>
  4032a2:	f100 0410 	add.w	r4, r0, #16
  4032a6:	f101 0310 	add.w	r3, r1, #16
  4032aa:	4615      	mov	r5, r2
  4032ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4032b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4032b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4032b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4032bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4032c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4032c4:	3d10      	subs	r5, #16
  4032c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4032ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4032ce:	2d0f      	cmp	r5, #15
  4032d0:	f103 0310 	add.w	r3, r3, #16
  4032d4:	f104 0410 	add.w	r4, r4, #16
  4032d8:	d8e8      	bhi.n	4032ac <memmove+0x38>
  4032da:	f1a2 0310 	sub.w	r3, r2, #16
  4032de:	f023 030f 	bic.w	r3, r3, #15
  4032e2:	f002 0e0f 	and.w	lr, r2, #15
  4032e6:	3310      	adds	r3, #16
  4032e8:	f1be 0f03 	cmp.w	lr, #3
  4032ec:	4419      	add	r1, r3
  4032ee:	4403      	add	r3, r0
  4032f0:	d921      	bls.n	403336 <memmove+0xc2>
  4032f2:	1f1e      	subs	r6, r3, #4
  4032f4:	460d      	mov	r5, r1
  4032f6:	4674      	mov	r4, lr
  4032f8:	3c04      	subs	r4, #4
  4032fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4032fe:	f846 7f04 	str.w	r7, [r6, #4]!
  403302:	2c03      	cmp	r4, #3
  403304:	d8f8      	bhi.n	4032f8 <memmove+0x84>
  403306:	f1ae 0404 	sub.w	r4, lr, #4
  40330a:	f024 0403 	bic.w	r4, r4, #3
  40330e:	3404      	adds	r4, #4
  403310:	4423      	add	r3, r4
  403312:	4421      	add	r1, r4
  403314:	f002 0203 	and.w	r2, r2, #3
  403318:	b152      	cbz	r2, 403330 <memmove+0xbc>
  40331a:	3b01      	subs	r3, #1
  40331c:	440a      	add	r2, r1
  40331e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403322:	f803 4f01 	strb.w	r4, [r3, #1]!
  403326:	4291      	cmp	r1, r2
  403328:	d1f9      	bne.n	40331e <memmove+0xaa>
  40332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40332c:	4603      	mov	r3, r0
  40332e:	e7f3      	b.n	403318 <memmove+0xa4>
  403330:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403332:	4603      	mov	r3, r0
  403334:	e7f1      	b.n	40331a <memmove+0xa6>
  403336:	4672      	mov	r2, lr
  403338:	e7ee      	b.n	403318 <memmove+0xa4>
  40333a:	bf00      	nop

0040333c <__malloc_lock>:
  40333c:	4770      	bx	lr
  40333e:	bf00      	nop

00403340 <__malloc_unlock>:
  403340:	4770      	bx	lr
  403342:	bf00      	nop

00403344 <_realloc_r>:
  403344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403348:	4617      	mov	r7, r2
  40334a:	b083      	sub	sp, #12
  40334c:	460e      	mov	r6, r1
  40334e:	2900      	cmp	r1, #0
  403350:	f000 80e7 	beq.w	403522 <_realloc_r+0x1de>
  403354:	4681      	mov	r9, r0
  403356:	f107 050b 	add.w	r5, r7, #11
  40335a:	f7ff ffef 	bl	40333c <__malloc_lock>
  40335e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403362:	2d16      	cmp	r5, #22
  403364:	f023 0403 	bic.w	r4, r3, #3
  403368:	f1a6 0808 	sub.w	r8, r6, #8
  40336c:	d84c      	bhi.n	403408 <_realloc_r+0xc4>
  40336e:	2210      	movs	r2, #16
  403370:	4615      	mov	r5, r2
  403372:	42af      	cmp	r7, r5
  403374:	d84d      	bhi.n	403412 <_realloc_r+0xce>
  403376:	4294      	cmp	r4, r2
  403378:	f280 8084 	bge.w	403484 <_realloc_r+0x140>
  40337c:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 40372c <_realloc_r+0x3e8>
  403380:	f8db 0008 	ldr.w	r0, [fp, #8]
  403384:	eb08 0104 	add.w	r1, r8, r4
  403388:	4288      	cmp	r0, r1
  40338a:	f000 80d6 	beq.w	40353a <_realloc_r+0x1f6>
  40338e:	6848      	ldr	r0, [r1, #4]
  403390:	f020 0e01 	bic.w	lr, r0, #1
  403394:	448e      	add	lr, r1
  403396:	f8de e004 	ldr.w	lr, [lr, #4]
  40339a:	f01e 0f01 	tst.w	lr, #1
  40339e:	d13f      	bne.n	403420 <_realloc_r+0xdc>
  4033a0:	f020 0003 	bic.w	r0, r0, #3
  4033a4:	4420      	add	r0, r4
  4033a6:	4290      	cmp	r0, r2
  4033a8:	f280 80c1 	bge.w	40352e <_realloc_r+0x1ea>
  4033ac:	07db      	lsls	r3, r3, #31
  4033ae:	f100 808f 	bmi.w	4034d0 <_realloc_r+0x18c>
  4033b2:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4033b6:	ebc3 0a08 	rsb	sl, r3, r8
  4033ba:	f8da 3004 	ldr.w	r3, [sl, #4]
  4033be:	f023 0303 	bic.w	r3, r3, #3
  4033c2:	eb00 0e03 	add.w	lr, r0, r3
  4033c6:	4596      	cmp	lr, r2
  4033c8:	db34      	blt.n	403434 <_realloc_r+0xf0>
  4033ca:	68cb      	ldr	r3, [r1, #12]
  4033cc:	688a      	ldr	r2, [r1, #8]
  4033ce:	4657      	mov	r7, sl
  4033d0:	60d3      	str	r3, [r2, #12]
  4033d2:	609a      	str	r2, [r3, #8]
  4033d4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4033d8:	f8da 300c 	ldr.w	r3, [sl, #12]
  4033dc:	60cb      	str	r3, [r1, #12]
  4033de:	1f22      	subs	r2, r4, #4
  4033e0:	2a24      	cmp	r2, #36	; 0x24
  4033e2:	6099      	str	r1, [r3, #8]
  4033e4:	f200 8136 	bhi.w	403654 <_realloc_r+0x310>
  4033e8:	2a13      	cmp	r2, #19
  4033ea:	f240 80fd 	bls.w	4035e8 <_realloc_r+0x2a4>
  4033ee:	6833      	ldr	r3, [r6, #0]
  4033f0:	f8ca 3008 	str.w	r3, [sl, #8]
  4033f4:	6873      	ldr	r3, [r6, #4]
  4033f6:	f8ca 300c 	str.w	r3, [sl, #12]
  4033fa:	2a1b      	cmp	r2, #27
  4033fc:	f200 8140 	bhi.w	403680 <_realloc_r+0x33c>
  403400:	3608      	adds	r6, #8
  403402:	f10a 0310 	add.w	r3, sl, #16
  403406:	e0f0      	b.n	4035ea <_realloc_r+0x2a6>
  403408:	f025 0507 	bic.w	r5, r5, #7
  40340c:	2d00      	cmp	r5, #0
  40340e:	462a      	mov	r2, r5
  403410:	daaf      	bge.n	403372 <_realloc_r+0x2e>
  403412:	230c      	movs	r3, #12
  403414:	2000      	movs	r0, #0
  403416:	f8c9 3000 	str.w	r3, [r9]
  40341a:	b003      	add	sp, #12
  40341c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403420:	07d9      	lsls	r1, r3, #31
  403422:	d455      	bmi.n	4034d0 <_realloc_r+0x18c>
  403424:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403428:	ebc3 0a08 	rsb	sl, r3, r8
  40342c:	f8da 3004 	ldr.w	r3, [sl, #4]
  403430:	f023 0303 	bic.w	r3, r3, #3
  403434:	4423      	add	r3, r4
  403436:	4293      	cmp	r3, r2
  403438:	db4a      	blt.n	4034d0 <_realloc_r+0x18c>
  40343a:	4657      	mov	r7, sl
  40343c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403440:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403444:	1f22      	subs	r2, r4, #4
  403446:	2a24      	cmp	r2, #36	; 0x24
  403448:	60c1      	str	r1, [r0, #12]
  40344a:	6088      	str	r0, [r1, #8]
  40344c:	f200 810e 	bhi.w	40366c <_realloc_r+0x328>
  403450:	2a13      	cmp	r2, #19
  403452:	f240 8109 	bls.w	403668 <_realloc_r+0x324>
  403456:	6831      	ldr	r1, [r6, #0]
  403458:	f8ca 1008 	str.w	r1, [sl, #8]
  40345c:	6871      	ldr	r1, [r6, #4]
  40345e:	f8ca 100c 	str.w	r1, [sl, #12]
  403462:	2a1b      	cmp	r2, #27
  403464:	f200 8121 	bhi.w	4036aa <_realloc_r+0x366>
  403468:	3608      	adds	r6, #8
  40346a:	f10a 0210 	add.w	r2, sl, #16
  40346e:	6831      	ldr	r1, [r6, #0]
  403470:	6011      	str	r1, [r2, #0]
  403472:	6871      	ldr	r1, [r6, #4]
  403474:	6051      	str	r1, [r2, #4]
  403476:	68b1      	ldr	r1, [r6, #8]
  403478:	6091      	str	r1, [r2, #8]
  40347a:	461c      	mov	r4, r3
  40347c:	f8da 3004 	ldr.w	r3, [sl, #4]
  403480:	463e      	mov	r6, r7
  403482:	46d0      	mov	r8, sl
  403484:	1b62      	subs	r2, r4, r5
  403486:	2a0f      	cmp	r2, #15
  403488:	f003 0301 	and.w	r3, r3, #1
  40348c:	d80e      	bhi.n	4034ac <_realloc_r+0x168>
  40348e:	4323      	orrs	r3, r4
  403490:	4444      	add	r4, r8
  403492:	f8c8 3004 	str.w	r3, [r8, #4]
  403496:	6863      	ldr	r3, [r4, #4]
  403498:	f043 0301 	orr.w	r3, r3, #1
  40349c:	6063      	str	r3, [r4, #4]
  40349e:	4648      	mov	r0, r9
  4034a0:	f7ff ff4e 	bl	403340 <__malloc_unlock>
  4034a4:	4630      	mov	r0, r6
  4034a6:	b003      	add	sp, #12
  4034a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034ac:	eb08 0105 	add.w	r1, r8, r5
  4034b0:	431d      	orrs	r5, r3
  4034b2:	f042 0301 	orr.w	r3, r2, #1
  4034b6:	440a      	add	r2, r1
  4034b8:	f8c8 5004 	str.w	r5, [r8, #4]
  4034bc:	604b      	str	r3, [r1, #4]
  4034be:	6853      	ldr	r3, [r2, #4]
  4034c0:	f043 0301 	orr.w	r3, r3, #1
  4034c4:	3108      	adds	r1, #8
  4034c6:	6053      	str	r3, [r2, #4]
  4034c8:	4648      	mov	r0, r9
  4034ca:	f7ff f84d 	bl	402568 <_free_r>
  4034ce:	e7e6      	b.n	40349e <_realloc_r+0x15a>
  4034d0:	4639      	mov	r1, r7
  4034d2:	4648      	mov	r0, r9
  4034d4:	f7ff fb58 	bl	402b88 <_malloc_r>
  4034d8:	4607      	mov	r7, r0
  4034da:	b1d8      	cbz	r0, 403514 <_realloc_r+0x1d0>
  4034dc:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4034e0:	f023 0201 	bic.w	r2, r3, #1
  4034e4:	4442      	add	r2, r8
  4034e6:	f1a0 0108 	sub.w	r1, r0, #8
  4034ea:	4291      	cmp	r1, r2
  4034ec:	f000 80ac 	beq.w	403648 <_realloc_r+0x304>
  4034f0:	1f22      	subs	r2, r4, #4
  4034f2:	2a24      	cmp	r2, #36	; 0x24
  4034f4:	f200 8099 	bhi.w	40362a <_realloc_r+0x2e6>
  4034f8:	2a13      	cmp	r2, #19
  4034fa:	d86a      	bhi.n	4035d2 <_realloc_r+0x28e>
  4034fc:	4603      	mov	r3, r0
  4034fe:	4632      	mov	r2, r6
  403500:	6811      	ldr	r1, [r2, #0]
  403502:	6019      	str	r1, [r3, #0]
  403504:	6851      	ldr	r1, [r2, #4]
  403506:	6059      	str	r1, [r3, #4]
  403508:	6892      	ldr	r2, [r2, #8]
  40350a:	609a      	str	r2, [r3, #8]
  40350c:	4631      	mov	r1, r6
  40350e:	4648      	mov	r0, r9
  403510:	f7ff f82a 	bl	402568 <_free_r>
  403514:	4648      	mov	r0, r9
  403516:	f7ff ff13 	bl	403340 <__malloc_unlock>
  40351a:	4638      	mov	r0, r7
  40351c:	b003      	add	sp, #12
  40351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403522:	4611      	mov	r1, r2
  403524:	b003      	add	sp, #12
  403526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40352a:	f7ff bb2d 	b.w	402b88 <_malloc_r>
  40352e:	68ca      	ldr	r2, [r1, #12]
  403530:	6889      	ldr	r1, [r1, #8]
  403532:	4604      	mov	r4, r0
  403534:	60ca      	str	r2, [r1, #12]
  403536:	6091      	str	r1, [r2, #8]
  403538:	e7a4      	b.n	403484 <_realloc_r+0x140>
  40353a:	6841      	ldr	r1, [r0, #4]
  40353c:	f021 0103 	bic.w	r1, r1, #3
  403540:	4421      	add	r1, r4
  403542:	f105 0010 	add.w	r0, r5, #16
  403546:	4281      	cmp	r1, r0
  403548:	da5b      	bge.n	403602 <_realloc_r+0x2be>
  40354a:	07db      	lsls	r3, r3, #31
  40354c:	d4c0      	bmi.n	4034d0 <_realloc_r+0x18c>
  40354e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403552:	ebc3 0a08 	rsb	sl, r3, r8
  403556:	f8da 3004 	ldr.w	r3, [sl, #4]
  40355a:	f023 0303 	bic.w	r3, r3, #3
  40355e:	eb01 0c03 	add.w	ip, r1, r3
  403562:	4560      	cmp	r0, ip
  403564:	f73f af66 	bgt.w	403434 <_realloc_r+0xf0>
  403568:	4657      	mov	r7, sl
  40356a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40356e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403572:	1f22      	subs	r2, r4, #4
  403574:	2a24      	cmp	r2, #36	; 0x24
  403576:	60cb      	str	r3, [r1, #12]
  403578:	6099      	str	r1, [r3, #8]
  40357a:	f200 80b8 	bhi.w	4036ee <_realloc_r+0x3aa>
  40357e:	2a13      	cmp	r2, #19
  403580:	f240 80a9 	bls.w	4036d6 <_realloc_r+0x392>
  403584:	6833      	ldr	r3, [r6, #0]
  403586:	f8ca 3008 	str.w	r3, [sl, #8]
  40358a:	6873      	ldr	r3, [r6, #4]
  40358c:	f8ca 300c 	str.w	r3, [sl, #12]
  403590:	2a1b      	cmp	r2, #27
  403592:	f200 80b5 	bhi.w	403700 <_realloc_r+0x3bc>
  403596:	3608      	adds	r6, #8
  403598:	f10a 0310 	add.w	r3, sl, #16
  40359c:	6832      	ldr	r2, [r6, #0]
  40359e:	601a      	str	r2, [r3, #0]
  4035a0:	6872      	ldr	r2, [r6, #4]
  4035a2:	605a      	str	r2, [r3, #4]
  4035a4:	68b2      	ldr	r2, [r6, #8]
  4035a6:	609a      	str	r2, [r3, #8]
  4035a8:	eb0a 0205 	add.w	r2, sl, r5
  4035ac:	ebc5 030c 	rsb	r3, r5, ip
  4035b0:	f043 0301 	orr.w	r3, r3, #1
  4035b4:	f8cb 2008 	str.w	r2, [fp, #8]
  4035b8:	6053      	str	r3, [r2, #4]
  4035ba:	f8da 3004 	ldr.w	r3, [sl, #4]
  4035be:	f003 0301 	and.w	r3, r3, #1
  4035c2:	431d      	orrs	r5, r3
  4035c4:	4648      	mov	r0, r9
  4035c6:	f8ca 5004 	str.w	r5, [sl, #4]
  4035ca:	f7ff feb9 	bl	403340 <__malloc_unlock>
  4035ce:	4638      	mov	r0, r7
  4035d0:	e769      	b.n	4034a6 <_realloc_r+0x162>
  4035d2:	6833      	ldr	r3, [r6, #0]
  4035d4:	6003      	str	r3, [r0, #0]
  4035d6:	6873      	ldr	r3, [r6, #4]
  4035d8:	6043      	str	r3, [r0, #4]
  4035da:	2a1b      	cmp	r2, #27
  4035dc:	d829      	bhi.n	403632 <_realloc_r+0x2ee>
  4035de:	f100 0308 	add.w	r3, r0, #8
  4035e2:	f106 0208 	add.w	r2, r6, #8
  4035e6:	e78b      	b.n	403500 <_realloc_r+0x1bc>
  4035e8:	463b      	mov	r3, r7
  4035ea:	6832      	ldr	r2, [r6, #0]
  4035ec:	601a      	str	r2, [r3, #0]
  4035ee:	6872      	ldr	r2, [r6, #4]
  4035f0:	605a      	str	r2, [r3, #4]
  4035f2:	68b2      	ldr	r2, [r6, #8]
  4035f4:	609a      	str	r2, [r3, #8]
  4035f6:	463e      	mov	r6, r7
  4035f8:	4674      	mov	r4, lr
  4035fa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4035fe:	46d0      	mov	r8, sl
  403600:	e740      	b.n	403484 <_realloc_r+0x140>
  403602:	eb08 0205 	add.w	r2, r8, r5
  403606:	1b4b      	subs	r3, r1, r5
  403608:	f043 0301 	orr.w	r3, r3, #1
  40360c:	f8cb 2008 	str.w	r2, [fp, #8]
  403610:	6053      	str	r3, [r2, #4]
  403612:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403616:	f003 0301 	and.w	r3, r3, #1
  40361a:	431d      	orrs	r5, r3
  40361c:	4648      	mov	r0, r9
  40361e:	f846 5c04 	str.w	r5, [r6, #-4]
  403622:	f7ff fe8d 	bl	403340 <__malloc_unlock>
  403626:	4630      	mov	r0, r6
  403628:	e73d      	b.n	4034a6 <_realloc_r+0x162>
  40362a:	4631      	mov	r1, r6
  40362c:	f7ff fe22 	bl	403274 <memmove>
  403630:	e76c      	b.n	40350c <_realloc_r+0x1c8>
  403632:	68b3      	ldr	r3, [r6, #8]
  403634:	6083      	str	r3, [r0, #8]
  403636:	68f3      	ldr	r3, [r6, #12]
  403638:	60c3      	str	r3, [r0, #12]
  40363a:	2a24      	cmp	r2, #36	; 0x24
  40363c:	d02c      	beq.n	403698 <_realloc_r+0x354>
  40363e:	f100 0310 	add.w	r3, r0, #16
  403642:	f106 0210 	add.w	r2, r6, #16
  403646:	e75b      	b.n	403500 <_realloc_r+0x1bc>
  403648:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40364c:	f022 0203 	bic.w	r2, r2, #3
  403650:	4414      	add	r4, r2
  403652:	e717      	b.n	403484 <_realloc_r+0x140>
  403654:	4631      	mov	r1, r6
  403656:	4638      	mov	r0, r7
  403658:	4674      	mov	r4, lr
  40365a:	463e      	mov	r6, r7
  40365c:	f7ff fe0a 	bl	403274 <memmove>
  403660:	46d0      	mov	r8, sl
  403662:	f8da 3004 	ldr.w	r3, [sl, #4]
  403666:	e70d      	b.n	403484 <_realloc_r+0x140>
  403668:	463a      	mov	r2, r7
  40366a:	e700      	b.n	40346e <_realloc_r+0x12a>
  40366c:	4631      	mov	r1, r6
  40366e:	4638      	mov	r0, r7
  403670:	461c      	mov	r4, r3
  403672:	463e      	mov	r6, r7
  403674:	f7ff fdfe 	bl	403274 <memmove>
  403678:	46d0      	mov	r8, sl
  40367a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40367e:	e701      	b.n	403484 <_realloc_r+0x140>
  403680:	68b3      	ldr	r3, [r6, #8]
  403682:	f8ca 3010 	str.w	r3, [sl, #16]
  403686:	68f3      	ldr	r3, [r6, #12]
  403688:	f8ca 3014 	str.w	r3, [sl, #20]
  40368c:	2a24      	cmp	r2, #36	; 0x24
  40368e:	d018      	beq.n	4036c2 <_realloc_r+0x37e>
  403690:	3610      	adds	r6, #16
  403692:	f10a 0318 	add.w	r3, sl, #24
  403696:	e7a8      	b.n	4035ea <_realloc_r+0x2a6>
  403698:	6933      	ldr	r3, [r6, #16]
  40369a:	6103      	str	r3, [r0, #16]
  40369c:	6973      	ldr	r3, [r6, #20]
  40369e:	6143      	str	r3, [r0, #20]
  4036a0:	f106 0218 	add.w	r2, r6, #24
  4036a4:	f100 0318 	add.w	r3, r0, #24
  4036a8:	e72a      	b.n	403500 <_realloc_r+0x1bc>
  4036aa:	68b1      	ldr	r1, [r6, #8]
  4036ac:	f8ca 1010 	str.w	r1, [sl, #16]
  4036b0:	68f1      	ldr	r1, [r6, #12]
  4036b2:	f8ca 1014 	str.w	r1, [sl, #20]
  4036b6:	2a24      	cmp	r2, #36	; 0x24
  4036b8:	d00f      	beq.n	4036da <_realloc_r+0x396>
  4036ba:	3610      	adds	r6, #16
  4036bc:	f10a 0218 	add.w	r2, sl, #24
  4036c0:	e6d5      	b.n	40346e <_realloc_r+0x12a>
  4036c2:	6933      	ldr	r3, [r6, #16]
  4036c4:	f8ca 3018 	str.w	r3, [sl, #24]
  4036c8:	6973      	ldr	r3, [r6, #20]
  4036ca:	f8ca 301c 	str.w	r3, [sl, #28]
  4036ce:	3618      	adds	r6, #24
  4036d0:	f10a 0320 	add.w	r3, sl, #32
  4036d4:	e789      	b.n	4035ea <_realloc_r+0x2a6>
  4036d6:	463b      	mov	r3, r7
  4036d8:	e760      	b.n	40359c <_realloc_r+0x258>
  4036da:	6932      	ldr	r2, [r6, #16]
  4036dc:	f8ca 2018 	str.w	r2, [sl, #24]
  4036e0:	6972      	ldr	r2, [r6, #20]
  4036e2:	f8ca 201c 	str.w	r2, [sl, #28]
  4036e6:	3618      	adds	r6, #24
  4036e8:	f10a 0220 	add.w	r2, sl, #32
  4036ec:	e6bf      	b.n	40346e <_realloc_r+0x12a>
  4036ee:	4631      	mov	r1, r6
  4036f0:	4638      	mov	r0, r7
  4036f2:	f8cd c004 	str.w	ip, [sp, #4]
  4036f6:	f7ff fdbd 	bl	403274 <memmove>
  4036fa:	f8dd c004 	ldr.w	ip, [sp, #4]
  4036fe:	e753      	b.n	4035a8 <_realloc_r+0x264>
  403700:	68b3      	ldr	r3, [r6, #8]
  403702:	f8ca 3010 	str.w	r3, [sl, #16]
  403706:	68f3      	ldr	r3, [r6, #12]
  403708:	f8ca 3014 	str.w	r3, [sl, #20]
  40370c:	2a24      	cmp	r2, #36	; 0x24
  40370e:	d003      	beq.n	403718 <_realloc_r+0x3d4>
  403710:	3610      	adds	r6, #16
  403712:	f10a 0318 	add.w	r3, sl, #24
  403716:	e741      	b.n	40359c <_realloc_r+0x258>
  403718:	6933      	ldr	r3, [r6, #16]
  40371a:	f8ca 3018 	str.w	r3, [sl, #24]
  40371e:	6973      	ldr	r3, [r6, #20]
  403720:	f8ca 301c 	str.w	r3, [sl, #28]
  403724:	3618      	adds	r6, #24
  403726:	f10a 0320 	add.w	r3, sl, #32
  40372a:	e737      	b.n	40359c <_realloc_r+0x258>
  40372c:	20000458 	.word	0x20000458

00403730 <_sbrk_r>:
  403730:	b538      	push	{r3, r4, r5, lr}
  403732:	4c07      	ldr	r4, [pc, #28]	; (403750 <_sbrk_r+0x20>)
  403734:	2300      	movs	r3, #0
  403736:	4605      	mov	r5, r0
  403738:	4608      	mov	r0, r1
  40373a:	6023      	str	r3, [r4, #0]
  40373c:	f7fd f9cc 	bl	400ad8 <_sbrk>
  403740:	1c43      	adds	r3, r0, #1
  403742:	d000      	beq.n	403746 <_sbrk_r+0x16>
  403744:	bd38      	pop	{r3, r4, r5, pc}
  403746:	6823      	ldr	r3, [r4, #0]
  403748:	2b00      	cmp	r3, #0
  40374a:	d0fb      	beq.n	403744 <_sbrk_r+0x14>
  40374c:	602b      	str	r3, [r5, #0]
  40374e:	bd38      	pop	{r3, r4, r5, pc}
  403750:	20000954 	.word	0x20000954

00403754 <__sread>:
  403754:	b510      	push	{r4, lr}
  403756:	460c      	mov	r4, r1
  403758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40375c:	f000 f9bc 	bl	403ad8 <_read_r>
  403760:	2800      	cmp	r0, #0
  403762:	db03      	blt.n	40376c <__sread+0x18>
  403764:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403766:	4403      	add	r3, r0
  403768:	6523      	str	r3, [r4, #80]	; 0x50
  40376a:	bd10      	pop	{r4, pc}
  40376c:	89a3      	ldrh	r3, [r4, #12]
  40376e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403772:	81a3      	strh	r3, [r4, #12]
  403774:	bd10      	pop	{r4, pc}
  403776:	bf00      	nop

00403778 <__swrite>:
  403778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40377c:	4616      	mov	r6, r2
  40377e:	898a      	ldrh	r2, [r1, #12]
  403780:	461d      	mov	r5, r3
  403782:	05d3      	lsls	r3, r2, #23
  403784:	460c      	mov	r4, r1
  403786:	4607      	mov	r7, r0
  403788:	d506      	bpl.n	403798 <__swrite+0x20>
  40378a:	2200      	movs	r2, #0
  40378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403790:	2302      	movs	r3, #2
  403792:	f000 f98d 	bl	403ab0 <_lseek_r>
  403796:	89a2      	ldrh	r2, [r4, #12]
  403798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40379c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4037a0:	81a2      	strh	r2, [r4, #12]
  4037a2:	4638      	mov	r0, r7
  4037a4:	4632      	mov	r2, r6
  4037a6:	462b      	mov	r3, r5
  4037a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4037ac:	f000 b8a0 	b.w	4038f0 <_write_r>

004037b0 <__sseek>:
  4037b0:	b510      	push	{r4, lr}
  4037b2:	460c      	mov	r4, r1
  4037b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037b8:	f000 f97a 	bl	403ab0 <_lseek_r>
  4037bc:	89a3      	ldrh	r3, [r4, #12]
  4037be:	1c42      	adds	r2, r0, #1
  4037c0:	bf0e      	itee	eq
  4037c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4037c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4037ca:	6520      	strne	r0, [r4, #80]	; 0x50
  4037cc:	81a3      	strh	r3, [r4, #12]
  4037ce:	bd10      	pop	{r4, pc}

004037d0 <__sclose>:
  4037d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037d4:	f000 b8f2 	b.w	4039bc <_close_r>

004037d8 <__swbuf_r>:
  4037d8:	b570      	push	{r4, r5, r6, lr}
  4037da:	460d      	mov	r5, r1
  4037dc:	4614      	mov	r4, r2
  4037de:	4606      	mov	r6, r0
  4037e0:	b110      	cbz	r0, 4037e8 <__swbuf_r+0x10>
  4037e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4037e4:	2b00      	cmp	r3, #0
  4037e6:	d048      	beq.n	40387a <__swbuf_r+0xa2>
  4037e8:	89a2      	ldrh	r2, [r4, #12]
  4037ea:	69a3      	ldr	r3, [r4, #24]
  4037ec:	60a3      	str	r3, [r4, #8]
  4037ee:	b291      	uxth	r1, r2
  4037f0:	0708      	lsls	r0, r1, #28
  4037f2:	d538      	bpl.n	403866 <__swbuf_r+0x8e>
  4037f4:	6923      	ldr	r3, [r4, #16]
  4037f6:	2b00      	cmp	r3, #0
  4037f8:	d035      	beq.n	403866 <__swbuf_r+0x8e>
  4037fa:	0489      	lsls	r1, r1, #18
  4037fc:	b2ed      	uxtb	r5, r5
  4037fe:	d515      	bpl.n	40382c <__swbuf_r+0x54>
  403800:	6822      	ldr	r2, [r4, #0]
  403802:	6961      	ldr	r1, [r4, #20]
  403804:	1ad3      	subs	r3, r2, r3
  403806:	428b      	cmp	r3, r1
  403808:	da1c      	bge.n	403844 <__swbuf_r+0x6c>
  40380a:	3301      	adds	r3, #1
  40380c:	68a1      	ldr	r1, [r4, #8]
  40380e:	1c50      	adds	r0, r2, #1
  403810:	3901      	subs	r1, #1
  403812:	60a1      	str	r1, [r4, #8]
  403814:	6020      	str	r0, [r4, #0]
  403816:	7015      	strb	r5, [r2, #0]
  403818:	6962      	ldr	r2, [r4, #20]
  40381a:	429a      	cmp	r2, r3
  40381c:	d01a      	beq.n	403854 <__swbuf_r+0x7c>
  40381e:	89a3      	ldrh	r3, [r4, #12]
  403820:	07db      	lsls	r3, r3, #31
  403822:	d501      	bpl.n	403828 <__swbuf_r+0x50>
  403824:	2d0a      	cmp	r5, #10
  403826:	d015      	beq.n	403854 <__swbuf_r+0x7c>
  403828:	4628      	mov	r0, r5
  40382a:	bd70      	pop	{r4, r5, r6, pc}
  40382c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40382e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403832:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403836:	81a2      	strh	r2, [r4, #12]
  403838:	6822      	ldr	r2, [r4, #0]
  40383a:	6661      	str	r1, [r4, #100]	; 0x64
  40383c:	6961      	ldr	r1, [r4, #20]
  40383e:	1ad3      	subs	r3, r2, r3
  403840:	428b      	cmp	r3, r1
  403842:	dbe2      	blt.n	40380a <__swbuf_r+0x32>
  403844:	4630      	mov	r0, r6
  403846:	4621      	mov	r1, r4
  403848:	f7fe fd22 	bl	402290 <_fflush_r>
  40384c:	b940      	cbnz	r0, 403860 <__swbuf_r+0x88>
  40384e:	6822      	ldr	r2, [r4, #0]
  403850:	2301      	movs	r3, #1
  403852:	e7db      	b.n	40380c <__swbuf_r+0x34>
  403854:	4630      	mov	r0, r6
  403856:	4621      	mov	r1, r4
  403858:	f7fe fd1a 	bl	402290 <_fflush_r>
  40385c:	2800      	cmp	r0, #0
  40385e:	d0e3      	beq.n	403828 <__swbuf_r+0x50>
  403860:	f04f 30ff 	mov.w	r0, #4294967295
  403864:	bd70      	pop	{r4, r5, r6, pc}
  403866:	4630      	mov	r0, r6
  403868:	4621      	mov	r1, r4
  40386a:	f7fe fbf5 	bl	402058 <__swsetup_r>
  40386e:	2800      	cmp	r0, #0
  403870:	d1f6      	bne.n	403860 <__swbuf_r+0x88>
  403872:	89a2      	ldrh	r2, [r4, #12]
  403874:	6923      	ldr	r3, [r4, #16]
  403876:	b291      	uxth	r1, r2
  403878:	e7bf      	b.n	4037fa <__swbuf_r+0x22>
  40387a:	f7fe fd9d 	bl	4023b8 <__sinit>
  40387e:	e7b3      	b.n	4037e8 <__swbuf_r+0x10>

00403880 <_wcrtomb_r>:
  403880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403884:	4605      	mov	r5, r0
  403886:	b086      	sub	sp, #24
  403888:	461e      	mov	r6, r3
  40388a:	460c      	mov	r4, r1
  40388c:	b1a1      	cbz	r1, 4038b8 <_wcrtomb_r+0x38>
  40388e:	4b10      	ldr	r3, [pc, #64]	; (4038d0 <_wcrtomb_r+0x50>)
  403890:	4617      	mov	r7, r2
  403892:	f8d3 8000 	ldr.w	r8, [r3]
  403896:	f7ff f8f5 	bl	402a84 <__locale_charset>
  40389a:	9600      	str	r6, [sp, #0]
  40389c:	4603      	mov	r3, r0
  40389e:	4621      	mov	r1, r4
  4038a0:	463a      	mov	r2, r7
  4038a2:	4628      	mov	r0, r5
  4038a4:	47c0      	blx	r8
  4038a6:	1c43      	adds	r3, r0, #1
  4038a8:	d103      	bne.n	4038b2 <_wcrtomb_r+0x32>
  4038aa:	2200      	movs	r2, #0
  4038ac:	238a      	movs	r3, #138	; 0x8a
  4038ae:	6032      	str	r2, [r6, #0]
  4038b0:	602b      	str	r3, [r5, #0]
  4038b2:	b006      	add	sp, #24
  4038b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038b8:	4b05      	ldr	r3, [pc, #20]	; (4038d0 <_wcrtomb_r+0x50>)
  4038ba:	681f      	ldr	r7, [r3, #0]
  4038bc:	f7ff f8e2 	bl	402a84 <__locale_charset>
  4038c0:	9600      	str	r6, [sp, #0]
  4038c2:	4603      	mov	r3, r0
  4038c4:	4622      	mov	r2, r4
  4038c6:	4628      	mov	r0, r5
  4038c8:	a903      	add	r1, sp, #12
  4038ca:	47b8      	blx	r7
  4038cc:	e7eb      	b.n	4038a6 <_wcrtomb_r+0x26>
  4038ce:	bf00      	nop
  4038d0:	20000868 	.word	0x20000868

004038d4 <__ascii_wctomb>:
  4038d4:	b121      	cbz	r1, 4038e0 <__ascii_wctomb+0xc>
  4038d6:	2aff      	cmp	r2, #255	; 0xff
  4038d8:	d804      	bhi.n	4038e4 <__ascii_wctomb+0x10>
  4038da:	700a      	strb	r2, [r1, #0]
  4038dc:	2001      	movs	r0, #1
  4038de:	4770      	bx	lr
  4038e0:	4608      	mov	r0, r1
  4038e2:	4770      	bx	lr
  4038e4:	238a      	movs	r3, #138	; 0x8a
  4038e6:	6003      	str	r3, [r0, #0]
  4038e8:	f04f 30ff 	mov.w	r0, #4294967295
  4038ec:	4770      	bx	lr
  4038ee:	bf00      	nop

004038f0 <_write_r>:
  4038f0:	b570      	push	{r4, r5, r6, lr}
  4038f2:	4c08      	ldr	r4, [pc, #32]	; (403914 <_write_r+0x24>)
  4038f4:	4606      	mov	r6, r0
  4038f6:	2500      	movs	r5, #0
  4038f8:	4608      	mov	r0, r1
  4038fa:	4611      	mov	r1, r2
  4038fc:	461a      	mov	r2, r3
  4038fe:	6025      	str	r5, [r4, #0]
  403900:	f7fc fc62 	bl	4001c8 <_write>
  403904:	1c43      	adds	r3, r0, #1
  403906:	d000      	beq.n	40390a <_write_r+0x1a>
  403908:	bd70      	pop	{r4, r5, r6, pc}
  40390a:	6823      	ldr	r3, [r4, #0]
  40390c:	2b00      	cmp	r3, #0
  40390e:	d0fb      	beq.n	403908 <_write_r+0x18>
  403910:	6033      	str	r3, [r6, #0]
  403912:	bd70      	pop	{r4, r5, r6, pc}
  403914:	20000954 	.word	0x20000954

00403918 <__register_exitproc>:
  403918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40391c:	4c25      	ldr	r4, [pc, #148]	; (4039b4 <__register_exitproc+0x9c>)
  40391e:	6825      	ldr	r5, [r4, #0]
  403920:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403924:	4606      	mov	r6, r0
  403926:	4688      	mov	r8, r1
  403928:	4692      	mov	sl, r2
  40392a:	4699      	mov	r9, r3
  40392c:	b3cc      	cbz	r4, 4039a2 <__register_exitproc+0x8a>
  40392e:	6860      	ldr	r0, [r4, #4]
  403930:	281f      	cmp	r0, #31
  403932:	dc18      	bgt.n	403966 <__register_exitproc+0x4e>
  403934:	1c43      	adds	r3, r0, #1
  403936:	b17e      	cbz	r6, 403958 <__register_exitproc+0x40>
  403938:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40393c:	2101      	movs	r1, #1
  40393e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403942:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  403946:	fa01 f200 	lsl.w	r2, r1, r0
  40394a:	4317      	orrs	r7, r2
  40394c:	2e02      	cmp	r6, #2
  40394e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403952:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403956:	d01e      	beq.n	403996 <__register_exitproc+0x7e>
  403958:	3002      	adds	r0, #2
  40395a:	6063      	str	r3, [r4, #4]
  40395c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403960:	2000      	movs	r0, #0
  403962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403966:	4b14      	ldr	r3, [pc, #80]	; (4039b8 <__register_exitproc+0xa0>)
  403968:	b303      	cbz	r3, 4039ac <__register_exitproc+0x94>
  40396a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40396e:	f7ff f903 	bl	402b78 <malloc>
  403972:	4604      	mov	r4, r0
  403974:	b1d0      	cbz	r0, 4039ac <__register_exitproc+0x94>
  403976:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40397a:	2700      	movs	r7, #0
  40397c:	e880 0088 	stmia.w	r0, {r3, r7}
  403980:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403984:	4638      	mov	r0, r7
  403986:	2301      	movs	r3, #1
  403988:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40398c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403990:	2e00      	cmp	r6, #0
  403992:	d0e1      	beq.n	403958 <__register_exitproc+0x40>
  403994:	e7d0      	b.n	403938 <__register_exitproc+0x20>
  403996:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40399a:	430a      	orrs	r2, r1
  40399c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4039a0:	e7da      	b.n	403958 <__register_exitproc+0x40>
  4039a2:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4039a6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4039aa:	e7c0      	b.n	40392e <__register_exitproc+0x16>
  4039ac:	f04f 30ff 	mov.w	r0, #4294967295
  4039b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039b4:	004043cc 	.word	0x004043cc
  4039b8:	00402b79 	.word	0x00402b79

004039bc <_close_r>:
  4039bc:	b538      	push	{r3, r4, r5, lr}
  4039be:	4c07      	ldr	r4, [pc, #28]	; (4039dc <_close_r+0x20>)
  4039c0:	2300      	movs	r3, #0
  4039c2:	4605      	mov	r5, r0
  4039c4:	4608      	mov	r0, r1
  4039c6:	6023      	str	r3, [r4, #0]
  4039c8:	f7fd f8a0 	bl	400b0c <_close>
  4039cc:	1c43      	adds	r3, r0, #1
  4039ce:	d000      	beq.n	4039d2 <_close_r+0x16>
  4039d0:	bd38      	pop	{r3, r4, r5, pc}
  4039d2:	6823      	ldr	r3, [r4, #0]
  4039d4:	2b00      	cmp	r3, #0
  4039d6:	d0fb      	beq.n	4039d0 <_close_r+0x14>
  4039d8:	602b      	str	r3, [r5, #0]
  4039da:	bd38      	pop	{r3, r4, r5, pc}
  4039dc:	20000954 	.word	0x20000954

004039e0 <_fclose_r>:
  4039e0:	2900      	cmp	r1, #0
  4039e2:	d03d      	beq.n	403a60 <_fclose_r+0x80>
  4039e4:	b570      	push	{r4, r5, r6, lr}
  4039e6:	4605      	mov	r5, r0
  4039e8:	460c      	mov	r4, r1
  4039ea:	b108      	cbz	r0, 4039f0 <_fclose_r+0x10>
  4039ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4039ee:	b37b      	cbz	r3, 403a50 <_fclose_r+0x70>
  4039f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039f4:	b90b      	cbnz	r3, 4039fa <_fclose_r+0x1a>
  4039f6:	2000      	movs	r0, #0
  4039f8:	bd70      	pop	{r4, r5, r6, pc}
  4039fa:	4628      	mov	r0, r5
  4039fc:	4621      	mov	r1, r4
  4039fe:	f7fe fb9d 	bl	40213c <__sflush_r>
  403a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403a04:	4606      	mov	r6, r0
  403a06:	b133      	cbz	r3, 403a16 <_fclose_r+0x36>
  403a08:	4628      	mov	r0, r5
  403a0a:	69e1      	ldr	r1, [r4, #28]
  403a0c:	4798      	blx	r3
  403a0e:	2800      	cmp	r0, #0
  403a10:	bfb8      	it	lt
  403a12:	f04f 36ff 	movlt.w	r6, #4294967295
  403a16:	89a3      	ldrh	r3, [r4, #12]
  403a18:	061b      	lsls	r3, r3, #24
  403a1a:	d41c      	bmi.n	403a56 <_fclose_r+0x76>
  403a1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a1e:	b141      	cbz	r1, 403a32 <_fclose_r+0x52>
  403a20:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a24:	4299      	cmp	r1, r3
  403a26:	d002      	beq.n	403a2e <_fclose_r+0x4e>
  403a28:	4628      	mov	r0, r5
  403a2a:	f7fe fd9d 	bl	402568 <_free_r>
  403a2e:	2300      	movs	r3, #0
  403a30:	6323      	str	r3, [r4, #48]	; 0x30
  403a32:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403a34:	b121      	cbz	r1, 403a40 <_fclose_r+0x60>
  403a36:	4628      	mov	r0, r5
  403a38:	f7fe fd96 	bl	402568 <_free_r>
  403a3c:	2300      	movs	r3, #0
  403a3e:	6463      	str	r3, [r4, #68]	; 0x44
  403a40:	f7fe fcc0 	bl	4023c4 <__sfp_lock_acquire>
  403a44:	2300      	movs	r3, #0
  403a46:	81a3      	strh	r3, [r4, #12]
  403a48:	f7fe fcbe 	bl	4023c8 <__sfp_lock_release>
  403a4c:	4630      	mov	r0, r6
  403a4e:	bd70      	pop	{r4, r5, r6, pc}
  403a50:	f7fe fcb2 	bl	4023b8 <__sinit>
  403a54:	e7cc      	b.n	4039f0 <_fclose_r+0x10>
  403a56:	4628      	mov	r0, r5
  403a58:	6921      	ldr	r1, [r4, #16]
  403a5a:	f7fe fd85 	bl	402568 <_free_r>
  403a5e:	e7dd      	b.n	403a1c <_fclose_r+0x3c>
  403a60:	2000      	movs	r0, #0
  403a62:	4770      	bx	lr

00403a64 <_fstat_r>:
  403a64:	b538      	push	{r3, r4, r5, lr}
  403a66:	4c08      	ldr	r4, [pc, #32]	; (403a88 <_fstat_r+0x24>)
  403a68:	2300      	movs	r3, #0
  403a6a:	4605      	mov	r5, r0
  403a6c:	4608      	mov	r0, r1
  403a6e:	4611      	mov	r1, r2
  403a70:	6023      	str	r3, [r4, #0]
  403a72:	f7fd f84f 	bl	400b14 <_fstat>
  403a76:	1c43      	adds	r3, r0, #1
  403a78:	d000      	beq.n	403a7c <_fstat_r+0x18>
  403a7a:	bd38      	pop	{r3, r4, r5, pc}
  403a7c:	6823      	ldr	r3, [r4, #0]
  403a7e:	2b00      	cmp	r3, #0
  403a80:	d0fb      	beq.n	403a7a <_fstat_r+0x16>
  403a82:	602b      	str	r3, [r5, #0]
  403a84:	bd38      	pop	{r3, r4, r5, pc}
  403a86:	bf00      	nop
  403a88:	20000954 	.word	0x20000954

00403a8c <_isatty_r>:
  403a8c:	b538      	push	{r3, r4, r5, lr}
  403a8e:	4c07      	ldr	r4, [pc, #28]	; (403aac <_isatty_r+0x20>)
  403a90:	2300      	movs	r3, #0
  403a92:	4605      	mov	r5, r0
  403a94:	4608      	mov	r0, r1
  403a96:	6023      	str	r3, [r4, #0]
  403a98:	f7fd f842 	bl	400b20 <_isatty>
  403a9c:	1c43      	adds	r3, r0, #1
  403a9e:	d000      	beq.n	403aa2 <_isatty_r+0x16>
  403aa0:	bd38      	pop	{r3, r4, r5, pc}
  403aa2:	6823      	ldr	r3, [r4, #0]
  403aa4:	2b00      	cmp	r3, #0
  403aa6:	d0fb      	beq.n	403aa0 <_isatty_r+0x14>
  403aa8:	602b      	str	r3, [r5, #0]
  403aaa:	bd38      	pop	{r3, r4, r5, pc}
  403aac:	20000954 	.word	0x20000954

00403ab0 <_lseek_r>:
  403ab0:	b570      	push	{r4, r5, r6, lr}
  403ab2:	4c08      	ldr	r4, [pc, #32]	; (403ad4 <_lseek_r+0x24>)
  403ab4:	4606      	mov	r6, r0
  403ab6:	2500      	movs	r5, #0
  403ab8:	4608      	mov	r0, r1
  403aba:	4611      	mov	r1, r2
  403abc:	461a      	mov	r2, r3
  403abe:	6025      	str	r5, [r4, #0]
  403ac0:	f7fd f830 	bl	400b24 <_lseek>
  403ac4:	1c43      	adds	r3, r0, #1
  403ac6:	d000      	beq.n	403aca <_lseek_r+0x1a>
  403ac8:	bd70      	pop	{r4, r5, r6, pc}
  403aca:	6823      	ldr	r3, [r4, #0]
  403acc:	2b00      	cmp	r3, #0
  403ace:	d0fb      	beq.n	403ac8 <_lseek_r+0x18>
  403ad0:	6033      	str	r3, [r6, #0]
  403ad2:	bd70      	pop	{r4, r5, r6, pc}
  403ad4:	20000954 	.word	0x20000954

00403ad8 <_read_r>:
  403ad8:	b570      	push	{r4, r5, r6, lr}
  403ada:	4c08      	ldr	r4, [pc, #32]	; (403afc <_read_r+0x24>)
  403adc:	4606      	mov	r6, r0
  403ade:	2500      	movs	r5, #0
  403ae0:	4608      	mov	r0, r1
  403ae2:	4611      	mov	r1, r2
  403ae4:	461a      	mov	r2, r3
  403ae6:	6025      	str	r5, [r4, #0]
  403ae8:	f7fc fb50 	bl	40018c <_read>
  403aec:	1c43      	adds	r3, r0, #1
  403aee:	d000      	beq.n	403af2 <_read_r+0x1a>
  403af0:	bd70      	pop	{r4, r5, r6, pc}
  403af2:	6823      	ldr	r3, [r4, #0]
  403af4:	2b00      	cmp	r3, #0
  403af6:	d0fb      	beq.n	403af0 <_read_r+0x18>
  403af8:	6033      	str	r3, [r6, #0]
  403afa:	bd70      	pop	{r4, r5, r6, pc}
  403afc:	20000954 	.word	0x20000954

00403b00 <__aeabi_uldivmod>:
  403b00:	b953      	cbnz	r3, 403b18 <__aeabi_uldivmod+0x18>
  403b02:	b94a      	cbnz	r2, 403b18 <__aeabi_uldivmod+0x18>
  403b04:	2900      	cmp	r1, #0
  403b06:	bf08      	it	eq
  403b08:	2800      	cmpeq	r0, #0
  403b0a:	bf1c      	itt	ne
  403b0c:	f04f 31ff 	movne.w	r1, #4294967295
  403b10:	f04f 30ff 	movne.w	r0, #4294967295
  403b14:	f000 b83c 	b.w	403b90 <__aeabi_idiv0>
  403b18:	b082      	sub	sp, #8
  403b1a:	46ec      	mov	ip, sp
  403b1c:	e92d 5000 	stmdb	sp!, {ip, lr}
  403b20:	f000 f81e 	bl	403b60 <__gnu_uldivmod_helper>
  403b24:	f8dd e004 	ldr.w	lr, [sp, #4]
  403b28:	b002      	add	sp, #8
  403b2a:	bc0c      	pop	{r2, r3}
  403b2c:	4770      	bx	lr
  403b2e:	bf00      	nop

00403b30 <__gnu_ldivmod_helper>:
  403b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b34:	9c06      	ldr	r4, [sp, #24]
  403b36:	4615      	mov	r5, r2
  403b38:	4606      	mov	r6, r0
  403b3a:	460f      	mov	r7, r1
  403b3c:	4698      	mov	r8, r3
  403b3e:	f000 f829 	bl	403b94 <__divdi3>
  403b42:	fb05 f301 	mul.w	r3, r5, r1
  403b46:	fb00 3808 	mla	r8, r0, r8, r3
  403b4a:	fba5 2300 	umull	r2, r3, r5, r0
  403b4e:	1ab2      	subs	r2, r6, r2
  403b50:	4443      	add	r3, r8
  403b52:	eb67 0303 	sbc.w	r3, r7, r3
  403b56:	e9c4 2300 	strd	r2, r3, [r4]
  403b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b5e:	bf00      	nop

00403b60 <__gnu_uldivmod_helper>:
  403b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b64:	9c06      	ldr	r4, [sp, #24]
  403b66:	4690      	mov	r8, r2
  403b68:	4606      	mov	r6, r0
  403b6a:	460f      	mov	r7, r1
  403b6c:	461d      	mov	r5, r3
  403b6e:	f000 f95f 	bl	403e30 <__udivdi3>
  403b72:	fb00 f505 	mul.w	r5, r0, r5
  403b76:	fba0 2308 	umull	r2, r3, r0, r8
  403b7a:	fb08 5501 	mla	r5, r8, r1, r5
  403b7e:	1ab2      	subs	r2, r6, r2
  403b80:	442b      	add	r3, r5
  403b82:	eb67 0303 	sbc.w	r3, r7, r3
  403b86:	e9c4 2300 	strd	r2, r3, [r4]
  403b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b8e:	bf00      	nop

00403b90 <__aeabi_idiv0>:
  403b90:	4770      	bx	lr
  403b92:	bf00      	nop

00403b94 <__divdi3>:
  403b94:	2900      	cmp	r1, #0
  403b96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403b9a:	f2c0 80a6 	blt.w	403cea <__divdi3+0x156>
  403b9e:	2600      	movs	r6, #0
  403ba0:	2b00      	cmp	r3, #0
  403ba2:	f2c0 809c 	blt.w	403cde <__divdi3+0x14a>
  403ba6:	4688      	mov	r8, r1
  403ba8:	4694      	mov	ip, r2
  403baa:	469e      	mov	lr, r3
  403bac:	4615      	mov	r5, r2
  403bae:	4604      	mov	r4, r0
  403bb0:	460f      	mov	r7, r1
  403bb2:	2b00      	cmp	r3, #0
  403bb4:	d13d      	bne.n	403c32 <__divdi3+0x9e>
  403bb6:	428a      	cmp	r2, r1
  403bb8:	d959      	bls.n	403c6e <__divdi3+0xda>
  403bba:	fab2 f382 	clz	r3, r2
  403bbe:	b13b      	cbz	r3, 403bd0 <__divdi3+0x3c>
  403bc0:	f1c3 0220 	rsb	r2, r3, #32
  403bc4:	409f      	lsls	r7, r3
  403bc6:	fa20 f202 	lsr.w	r2, r0, r2
  403bca:	409d      	lsls	r5, r3
  403bcc:	4317      	orrs	r7, r2
  403bce:	409c      	lsls	r4, r3
  403bd0:	0c29      	lsrs	r1, r5, #16
  403bd2:	0c22      	lsrs	r2, r4, #16
  403bd4:	fbb7 fef1 	udiv	lr, r7, r1
  403bd8:	b2a8      	uxth	r0, r5
  403bda:	fb01 771e 	mls	r7, r1, lr, r7
  403bde:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  403be2:	fb00 f30e 	mul.w	r3, r0, lr
  403be6:	42bb      	cmp	r3, r7
  403be8:	d90a      	bls.n	403c00 <__divdi3+0x6c>
  403bea:	197f      	adds	r7, r7, r5
  403bec:	f10e 32ff 	add.w	r2, lr, #4294967295
  403bf0:	f080 8105 	bcs.w	403dfe <__divdi3+0x26a>
  403bf4:	42bb      	cmp	r3, r7
  403bf6:	f240 8102 	bls.w	403dfe <__divdi3+0x26a>
  403bfa:	f1ae 0e02 	sub.w	lr, lr, #2
  403bfe:	442f      	add	r7, r5
  403c00:	1aff      	subs	r7, r7, r3
  403c02:	b2a4      	uxth	r4, r4
  403c04:	fbb7 f3f1 	udiv	r3, r7, r1
  403c08:	fb01 7713 	mls	r7, r1, r3, r7
  403c0c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  403c10:	fb00 f003 	mul.w	r0, r0, r3
  403c14:	42b8      	cmp	r0, r7
  403c16:	d908      	bls.n	403c2a <__divdi3+0x96>
  403c18:	197f      	adds	r7, r7, r5
  403c1a:	f103 32ff 	add.w	r2, r3, #4294967295
  403c1e:	f080 80f0 	bcs.w	403e02 <__divdi3+0x26e>
  403c22:	42b8      	cmp	r0, r7
  403c24:	f240 80ed 	bls.w	403e02 <__divdi3+0x26e>
  403c28:	3b02      	subs	r3, #2
  403c2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  403c2e:	2200      	movs	r2, #0
  403c30:	e003      	b.n	403c3a <__divdi3+0xa6>
  403c32:	428b      	cmp	r3, r1
  403c34:	d90f      	bls.n	403c56 <__divdi3+0xc2>
  403c36:	2200      	movs	r2, #0
  403c38:	4613      	mov	r3, r2
  403c3a:	1c34      	adds	r4, r6, #0
  403c3c:	bf18      	it	ne
  403c3e:	2401      	movne	r4, #1
  403c40:	4260      	negs	r0, r4
  403c42:	f04f 0500 	mov.w	r5, #0
  403c46:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  403c4a:	4058      	eors	r0, r3
  403c4c:	4051      	eors	r1, r2
  403c4e:	1900      	adds	r0, r0, r4
  403c50:	4169      	adcs	r1, r5
  403c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c56:	fab3 f283 	clz	r2, r3
  403c5a:	2a00      	cmp	r2, #0
  403c5c:	f040 8086 	bne.w	403d6c <__divdi3+0x1d8>
  403c60:	428b      	cmp	r3, r1
  403c62:	d302      	bcc.n	403c6a <__divdi3+0xd6>
  403c64:	4584      	cmp	ip, r0
  403c66:	f200 80db 	bhi.w	403e20 <__divdi3+0x28c>
  403c6a:	2301      	movs	r3, #1
  403c6c:	e7e5      	b.n	403c3a <__divdi3+0xa6>
  403c6e:	b912      	cbnz	r2, 403c76 <__divdi3+0xe2>
  403c70:	2301      	movs	r3, #1
  403c72:	fbb3 f5f2 	udiv	r5, r3, r2
  403c76:	fab5 f085 	clz	r0, r5
  403c7a:	2800      	cmp	r0, #0
  403c7c:	d13b      	bne.n	403cf6 <__divdi3+0x162>
  403c7e:	1b78      	subs	r0, r7, r5
  403c80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403c84:	fa1f fc85 	uxth.w	ip, r5
  403c88:	2201      	movs	r2, #1
  403c8a:	fbb0 f8fe 	udiv	r8, r0, lr
  403c8e:	0c21      	lsrs	r1, r4, #16
  403c90:	fb0e 0718 	mls	r7, lr, r8, r0
  403c94:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  403c98:	fb0c f308 	mul.w	r3, ip, r8
  403c9c:	42bb      	cmp	r3, r7
  403c9e:	d907      	bls.n	403cb0 <__divdi3+0x11c>
  403ca0:	197f      	adds	r7, r7, r5
  403ca2:	f108 31ff 	add.w	r1, r8, #4294967295
  403ca6:	d202      	bcs.n	403cae <__divdi3+0x11a>
  403ca8:	42bb      	cmp	r3, r7
  403caa:	f200 80bd 	bhi.w	403e28 <__divdi3+0x294>
  403cae:	4688      	mov	r8, r1
  403cb0:	1aff      	subs	r7, r7, r3
  403cb2:	b2a4      	uxth	r4, r4
  403cb4:	fbb7 f3fe 	udiv	r3, r7, lr
  403cb8:	fb0e 7713 	mls	r7, lr, r3, r7
  403cbc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  403cc0:	fb0c fc03 	mul.w	ip, ip, r3
  403cc4:	45bc      	cmp	ip, r7
  403cc6:	d907      	bls.n	403cd8 <__divdi3+0x144>
  403cc8:	197f      	adds	r7, r7, r5
  403cca:	f103 31ff 	add.w	r1, r3, #4294967295
  403cce:	d202      	bcs.n	403cd6 <__divdi3+0x142>
  403cd0:	45bc      	cmp	ip, r7
  403cd2:	f200 80a7 	bhi.w	403e24 <__divdi3+0x290>
  403cd6:	460b      	mov	r3, r1
  403cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403cdc:	e7ad      	b.n	403c3a <__divdi3+0xa6>
  403cde:	4252      	negs	r2, r2
  403ce0:	ea6f 0606 	mvn.w	r6, r6
  403ce4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403ce8:	e75d      	b.n	403ba6 <__divdi3+0x12>
  403cea:	4240      	negs	r0, r0
  403cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403cf0:	f04f 36ff 	mov.w	r6, #4294967295
  403cf4:	e754      	b.n	403ba0 <__divdi3+0xc>
  403cf6:	f1c0 0220 	rsb	r2, r0, #32
  403cfa:	fa24 f102 	lsr.w	r1, r4, r2
  403cfe:	fa07 f300 	lsl.w	r3, r7, r0
  403d02:	4085      	lsls	r5, r0
  403d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403d08:	40d7      	lsrs	r7, r2
  403d0a:	4319      	orrs	r1, r3
  403d0c:	fbb7 f2fe 	udiv	r2, r7, lr
  403d10:	0c0b      	lsrs	r3, r1, #16
  403d12:	fb0e 7712 	mls	r7, lr, r2, r7
  403d16:	fa1f fc85 	uxth.w	ip, r5
  403d1a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  403d1e:	fb0c f702 	mul.w	r7, ip, r2
  403d22:	429f      	cmp	r7, r3
  403d24:	fa04 f400 	lsl.w	r4, r4, r0
  403d28:	d907      	bls.n	403d3a <__divdi3+0x1a6>
  403d2a:	195b      	adds	r3, r3, r5
  403d2c:	f102 30ff 	add.w	r0, r2, #4294967295
  403d30:	d274      	bcs.n	403e1c <__divdi3+0x288>
  403d32:	429f      	cmp	r7, r3
  403d34:	d972      	bls.n	403e1c <__divdi3+0x288>
  403d36:	3a02      	subs	r2, #2
  403d38:	442b      	add	r3, r5
  403d3a:	1bdf      	subs	r7, r3, r7
  403d3c:	b289      	uxth	r1, r1
  403d3e:	fbb7 f8fe 	udiv	r8, r7, lr
  403d42:	fb0e 7318 	mls	r3, lr, r8, r7
  403d46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  403d4a:	fb0c f708 	mul.w	r7, ip, r8
  403d4e:	429f      	cmp	r7, r3
  403d50:	d908      	bls.n	403d64 <__divdi3+0x1d0>
  403d52:	195b      	adds	r3, r3, r5
  403d54:	f108 31ff 	add.w	r1, r8, #4294967295
  403d58:	d25c      	bcs.n	403e14 <__divdi3+0x280>
  403d5a:	429f      	cmp	r7, r3
  403d5c:	d95a      	bls.n	403e14 <__divdi3+0x280>
  403d5e:	f1a8 0802 	sub.w	r8, r8, #2
  403d62:	442b      	add	r3, r5
  403d64:	1bd8      	subs	r0, r3, r7
  403d66:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  403d6a:	e78e      	b.n	403c8a <__divdi3+0xf6>
  403d6c:	f1c2 0320 	rsb	r3, r2, #32
  403d70:	fa2c f103 	lsr.w	r1, ip, r3
  403d74:	fa0e fe02 	lsl.w	lr, lr, r2
  403d78:	fa20 f703 	lsr.w	r7, r0, r3
  403d7c:	ea41 0e0e 	orr.w	lr, r1, lr
  403d80:	fa08 f002 	lsl.w	r0, r8, r2
  403d84:	fa28 f103 	lsr.w	r1, r8, r3
  403d88:	ea4f 451e 	mov.w	r5, lr, lsr #16
  403d8c:	4338      	orrs	r0, r7
  403d8e:	fbb1 f8f5 	udiv	r8, r1, r5
  403d92:	0c03      	lsrs	r3, r0, #16
  403d94:	fb05 1118 	mls	r1, r5, r8, r1
  403d98:	fa1f f78e 	uxth.w	r7, lr
  403d9c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403da0:	fb07 f308 	mul.w	r3, r7, r8
  403da4:	428b      	cmp	r3, r1
  403da6:	fa0c fc02 	lsl.w	ip, ip, r2
  403daa:	d909      	bls.n	403dc0 <__divdi3+0x22c>
  403dac:	eb11 010e 	adds.w	r1, r1, lr
  403db0:	f108 39ff 	add.w	r9, r8, #4294967295
  403db4:	d230      	bcs.n	403e18 <__divdi3+0x284>
  403db6:	428b      	cmp	r3, r1
  403db8:	d92e      	bls.n	403e18 <__divdi3+0x284>
  403dba:	f1a8 0802 	sub.w	r8, r8, #2
  403dbe:	4471      	add	r1, lr
  403dc0:	1ac9      	subs	r1, r1, r3
  403dc2:	b280      	uxth	r0, r0
  403dc4:	fbb1 f3f5 	udiv	r3, r1, r5
  403dc8:	fb05 1113 	mls	r1, r5, r3, r1
  403dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403dd0:	fb07 f703 	mul.w	r7, r7, r3
  403dd4:	428f      	cmp	r7, r1
  403dd6:	d908      	bls.n	403dea <__divdi3+0x256>
  403dd8:	eb11 010e 	adds.w	r1, r1, lr
  403ddc:	f103 30ff 	add.w	r0, r3, #4294967295
  403de0:	d216      	bcs.n	403e10 <__divdi3+0x27c>
  403de2:	428f      	cmp	r7, r1
  403de4:	d914      	bls.n	403e10 <__divdi3+0x27c>
  403de6:	3b02      	subs	r3, #2
  403de8:	4471      	add	r1, lr
  403dea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403dee:	1bc9      	subs	r1, r1, r7
  403df0:	fba3 890c 	umull	r8, r9, r3, ip
  403df4:	4549      	cmp	r1, r9
  403df6:	d309      	bcc.n	403e0c <__divdi3+0x278>
  403df8:	d005      	beq.n	403e06 <__divdi3+0x272>
  403dfa:	2200      	movs	r2, #0
  403dfc:	e71d      	b.n	403c3a <__divdi3+0xa6>
  403dfe:	4696      	mov	lr, r2
  403e00:	e6fe      	b.n	403c00 <__divdi3+0x6c>
  403e02:	4613      	mov	r3, r2
  403e04:	e711      	b.n	403c2a <__divdi3+0x96>
  403e06:	4094      	lsls	r4, r2
  403e08:	4544      	cmp	r4, r8
  403e0a:	d2f6      	bcs.n	403dfa <__divdi3+0x266>
  403e0c:	3b01      	subs	r3, #1
  403e0e:	e7f4      	b.n	403dfa <__divdi3+0x266>
  403e10:	4603      	mov	r3, r0
  403e12:	e7ea      	b.n	403dea <__divdi3+0x256>
  403e14:	4688      	mov	r8, r1
  403e16:	e7a5      	b.n	403d64 <__divdi3+0x1d0>
  403e18:	46c8      	mov	r8, r9
  403e1a:	e7d1      	b.n	403dc0 <__divdi3+0x22c>
  403e1c:	4602      	mov	r2, r0
  403e1e:	e78c      	b.n	403d3a <__divdi3+0x1a6>
  403e20:	4613      	mov	r3, r2
  403e22:	e70a      	b.n	403c3a <__divdi3+0xa6>
  403e24:	3b02      	subs	r3, #2
  403e26:	e757      	b.n	403cd8 <__divdi3+0x144>
  403e28:	f1a8 0802 	sub.w	r8, r8, #2
  403e2c:	442f      	add	r7, r5
  403e2e:	e73f      	b.n	403cb0 <__divdi3+0x11c>

00403e30 <__udivdi3>:
  403e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e34:	2b00      	cmp	r3, #0
  403e36:	d144      	bne.n	403ec2 <__udivdi3+0x92>
  403e38:	428a      	cmp	r2, r1
  403e3a:	4615      	mov	r5, r2
  403e3c:	4604      	mov	r4, r0
  403e3e:	d94f      	bls.n	403ee0 <__udivdi3+0xb0>
  403e40:	fab2 f782 	clz	r7, r2
  403e44:	460e      	mov	r6, r1
  403e46:	b14f      	cbz	r7, 403e5c <__udivdi3+0x2c>
  403e48:	f1c7 0320 	rsb	r3, r7, #32
  403e4c:	40b9      	lsls	r1, r7
  403e4e:	fa20 f603 	lsr.w	r6, r0, r3
  403e52:	fa02 f507 	lsl.w	r5, r2, r7
  403e56:	430e      	orrs	r6, r1
  403e58:	fa00 f407 	lsl.w	r4, r0, r7
  403e5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403e60:	0c23      	lsrs	r3, r4, #16
  403e62:	fbb6 f0fe 	udiv	r0, r6, lr
  403e66:	b2af      	uxth	r7, r5
  403e68:	fb0e 6110 	mls	r1, lr, r0, r6
  403e6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  403e70:	fb07 f100 	mul.w	r1, r7, r0
  403e74:	4299      	cmp	r1, r3
  403e76:	d909      	bls.n	403e8c <__udivdi3+0x5c>
  403e78:	195b      	adds	r3, r3, r5
  403e7a:	f100 32ff 	add.w	r2, r0, #4294967295
  403e7e:	f080 80ec 	bcs.w	40405a <__udivdi3+0x22a>
  403e82:	4299      	cmp	r1, r3
  403e84:	f240 80e9 	bls.w	40405a <__udivdi3+0x22a>
  403e88:	3802      	subs	r0, #2
  403e8a:	442b      	add	r3, r5
  403e8c:	1a5a      	subs	r2, r3, r1
  403e8e:	b2a4      	uxth	r4, r4
  403e90:	fbb2 f3fe 	udiv	r3, r2, lr
  403e94:	fb0e 2213 	mls	r2, lr, r3, r2
  403e98:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  403e9c:	fb07 f703 	mul.w	r7, r7, r3
  403ea0:	4297      	cmp	r7, r2
  403ea2:	d908      	bls.n	403eb6 <__udivdi3+0x86>
  403ea4:	1952      	adds	r2, r2, r5
  403ea6:	f103 31ff 	add.w	r1, r3, #4294967295
  403eaa:	f080 80d8 	bcs.w	40405e <__udivdi3+0x22e>
  403eae:	4297      	cmp	r7, r2
  403eb0:	f240 80d5 	bls.w	40405e <__udivdi3+0x22e>
  403eb4:	3b02      	subs	r3, #2
  403eb6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403eba:	2600      	movs	r6, #0
  403ebc:	4631      	mov	r1, r6
  403ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ec2:	428b      	cmp	r3, r1
  403ec4:	d847      	bhi.n	403f56 <__udivdi3+0x126>
  403ec6:	fab3 f683 	clz	r6, r3
  403eca:	2e00      	cmp	r6, #0
  403ecc:	d148      	bne.n	403f60 <__udivdi3+0x130>
  403ece:	428b      	cmp	r3, r1
  403ed0:	d302      	bcc.n	403ed8 <__udivdi3+0xa8>
  403ed2:	4282      	cmp	r2, r0
  403ed4:	f200 80cd 	bhi.w	404072 <__udivdi3+0x242>
  403ed8:	2001      	movs	r0, #1
  403eda:	4631      	mov	r1, r6
  403edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ee0:	b912      	cbnz	r2, 403ee8 <__udivdi3+0xb8>
  403ee2:	2501      	movs	r5, #1
  403ee4:	fbb5 f5f2 	udiv	r5, r5, r2
  403ee8:	fab5 f885 	clz	r8, r5
  403eec:	f1b8 0f00 	cmp.w	r8, #0
  403ef0:	d177      	bne.n	403fe2 <__udivdi3+0x1b2>
  403ef2:	1b4a      	subs	r2, r1, r5
  403ef4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403ef8:	b2af      	uxth	r7, r5
  403efa:	2601      	movs	r6, #1
  403efc:	fbb2 f0fe 	udiv	r0, r2, lr
  403f00:	0c23      	lsrs	r3, r4, #16
  403f02:	fb0e 2110 	mls	r1, lr, r0, r2
  403f06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403f0a:	fb07 f300 	mul.w	r3, r7, r0
  403f0e:	428b      	cmp	r3, r1
  403f10:	d907      	bls.n	403f22 <__udivdi3+0xf2>
  403f12:	1949      	adds	r1, r1, r5
  403f14:	f100 32ff 	add.w	r2, r0, #4294967295
  403f18:	d202      	bcs.n	403f20 <__udivdi3+0xf0>
  403f1a:	428b      	cmp	r3, r1
  403f1c:	f200 80ba 	bhi.w	404094 <__udivdi3+0x264>
  403f20:	4610      	mov	r0, r2
  403f22:	1ac9      	subs	r1, r1, r3
  403f24:	b2a4      	uxth	r4, r4
  403f26:	fbb1 f3fe 	udiv	r3, r1, lr
  403f2a:	fb0e 1113 	mls	r1, lr, r3, r1
  403f2e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  403f32:	fb07 f703 	mul.w	r7, r7, r3
  403f36:	42a7      	cmp	r7, r4
  403f38:	d908      	bls.n	403f4c <__udivdi3+0x11c>
  403f3a:	1964      	adds	r4, r4, r5
  403f3c:	f103 32ff 	add.w	r2, r3, #4294967295
  403f40:	f080 808f 	bcs.w	404062 <__udivdi3+0x232>
  403f44:	42a7      	cmp	r7, r4
  403f46:	f240 808c 	bls.w	404062 <__udivdi3+0x232>
  403f4a:	3b02      	subs	r3, #2
  403f4c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403f50:	4631      	mov	r1, r6
  403f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f56:	2600      	movs	r6, #0
  403f58:	4630      	mov	r0, r6
  403f5a:	4631      	mov	r1, r6
  403f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f60:	f1c6 0420 	rsb	r4, r6, #32
  403f64:	fa22 f504 	lsr.w	r5, r2, r4
  403f68:	40b3      	lsls	r3, r6
  403f6a:	432b      	orrs	r3, r5
  403f6c:	fa20 fc04 	lsr.w	ip, r0, r4
  403f70:	fa01 f706 	lsl.w	r7, r1, r6
  403f74:	fa21 f504 	lsr.w	r5, r1, r4
  403f78:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  403f7c:	ea4c 0707 	orr.w	r7, ip, r7
  403f80:	fbb5 f8fe 	udiv	r8, r5, lr
  403f84:	0c39      	lsrs	r1, r7, #16
  403f86:	fb0e 5518 	mls	r5, lr, r8, r5
  403f8a:	fa1f fc83 	uxth.w	ip, r3
  403f8e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  403f92:	fb0c f108 	mul.w	r1, ip, r8
  403f96:	42a9      	cmp	r1, r5
  403f98:	fa02 f206 	lsl.w	r2, r2, r6
  403f9c:	d904      	bls.n	403fa8 <__udivdi3+0x178>
  403f9e:	18ed      	adds	r5, r5, r3
  403fa0:	f108 34ff 	add.w	r4, r8, #4294967295
  403fa4:	d367      	bcc.n	404076 <__udivdi3+0x246>
  403fa6:	46a0      	mov	r8, r4
  403fa8:	1a6d      	subs	r5, r5, r1
  403faa:	b2bf      	uxth	r7, r7
  403fac:	fbb5 f4fe 	udiv	r4, r5, lr
  403fb0:	fb0e 5514 	mls	r5, lr, r4, r5
  403fb4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  403fb8:	fb0c fc04 	mul.w	ip, ip, r4
  403fbc:	458c      	cmp	ip, r1
  403fbe:	d904      	bls.n	403fca <__udivdi3+0x19a>
  403fc0:	18c9      	adds	r1, r1, r3
  403fc2:	f104 35ff 	add.w	r5, r4, #4294967295
  403fc6:	d35c      	bcc.n	404082 <__udivdi3+0x252>
  403fc8:	462c      	mov	r4, r5
  403fca:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  403fce:	ebcc 0101 	rsb	r1, ip, r1
  403fd2:	fba4 2302 	umull	r2, r3, r4, r2
  403fd6:	4299      	cmp	r1, r3
  403fd8:	d348      	bcc.n	40406c <__udivdi3+0x23c>
  403fda:	d044      	beq.n	404066 <__udivdi3+0x236>
  403fdc:	4620      	mov	r0, r4
  403fde:	2600      	movs	r6, #0
  403fe0:	e76c      	b.n	403ebc <__udivdi3+0x8c>
  403fe2:	f1c8 0420 	rsb	r4, r8, #32
  403fe6:	fa01 f308 	lsl.w	r3, r1, r8
  403fea:	fa05 f508 	lsl.w	r5, r5, r8
  403fee:	fa20 f704 	lsr.w	r7, r0, r4
  403ff2:	40e1      	lsrs	r1, r4
  403ff4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403ff8:	431f      	orrs	r7, r3
  403ffa:	fbb1 f6fe 	udiv	r6, r1, lr
  403ffe:	0c3a      	lsrs	r2, r7, #16
  404000:	fb0e 1116 	mls	r1, lr, r6, r1
  404004:	fa1f fc85 	uxth.w	ip, r5
  404008:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40400c:	fb0c f206 	mul.w	r2, ip, r6
  404010:	429a      	cmp	r2, r3
  404012:	fa00 f408 	lsl.w	r4, r0, r8
  404016:	d907      	bls.n	404028 <__udivdi3+0x1f8>
  404018:	195b      	adds	r3, r3, r5
  40401a:	f106 31ff 	add.w	r1, r6, #4294967295
  40401e:	d237      	bcs.n	404090 <__udivdi3+0x260>
  404020:	429a      	cmp	r2, r3
  404022:	d935      	bls.n	404090 <__udivdi3+0x260>
  404024:	3e02      	subs	r6, #2
  404026:	442b      	add	r3, r5
  404028:	1a9b      	subs	r3, r3, r2
  40402a:	b2bf      	uxth	r7, r7
  40402c:	fbb3 f0fe 	udiv	r0, r3, lr
  404030:	fb0e 3310 	mls	r3, lr, r0, r3
  404034:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  404038:	fb0c f100 	mul.w	r1, ip, r0
  40403c:	4299      	cmp	r1, r3
  40403e:	d907      	bls.n	404050 <__udivdi3+0x220>
  404040:	195b      	adds	r3, r3, r5
  404042:	f100 32ff 	add.w	r2, r0, #4294967295
  404046:	d221      	bcs.n	40408c <__udivdi3+0x25c>
  404048:	4299      	cmp	r1, r3
  40404a:	d91f      	bls.n	40408c <__udivdi3+0x25c>
  40404c:	3802      	subs	r0, #2
  40404e:	442b      	add	r3, r5
  404050:	1a5a      	subs	r2, r3, r1
  404052:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  404056:	4667      	mov	r7, ip
  404058:	e750      	b.n	403efc <__udivdi3+0xcc>
  40405a:	4610      	mov	r0, r2
  40405c:	e716      	b.n	403e8c <__udivdi3+0x5c>
  40405e:	460b      	mov	r3, r1
  404060:	e729      	b.n	403eb6 <__udivdi3+0x86>
  404062:	4613      	mov	r3, r2
  404064:	e772      	b.n	403f4c <__udivdi3+0x11c>
  404066:	40b0      	lsls	r0, r6
  404068:	4290      	cmp	r0, r2
  40406a:	d2b7      	bcs.n	403fdc <__udivdi3+0x1ac>
  40406c:	1e60      	subs	r0, r4, #1
  40406e:	2600      	movs	r6, #0
  404070:	e724      	b.n	403ebc <__udivdi3+0x8c>
  404072:	4630      	mov	r0, r6
  404074:	e722      	b.n	403ebc <__udivdi3+0x8c>
  404076:	42a9      	cmp	r1, r5
  404078:	d995      	bls.n	403fa6 <__udivdi3+0x176>
  40407a:	f1a8 0802 	sub.w	r8, r8, #2
  40407e:	441d      	add	r5, r3
  404080:	e792      	b.n	403fa8 <__udivdi3+0x178>
  404082:	458c      	cmp	ip, r1
  404084:	d9a0      	bls.n	403fc8 <__udivdi3+0x198>
  404086:	3c02      	subs	r4, #2
  404088:	4419      	add	r1, r3
  40408a:	e79e      	b.n	403fca <__udivdi3+0x19a>
  40408c:	4610      	mov	r0, r2
  40408e:	e7df      	b.n	404050 <__udivdi3+0x220>
  404090:	460e      	mov	r6, r1
  404092:	e7c9      	b.n	404028 <__udivdi3+0x1f8>
  404094:	3802      	subs	r0, #2
  404096:	4429      	add	r1, r5
  404098:	e743      	b.n	403f22 <__udivdi3+0xf2>
  40409a:	bf00      	nop
  40409c:	41555153 	.word	0x41555153
  4040a0:	00004552 	.word	0x00004552
  4040a4:	454e4953 	.word	0x454e4953
  4040a8:	00000000 	.word	0x00000000
  4040ac:	3d3d3d3d 	.word	0x3d3d3d3d
  4040b0:	3d3d3d3d 	.word	0x3d3d3d3d
  4040b4:	6e654d20 	.word	0x6e654d20
  4040b8:	68432075 	.word	0x68432075
  4040bc:	6563696f 	.word	0x6563696f
  4040c0:	6f662073 	.word	0x6f662073
  4040c4:	68742072 	.word	0x68742072
  4040c8:	65207369 	.word	0x65207369
  4040cc:	706d6178 	.word	0x706d6178
  4040d0:	3d20656c 	.word	0x3d20656c
  4040d4:	3d3d3d3d 	.word	0x3d3d3d3d
  4040d8:	0d3d3d3d 	.word	0x0d3d3d3d
  4040dc:	00000000 	.word	0x00000000
  4040e0:	30202d2d 	.word	0x30202d2d
  4040e4:	6553203a 	.word	0x6553203a
  4040e8:	72662074 	.word	0x72662074
  4040ec:	65757165 	.word	0x65757165
  4040f0:	2879636e 	.word	0x2879636e
  4040f4:	7a486425 	.word	0x7a486425
  4040f8:	6b64252d 	.word	0x6b64252d
  4040fc:	2e297a48 	.word	0x2e297a48
  404100:	00000d0a 	.word	0x00000d0a
  404104:	31202d2d 	.word	0x31202d2d
  404108:	6553203a 	.word	0x6553203a
  40410c:	6d612074 	.word	0x6d612074
  404110:	74696c70 	.word	0x74696c70
  404114:	28656475 	.word	0x28656475
  404118:	252d6425 	.word	0x252d6425
  40411c:	0a2e2964 	.word	0x0a2e2964
  404120:	0000000d 	.word	0x0000000d
  404124:	69202d2d 	.word	0x69202d2d
  404128:	6944203a 	.word	0x6944203a
  40412c:	616c7073 	.word	0x616c7073
  404130:	72702079 	.word	0x72702079
  404134:	6e657365 	.word	0x6e657365
  404138:	72662074 	.word	0x72662074
  40413c:	65757165 	.word	0x65757165
  404140:	2079636e 	.word	0x2079636e
  404144:	20646e61 	.word	0x20646e61
  404148:	6c706d61 	.word	0x6c706d61
  40414c:	64757469 	.word	0x64757469
  404150:	0d0a2e65 	.word	0x0d0a2e65
  404154:	77202d2d 	.word	0x77202d2d
  404158:	7753203a 	.word	0x7753203a
  40415c:	68637469 	.word	0x68637469
  404160:	206f7420 	.word	0x206f7420
  404164:	6c6c7566 	.word	0x6c6c7566
  404168:	706d6120 	.word	0x706d6120
  40416c:	7574696c 	.word	0x7574696c
  404170:	73206564 	.word	0x73206564
  404174:	72617571 	.word	0x72617571
  404178:	61772065 	.word	0x61772065
  40417c:	6f206576 	.word	0x6f206576
  404180:	61622072 	.word	0x61622072
  404184:	0a2e6b63 	.word	0x0a2e6b63
  404188:	202d2d0d 	.word	0x202d2d0d
  40418c:	44203a6d 	.word	0x44203a6d
  404190:	6c707369 	.word	0x6c707369
  404194:	74207961 	.word	0x74207961
  404198:	20736968 	.word	0x20736968
  40419c:	756e656d 	.word	0x756e656d
  4041a0:	2d0d0a2e 	.word	0x2d0d0a2e
  4041a4:	2d2d2d2d 	.word	0x2d2d2d2d
  4041a8:	2d2d2d2d 	.word	0x2d2d2d2d
  4041ac:	202d2d2d 	.word	0x202d2d2d
  4041b0:	72727543 	.word	0x72727543
  4041b4:	20746e65 	.word	0x20746e65
  4041b8:	666e6f63 	.word	0x666e6f63
  4041bc:	72756769 	.word	0x72756769
  4041c0:	6f697461 	.word	0x6f697461
  4041c4:	2d2d206e 	.word	0x2d2d206e
  4041c8:	2d2d2d2d 	.word	0x2d2d2d2d
  4041cc:	2d2d2d2d 	.word	0x2d2d2d2d
  4041d0:	000d2d2d 	.word	0x000d2d2d
  4041d4:	44202d2d 	.word	0x44202d2d
  4041d8:	20434341 	.word	0x20434341
  4041dc:	6e616863 	.word	0x6e616863
  4041e0:	3a6c656e 	.word	0x3a6c656e
  4041e4:	0a642509 	.word	0x0a642509
  4041e8:	0000000d 	.word	0x0000000d
  4041ec:	41202d2d 	.word	0x41202d2d
  4041f0:	696c706d 	.word	0x696c706d
  4041f4:	65647574 	.word	0x65647574
  4041f8:	3a202020 	.word	0x3a202020
  4041fc:	646c2509 	.word	0x646c2509
  404200:	00000d0a 	.word	0x00000d0a
  404204:	46202d2d 	.word	0x46202d2d
  404208:	75716572 	.word	0x75716572
  40420c:	79636e65 	.word	0x79636e65
  404210:	3a202020 	.word	0x3a202020
  404214:	756c2509 	.word	0x756c2509
  404218:	00000d0a 	.word	0x00000d0a
  40421c:	57202d2d 	.word	0x57202d2d
  404220:	20657661 	.word	0x20657661
  404224:	20202020 	.word	0x20202020
  404228:	3a202020 	.word	0x3a202020
  40422c:	0a732509 	.word	0x0a732509
  404230:	0000000d 	.word	0x0000000d
  404234:	3d3d3d3d 	.word	0x3d3d3d3d
  404238:	3d3d3d3d 	.word	0x3d3d3d3d
  40423c:	3d3d3d3d 	.word	0x3d3d3d3d
  404240:	3d3d3d3d 	.word	0x3d3d3d3d
  404244:	3d3d3d3d 	.word	0x3d3d3d3d
  404248:	3d3d3d3d 	.word	0x3d3d3d3d
  40424c:	3d3d3d3d 	.word	0x3d3d3d3d
  404250:	3d3d3d3d 	.word	0x3d3d3d3d
  404254:	3d3d3d3d 	.word	0x3d3d3d3d
  404258:	3d3d3d3d 	.word	0x3d3d3d3d
  40425c:	3d3d3d3d 	.word	0x3d3d3d3d
  404260:	0d3d3d3d 	.word	0x0d3d3d3d
  404264:	00000000 	.word	0x00000000
  404268:	00006325 	.word	0x00006325
  40426c:	462d0d0a 	.word	0x462d0d0a
  404270:	6e49202d 	.word	0x6e49202d
  404274:	20747570 	.word	0x20747570
  404278:	756c6176 	.word	0x756c6176
  40427c:	73692065 	.word	0x73692065
  404280:	766e6920 	.word	0x766e6920
  404284:	64696c61 	.word	0x64696c61
  404288:	00000021 	.word	0x00000021
  40428c:	6c6c7546 	.word	0x6c6c7546
  404290:	706d4120 	.word	0x706d4120
  404294:	7574696c 	.word	0x7574696c
  404298:	53206564 	.word	0x53206564
  40429c:	52415551 	.word	0x52415551
  4042a0:	00000045 	.word	0x00000045
  4042a4:	44202d2d 	.word	0x44202d2d
  4042a8:	53204341 	.word	0x53204341
  4042ac:	77656e69 	.word	0x77656e69
  4042b0:	20657661 	.word	0x20657661
  4042b4:	6d617845 	.word	0x6d617845
  4042b8:	20656c70 	.word	0x20656c70
  4042bc:	0a0d2d2d 	.word	0x0a0d2d2d
  4042c0:	53202d2d 	.word	0x53202d2d
  4042c4:	53344d41 	.word	0x53344d41
  4042c8:	324b452d 	.word	0x324b452d
  4042cc:	0d2d2d20 	.word	0x0d2d2d20
  4042d0:	202d2d0a 	.word	0x202d2d0a
  4042d4:	706d6f43 	.word	0x706d6f43
  4042d8:	64656c69 	.word	0x64656c69
  4042dc:	614d203a 	.word	0x614d203a
  4042e0:	35322079 	.word	0x35322079
  4042e4:	31303220 	.word	0x31303220
  4042e8:	37312036 	.word	0x37312036
  4042ec:	3a34323a 	.word	0x3a34323a
  4042f0:	2d203533 	.word	0x2d203533
  4042f4:	00000d2d 	.word	0x00000d2d
  4042f8:	71657246 	.word	0x71657246
  4042fc:	636e6575 	.word	0x636e6575
  404300:	00093a79 	.word	0x00093a79
  404304:	00000a0d 	.word	0x00000a0d
  404308:	20746553 	.word	0x20746553
  40430c:	71657266 	.word	0x71657266
  404310:	636e6575 	.word	0x636e6575
  404314:	6f742079 	.word	0x6f742079
  404318:	25203a20 	.word	0x25203a20
  40431c:	7a48756c 	.word	0x7a48756c
  404320:	00000d0a 	.word	0x00000d0a
  404324:	6c706d41 	.word	0x6c706d41
  404328:	64757469 	.word	0x64757469
  40432c:	00093a65 	.word	0x00093a65
  404330:	20746553 	.word	0x20746553
  404334:	6c706d61 	.word	0x6c706d61
  404338:	64757469 	.word	0x64757469
  40433c:	6f742065 	.word	0x6f742065
  404340:	25203a20 	.word	0x25203a20
  404344:	0d0a756c 	.word	0x0d0a756c
  404348:	00000000 	.word	0x00000000
  40434c:	202d492d 	.word	0x202d492d
  404350:	71657246 	.word	0x71657246
  404354:	636e6575 	.word	0x636e6575
  404358:	203a2079 	.word	0x203a2079
  40435c:	20756c25 	.word	0x20756c25
  404360:	41207a48 	.word	0x41207a48
  404364:	696c706d 	.word	0x696c706d
  404368:	65647574 	.word	0x65647574
  40436c:	25203a20 	.word	0x25203a20
  404370:	0d0a646c 	.word	0x0d0a646c
  404374:	00000000 	.word	0x00000000
  404378:	202d492d 	.word	0x202d492d
  40437c:	74697753 	.word	0x74697753
  404380:	77206863 	.word	0x77206863
  404384:	20657661 	.word	0x20657661
  404388:	3a206f74 	.word	0x3a206f74
  40438c:	0a732520 	.word	0x0a732520
  404390:	0000000d 	.word	0x0000000d
  404394:	73657250 	.word	0x73657250
  404398:	6d272073 	.word	0x6d272073
  40439c:	726f2027 	.word	0x726f2027
  4043a0:	274d2720 	.word	0x274d2720
  4043a4:	206f7420 	.word	0x206f7420
  4043a8:	70736964 	.word	0x70736964
  4043ac:	2079616c 	.word	0x2079616c
  4043b0:	20656874 	.word	0x20656874
  4043b4:	6e69616d 	.word	0x6e69616d
  4043b8:	6e656d20 	.word	0x6e656d20
  4043bc:	67612075 	.word	0x67612075
  4043c0:	216e6961 	.word	0x216e6961
  4043c4:	0000000d 	.word	0x0000000d
  4043c8:	00000043 	.word	0x00000043

004043cc <_global_impure_ptr>:
  4043cc:	20000008 0000000a                       ... ....

004043d4 <zeroes.6869>:
  4043d4:	30303030 30303030 30303030 30303030     0000000000000000
  4043e4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4043f4:	00000000 33323130 37363534 62613938     ....0123456789ab
  404404:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00404414 <blanks.6868>:
  404414:	20202020 20202020 20202020 20202020                     

00404424 <_init>:
  404424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404426:	bf00      	nop
  404428:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40442a:	bc08      	pop	{r3}
  40442c:	469e      	mov	lr, r3
  40442e:	4770      	bx	lr

00404430 <__init_array_start>:
  404430:	0040211d 	.word	0x0040211d

00404434 <__frame_dummy_init_array_entry>:
  404434:	004000f1                                ..@.

00404438 <_fini>:
  404438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40443a:	bf00      	nop
  40443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40443e:	bc08      	pop	{r3}
  404440:	469e      	mov	lr, r3
  404442:	4770      	bx	lr

00404444 <__fini_array_start>:
  404444:	004000cd 	.word	0x004000cd
